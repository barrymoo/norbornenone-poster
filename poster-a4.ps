%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: poster.dvi
%%CreationDate: Fri May 17 17:40:35 2013
%%Pages: 1 0
%%PageOrder: Ascend
%%BoundingBox: 0 0 3402 2594
%%DocumentFonts: CMCSC10 CMR17 CMBX12 CMMI12 CMSY10 CMSL12
%%EndComments
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Ppdf poster.dvi -o poster.ps
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2013.05.17:1740
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 755 2013-03-09 08:48:58Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 713 2012-10-16 14:25:00Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.03, 2012/10/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { 
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get 32 ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ rightTrim psStringwidth } bind def

%/show { rightTrim psShow } bind def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: ./a0header.ps 0 0
%%BeginFeature *PageSize ISOA0/ISO A0
2 dict dup /PageSize [595 842] put dup /ImagingBBox null put
setpagedevice
38 84 translate
0.2 0.2 scale
%%EndFeature

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSL12
%!PS-AdobeFont-1.0: CMSL12 003.002
%%Title: CMSL12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSL12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSL12 known{/CMSL12 findfont dup/UniqueID known{dup
/UniqueID get 5000799 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSL12 def
/FontBBox {-56 -251 1102 750 }readonly def
/UniqueID 5000799 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSL12.) readonly def
/FullName (CMSL12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 56 /eight put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1BA6FC9E3601557F569CC
CFC761B28B4750D2A423A53BC817DD95810FDF74E65D5CBB288AD66070D5D973
6462F9C95D84037314739746915653EE5887CA0572047BBBD3DEECEF76600331
5D2DA112178478425DC12EDC0B976D49B8C80DCECC1D51AF792E83ABB175B53E
DB9B5CC7CF4972AA648AE0E19FC4ACA4607F68CF4A114979B6A955C17B33A890
058BD143B7C3709A107F6C827F535D564D849551A65C1E33D86EBDE6F87ACB34
AA1082FCBD1C7492428A70603B423BF59B2DAB39A3162D6D4F55F35317B4267A
BC52759E5156F935F0B0275E223FD1844D9CBC33CD132B3BEF6B5935A3F8CD94
C7DEDA448444BF4D97D607FCD68BB3110A9DAE0A0121A1D381E3C2C5423A74D8
D6B440F265AA67EF8FC86558A71D7D5F96ECAD065289818CA6EC136EFB0BD0C7
11C3FD7E4605ED6B9573C94E1B87A74BA1B4872C505D72DABB0E98603D183F77
7704A5904731E35C4B4154B5BFD135CF352B6AD27E58E8900572809DA3AEF546
55E7F1E95BC7024145BBF4581FC51DECFFE3D2E8E22B0FDFC4F62AA7008C45D5
076714AB5EE481E26A36C71BB02D27F76E2E42ABBF72C36F4F06CEEC104C7B31
0A89A876B2FE053A5E84F1BDCA907A0FC7FC542E1C979D130359451BD23E992F
1F9E5E18E977F773B7656F9989B21B53FC7BDBA81B9AD8AA4FF8CC915669BFAE
238741192230685FF05466C3802070A7DBCEF2F529B3F66AEFF9B37EC629CF73
62252C28483C3205ADBC9F5AC6931C9774E1043AEAB7E00EFA43F41A914F6F5C
D6B195B408741D2A6AB55719DDEED7D7E1E9E105216D1E6CED2910F370328FA6
5A1A44D551CD3AD6FCD20E86E31206C410ECF6B5828B2FCAA9AA49AA152AEEE2
247EB4CD920720B92A6D13954FDBB8188067D3CF9C27CB180732F45D50451369
87B8A268374A5301C7ED828C886A8F709CCB99F786E1DBDEC1F1766C82DFFD7A
61B5D5E381DBBEE0012B837BD0CF7FD8A0B206BAFC416205EE3E5C7C993D7573
E49E79544256F8F3E3E3C1F837D436E53471D72D0A70FBF0BACD151FEB4DA15F
0FE86F854286C934CF732ED6ABBF95E1D37B35938C1C7E1DB76E5A9ECD3BA934
107758EABBFB76974A49AB893937409C0F1DAD8408376905B2E4561DB43DCF8E
1FA549040E15C515807E512DCDF0F8DD98E97ACB6D6239289C2281327389AAF5
6E67FBF714F8FDD14873D77E8FDCD7F8DE4EE2E95B620BFEFA266DFE5876E1BD
C56F82A3EE20FFA2FA0619D8581A3A4F1F00C2EE711142E8CE50623428326701
46BDB2E8AA10D95E25225C9F461EF374606B0758BDDEE8C51134DD59C2B51E4C
A057FB647F220CA706DE74CBDD444DC31C4CE36C6CB81D220D0C25201A8D68C2
471401F0F528D9C87825150F827582BF381BFFC201F55237A9B7FA7AC7A0A2F3
906DFBAAD96C1E2384DCCDA2E841F9A3836575705F5E06C7A611EF895E3E3022
4A3090253D08B9390837189246CE711EE6783381B5B5D48C30628A626B3BC56E
F92270E927A4325CFD38F11A1BB43B7F42B4BD7BB39398D7FD84B0E505F40C3F
436A258A8B2A194540EC7FB46BEA533816D54CA4D99BE659A8267FC2975CA4BA
C9DC61B6E038F73FA9172D6AD3C8CC98D75ED4148AD27F8134356FB0BDAA2FBC
C34AFF2E3691331B42715E942E64314F521B6263D8CB22EBFE329C1DAA76D51E
760903E00B79720EBAEBD7694209BB5F33149BABD9CB6009BACECA9AE6E636DF
0B345EEFAF430038FC58CB7FE388DB2BD11E9DC02390D158F294B18C8D7A8D94
120AF0450FF8EFAB4F84C42476BB850D77D6B92BFAAA530BEFE132F84DB9A232
25AF17BB04826BDA35238741007CFD5A81B44CFB90A7D87DFD579D35F6CDC25C
60E8BDC0F1064A65BBEC3573BD008B68ADC5C5A317E3F4131CC66582167C39D8
C1EF065355DBD2A5C0630C17817926B053C269711CE836E5511D6D2DF0A721C3
82D1D12E5F189BB57F30CC69D2CA83E994677F31EB915A7E4E76D925ABDE2431
1BB10B126F79F9D9A9F58F22ABCA471C8A42970B2404E27BB229023EF3D07BEF
5F43D5F8C357B044A9963D8BC8734482B58FBB65C81A0360C7EC21DE0D73DC1E
F204DE5FB7B6156CADC48E57A551EE422FA944045E521B4D9F04EBB7FFEEAB27
9B7C10CE484EDFEA74AF2B5EE049DB1EF6FC39CB28788DCB07C708720B98B485
5FDA1B880AEADD781196DFC03AEF43353763E6D75392E7FCB7458E3021383DD8
BF7F6F0FA663DDD2AAEB93387B50E31EB428022AABA8F4668FEE41606DAA785B
233E2F642FF77ED4E716AD7C8761A9243F7908353C95B4EF0D80200C9468D21F
2B5B6665AF18ADEBB6AAB668FD7572989EB98A7619721F15BA36EA9C221BF205
03CA15D4E1053CCCF10B5B8C3FB81A4CCC28621309D9538EC53D32405110C85C
E2C53DEB0D354CA617FD7A70B44A3DD0C47640A011C06053CE347AF300AC86B3
A6ABFA3EF772F15562B26B87070D98FA1838DE6C0B6729EC18F8080E6A622588
007B116D78D87231647AF137E54E3190AA6835E291633FF7FEE8CF79207E33D7
9D76C49E5A9F2C4C71D47A7C40F0DF6A38794CDAAB6B77FEF323AB18F26E4F33
A7DEBEFD61CCEC5EAACF37A09D66D14E35076D9E756889AD81A3332265C54B44
7D25A254955E783632D216824FBA25A630F10524E39EB1801297D766492AC6EA
AD5D3C0EB84C166661620BF0226DF87AE0EA07072D7A0C1CC356A9C54FE04F80
7A50A461545107FF9A4472E55EFA0F46D4C2E9901D390E19643CD7B3E3E03475
DD9E1C049FD5996AC79713C5C6FFC708EA1E960BAFCE653DE3A8CA8D0DA3D887
9CD55049FAC13DB435B4AB167AC93F1DAB226EBF4758293A71810323B17EE63A
9312CE01184300F5888E71E6645B87970CA316BC191BD7CE1C4032C9ACEE233A
D50BE3E8DABB7CBEB5E8A77EC5F57074401CC7A0A8357D5545CAB47FD2FE07A2
EFA7BB07EA5618806D42E79044D1943C405F9327F73654DC583741159D44A95A
EDD6170E088550DE606ADFAA5A87B83BEB8B0B1572D70E77C1735037348B4C9A
74FAD29726835A282F6B739FD0EB4CF125084882CE172E307E33197566773EC8
6878AA666BD92ECAD406A99AEA79C99DC67198818BEA622264D5BA51979C6365
596A5420002C6FA38B2F6FE64236F0F1820E3D52608C8E507A4D1688E35BDD82
7AE4D0B63BB552C498BC705ADE2A9E35A9771DC44690D2AF6C246BCBE3C955B8
1C5B725D02CEF914610DF984BBE9D5D748836051BE1C666EDB7E512CAD5DE61E
B69BFEEBCC12D366285B9D2C930B4282801926526D416A320DEDB33C63084452
6181582CA10104154E474709518B40BA2EA15E5EAEB53C8F6006DBF21932C04E
6C55E6E51BBC1011B2359EA5941CD969DF22EB164CA69B75CC376D9611FB2DBF
160ACDDE5A8B190DB789D0F08BE737395EB62D5501B5509A58A1A839D9F2ACD9
76778250647EBE89F320DC73459858826AA245639DE9EE82B97CBB7D410CC8DF
83378DA0E727DA0CB4F2FD410EA44871EE4E96658ACF30501A9432E4031163E1
910D2D4C9BCF733D48CC33D80F8D45BC7D84751D27A2E1886EC020994AD0663B
542298D5D0511A6B3F423A50E2E7BF10D4043530757F1AD411005D77F9C99E95
28C8FA7CEAFF8A4149FA3B0FD4E20154A07934DE683E45A43F118906A0FDA858
0BBAC329C5E4424BD60774F9FD08C540A30C71819659370DBD95BDD723DCFD95
93E44149906F0114F2F99D50F746C3468E4AE46136874E12324A5DC815AAD4F2
3B31D4561FE41E9843902F8C1C2DDCAB35C5C64B9730931326EBAA9013478CC7
BF523FD935EB2B54FF6C901ECFC15E46F4FE94253A8356FCF6AEA4A74FDA1B50
82D5A4239A5DA40F09C5A3B41F73BC904EC8B8CB49A279F949FB9D0D8FD4F2C1
B2049C639AB678A707CB8CED64AA66D0B8CECDE0686AD1BEC240F690A1739237
747F7FC826EA95BD23D104A7C21F47321EC4EA094EB63F1A0E4601EEAADEB814
9843772239B97CF2DA9327B98D7077B5904264077D48B5FF68EE59BD8EC665F1
95D4ACB2579F4A767102774C4DF660138C1E55345ABC9B44C2AF16CFD6F0CDA2
D47BA3F5B27429847258EAD91F3914C05ABB6E6858F45678AB6D7C7639863504
83D42888BFACE3C48FC5403C6CAFC70B807572209BA3E8CEFC05D54E1064805D
5A47FAFDBBBBB1E10B84549109484F0B95BC11F971BFCACB2AF2C84518A7D160
06209932EA930E7CA81EB0637D47C07088467437CF728DA22160601E071A15DD
DB1EBAB289549324FCF9AD557C3A28CB34FC216830986B083289569DB95DD071
CDAF6F046A3733A8861685286B0592AB5421E4203E8729E08BEF6A0E1E9B0E61
EF59088ED171B3399612C901A82E7A32FB74D5DB06C2CC0CB8414A574F625659
DCF9BEB406171C62EF196E355E5C421B3DD3DC2382212AC5AEFBD25CB32F7EB9
8AF6254AE97BA8C0DA5C68F5F4C98C9CD39ADC6C875C071A371B52CB8800728D
EC78B4A729863E578C29D9D77555D7ADCCFB98B83859B355F51C93618D0EC32C
8A7325DCE6C9434DD7B0E4691F888D7AA3DEF3F383AFD86B89F87D0557655C01
69B8DCE46C146BDD9C1A8A06503B9094E7C29787633F38CAA8BBC493D6A04C0D
9ABA0BC59FFBC4BFEA69B932E52FA97702BCF7F1CD1F78FE7FADE9458ED402EE
E397925C13CB90AADCD5E7BEEB560E838AB15F4D26B7F1B82B92E316036F6439
F424D9B4F9A6E3279CED301549C2C37BEA0066EBAB5DA8B7A669A4A63DBE60AE
CF340C8468A2C66D95AEFF92ED8CCFB6883217B32AF64F1AA15E8D46041D77D2
5473103C8481F597A1BC94CCEDC4795A7F9EAEE43860D1662223B4904701E900
3BC518DAE583CE042E83580B6D58557BD428A379203763BE6198348158F856B6
7CA535D6D2D9671D98DB0BDA90BCF33CDFFA60EC9917626183FD6AC32FE86E15
80D216E1DF9D6A7BCEE537DC73D6375C017BF827D4FF722B8DEF70B0590B4445
A6035B695F244557138DE94771F8F9E5290336B90FD704DB536C544EC859F6F0
F1BDCE156D5D0B42FF4D18BB05085EF160CAE11DBDD86E016A2FD66E08FC9431
E8875A986D33803829C1F30C180D7A7703DB7A3BCC8787F911B0D0AA4CA85728
3336635756CA80BC6C9785EAFED63F6D6B527E5E7AE23FC4CC1ECC7E2489E4C4
38A4FAC3B2056E692CFEB012EB6EE2BBC35F188FAC830471BB14C5F93E98A88A
4274F163C982328FB743A0FEE49048B92B41E3FC0940DCB637229BE2E4544A4F
DCD5A4048E6F058C526B19C3B9540875A943500356501A77E8AAFFB6F54674AB
6E8701FA68569F5D954272A531C922A85CECC2D6EBF86E98979D33EEB903EC68
ABFE8DED969E9675661D05DB80FEAE7ECFBB376BF51FCADA6ADF96BF30F4845A
30071F0CC2A007F969D76EA0660DB9EF8887EAFB1E4B788B54705BD6336EA37F
B4FD595E014968D8AC113E79AEA3A31455ADDA93C2A545C03ED97EA41388C3A2
DB27D3CEC105162A1EA6DBDC963F1B4162F516465FA3A7BB5EF08590C9038622
D306F2CA0491180208356063F4F0A44AA30AF6DB48B2AE91380FDE6CD37C1624
D5BBBE0EF671A951C09830213054F95F37B50075D87A7F0C47BD18816ECB1E77
7891D3714F2D16900AC1A9F2B0405EB4F89931F52A15B6DBCC55B56888A21FE4
974F34C0E57B0C8B26ABF46CA3C0360D0BFE16020F92ED46465A6E22A3D1D383
0BE9403DCC37BA669EECDFB43514D8529EE142AB4E2E42FD89DC1877EC3D20E0
B8B97238E117B11518DBEAE21350EA8D0CC609305EF416980CA1624B3CC3C5BE
A35BAF90418474B2BA1D0AA302519F0277552479CD3770F043834A098E47EA8C
29AC3C06850F42D423828B2E764D59138F39C3EC29CCCAFD78890134D552E35F
13B4E87E5C8C9BAF462B8C6989CAF05921C78148AC4BB6D3AC42ED88FA497255
C7A6CE3DAC227A54397C711A8C5325CA62F6EC9D4C4B76AD8E24E4510A701497
43A5A83E868A125BBAD0698500C94F4936608C7055ACB8CCBC32D38E5E1D88B4
8BC4020C1A76FD2325243FBB89DA82BAA70B64E2E56F1B045A07938354A70F05
7E535BCB5148D3A2A26E23E4ACD9655DF7B95B963D50560FEDD6490C70A3AA27
358A5BA7B62885B6B607CF805AE0A4FFFD437D81B00DECCAE69D08DDC76B4229
A1407F95D579FC47A70B17D24F55C294A1CF7CEA505BFF7F4F493C8FE816D64E
7711902C363D6F7C6C8D4AC6198F4549CBD8C8474CE00E23A96228DDA73865BA
9C3964AFD46A5B8A711FBEE4A00A7A05417BC221307BE092E3388D8B36130806
28751251F1AE64086094833ED2E42BAB5D7DAD65E2B4A6714811579D4284F399
86B30C3DF3D19EA72BB03FAD4E62DB6AA50C9C81A540315A8D43705CD71F2339
C2E8FF0EAE46CB3E5B6572CD886853A4A64C00C35102C2A73C96CB519540E822
4617C2D1C05783F95F3221719BFBBFBBD3AE247A9D8A8199229DA382EA818984
455214A47E556A4208368F4272B6BE012F36B246B814BB0FB6FB066598AD748C
014725B3D129A9899BF62441F7D8514E2D966DA6B5D5E37A92745752BD886871
C74B42BF0962F537757F4F34AC3036314AE1B275EC3B34696BF1D6A8699D2A62
7797C2FD7A9BB8140692304AE0B970BAC628124F82C9C06D3654B39157EEDAD3
1139A7AA988D1FE4C90C8858A5C9A5554F08992D4D51235EAAD5D4A5D7D20FA5
BB2AFB1D136D92D9FCAEE80B36DC68FECDF28B32A32E2E94224CB6D71F1294B3
731BC9E13684DAE767662FA97F2D709FC0F90FBC96F2C42CA629813392EFA358
BDA0FE8E71B6347421A18172C1DECC3ECAD10E3E3E270CCB99FB69CA1EB60ED0
D20A5B9B05F375DF013351340549EE59561F1D0E5408D1A319D670DBDC673961
A55B0DC6C51FBB3E388AD1F73A0C65BEDABD3E3823D14F01AD828593ADD224B6
5B8BB8A92F94D94516F4F5834ABC645B9B82526B65C4585338EBC272F5510405
6B8F3B0FE5D527849DA313BEDBCC5C49E8ACC7EBB41EC82FE8F6523561053327
5A2EE48A09B54A1F52B9B26104534BCA0155E045AB7C4DAF564FD2D05D0D6960
0924C8D906E856C4592827E9C79ACA063BB40121B8ACADEF87E98EEAC90B23DD
081FF70782D8C6DD73E262CFB8956CD35A2921D97F5C38F94CB0801C05B003B8
B64EAECDB4C09C187AF80C792F0EF9C2D7C64D2EF33400F90F5110C822AA441E
A813983CFE3438D7DD0AB28EF3B8D4C95D49302E92A356684189B4A415283004
4C740845722E468ED6E601860FEE3803614EDC7CDFC4B404510A4AC2C5DD89A8
1275B5D7B2E5A586FBB0C061E708F92C1552F64A29685D683D60498363CA3476
6751A9B4A5A2969E117FEF584DEF3A836900BA9B4A3D43F21FFB573B371B3D1A
074B352754015F7D7192024F404574177FC7233530462FC394D63E924FE1E460
FF0C9094EEC2807A69A8F106FB6DD07DFEF15FFEA2C4985D37CB02E1C6B4E1B6
FBB5230D1FE4078416F8C4E174138050946D10274FA40253B179261543D6A6B8
49F364AFD015FF45843FE2A572D4B739754D965AD7A4A8872E3907EC73E5B4F9
B711D34E19719D350A48EB1A9F5C7642D1913555EA10571CC0E786DC790316B1
A0ACBE0E656ED13016063B99D7C4934FB860B5A9C51AF0BE71B8D8C3F100A82B
7A78B66DD736CE29175A0E7D978742CEE7D5CE5A4187225BAE1E86094C473A08
C951B7E1200EC7448FC498B3E43DF47002DBBBAA58B5A0E0CCF57A0ABBE8E601
EEF914BFED606D175A71C555012DD01A11A830889CA2920490E4701D859DA8AD
1A60C6EE896EC885B43B4B931886A0480A1989A92B761D15DF341CB928DE0EC1
41A388611EA35B41DF3F0513E81D6F0A4D52CEC6E10C03A001FBAD5645E6FD77
7018CCE610BE6C0A726B788DBAA7F72D03E24F2F4B4853314FF464F3417D147D
88DC59F921FECB47B71484DDEAB4BD4A54D7CAD6D2256AEEDD00F8D521CFFCC7
BB1077052D4ADC8EEB5D508A204E76C547A30E53DEBFBC50DF0D0401D3960397
B4DF09A3D376B19D51F8D712F212B7046053FE96A047A0174CD6F2B6523F4F5B
DD56226E8AE299B8A026696EBDA5FCF4E6466441BBB7197F19E5663D5DA5A35B
CDA3D9E9948F80DFB2DF3B3CDFC1B7604CC627D9F1A3AB6283D06B9826865AF9
EA90E14338C9692F9A96C6EB71B55481DAF1FC3A7279ABEA065720932B3015D3
77230C7F7BC3F0CE357755C40BB0C6E36E7982120E6285AEEF1811F4D1899E0B
C5446241C544567230D936E01A31C27A71232B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 65 /A put
dup 68 /D put
dup 70 /F put
dup 80 /P put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693A774D95B3CCD3EBCE6E4D0B66D4A77C0D54F9300B1A5B26124F8B0D1F26E
0D181D08FDE3D629286E320BE4C2F2B0568943DE1A68599EAFE8F764D4A1BDFC
B3233B9397EBFE8DC4F4C411F79B1D23289EA3FAA825650D8A62496EAB5EDBBC
A637CCD068A86773A3FB74D01A7D06D59729E5AC2E58C07E573EF02AAB806B6E
A3E14F7D7C52096CC941F47D98620403DAFC454A30381E07F915846DBCB2C690
16198828BB42507B524B622F10AC8781B19CE8AA275D02388930141B4BBE3E2E
D75093D9DF32BD82288116FBB7EFC6E67AB3B2412051E7B3061BB6599DDE3A81
9C1154D1959FE6E01E639A11009281F078231838B6A6405E742F8864AAED4DA1
4AAA966ED2C03C95DED79E46D6E14D8E8B0ABF40C84FB2CB114ED1FA9C818E45
B5ED8CCC6E5537100F6C7B1E17F6F20229B5AEFA8040522535BE0A136231B2E9
008935BCCCBC56980802494DED0AD964994E4A3C202A378409219117843B3C01
FB49AB474CE977EA54C9F45CC32DE18A3D2F6BA9DEE94DFC9648E3D7A879139F
D9A514192E2A82D4F6FB8C39C0078D5ABEC1088F2FF8FBE41864ECAF0D240580
6F6BAE2273E4CD55F69D96796CF35B02E38BFB8A1C8CDF26AA4999DF3C9BAACC
BD85FAC22DB8C6A1D5179962D85CAA151A5F550CC7681E87BCF11C99D34FA272
3CF5A971E6BDB1B89C374582C4ABDBDA6B62E39B356D1DD109ED2ADF33EF15F5
AFFCF2725366E85E95BF5D3F5BCE2F8B44A7258EBC0BB68BFF1E9AE145730EEB
618BCA60248164299A136DCA8CD5B75C3CBFFE8289FFB02D8E94207DD447BC79
84A30E5116D738DA34F32F2CB972891D907CF932CC485C8D8BD92E91DC8335E1
8996C0950F6F253524044DC878C18AAE1A8E1EF1C34553D7F8C32282D8BB75B4
94EFC1D863F7BA407AFD290B11E47E61F279C01D608625E04EC2CCF58A0B09CE
5EF8A2D5113752413BC5C9E73DA0A50B028541F7BB6D2C52CC33019AAA883668
F304351DF6598B0DF29142028C739332D363BC103D6CBE1EA48C1923121B60E1
068F7047A9B258508EBEF036FD543ECF166A4075ADFC8FC30331037BC69D1D52
1CB2C7121FEBFA3C67763EA1DC17497ADE85EB73A5FB42A5C4FD97F6C523DC0D
C9775D1571C25FA3A3FDCB8E7B8F58CA5117AA2CEB6FA84DCD56E9A095173A40
D186C3DBC3442BECB4E6ABE7C2F753DEE2BB997196CD7EE8C17524ADDC01B831
3A7B829A618EA57C611EB5841CF46AF9DBB61B9978B7A62D8DBC059DA63004CF
C3C4006A8A6B2931FA55206C9AB56B9C1A385A4CAD8E8E154AF0E010C754F82E
BBF7CA09D483F8A65DA9C423F398C80E6B2DA2A4BEA3C83D10F72103C6FD606E
70EE0F9D013050B59B15EC4EE51A8F912E844125E60B7627C6B29C4A8F243903
A3998DA92631B719EFAF0107F4F9F57D8EDE9FA8929F8E68DBAB6A2B3424473B
077F5D6E10AFF63AB1916BE9383955369175DF17FED805FE439811992E204F06
3D3E10B2BB055A5C453BC9ADDE8DCFE3A7A7562C52E9C71797AD1D7F73B897EC
930282948E82058B024F10BAE8F996B65D95F9F30AC454D8FABAE8CFF5BAA9D1
02062B3BAF580C1A883FF7885C9A61C25FFCE0A49C8FA36F5F405048D77E038B
30C4AA67FC460BE2F5E2FDD80156BB0895C4709AE4DF8A18F6220CF96630CBFA
F0BBB88AE72955B620139B44B569E500046895AAC7BDFFAAAA12FEC5D9544DD0
F1AA7D4292761C796B7EAEEA53446CD2D2936A84E95C9FB6218CF69374B1D0BB
A1ECD61E4331D430D05AC324BCC3CFDD4F7F548D3D0638F87D4FD2200DED640C
4A7B30CB013CFF5332EE065D0247076FD59DBA3B0EB33DED510D025798905BD3
5292A3EBF5B249E9E78F8CA6E41373A9B727BE1560EB81C93A77466C06489DB2
489A1E7987552645E4665CC4FE8E61EEA311EF198FEDC95ED2A16D65C25E160E
EFAC2DE8E1F55BBDD12C141E3D9E14B76B6B6985777F06A9A547ADC392A56014
15238C48CC45566BF8AEE863BBF5C23B790873F4C871556E8B4552E1E6E5DDB8
34339CE1F33A6B025311CCEA2452887CE240D31CA6201B9A4CF36D400C36A1FC
96C434E51E8E18FF35F86A55D44647A9CD1C4F12145E156758FC21C3F3880C51
C64A6F828326D264279CCB7626B6E5D1973A35A5635A65D15208CABBEB91D64F
87DD64B2D547E9E4E9A844B67AE417865FB8A4BC10089F710EDB1D1AB0BFA294
9F9BAA0CE85BE64694673976E0263197C0F01ACDFBE424D8D9D7D0F2759863B3
ADCF28284FABAA558C39C802485E97CA3E5D328AB1030547196DB5F4D72FC2BD
53DB8392E71FEA4D0AB310848490C79E41AA1CE5439537441DF95EA185AF481C
030B11EA96A26393745319881593359BD62301C9C7CB3B84817C56BFF2432A5C
F6AC4481B786A3D5D0C5AC21D1B3D62296D3272342AD6FE911889CFB4AD8FF87
901566C1432CBAFFB6624F2CD3242E371EC5064B52C8F3C13C16C4357C19F20D
746889E5BCA7BD10E741C887EB62AA5BA2BB87689671EDBEF4F92CC92C934CAE
14532311DE14EEA89F83FF31DE7AB4330D7D21DBEB325264DE8E07E9F73ED419
FA9E77DDECE700387BDEDC0AFA1E08FF5177BBD4769F2ADA5A3A4AC655E332EC
D3F8D8B7B6912CC92D9488D6B6F95BE2FEC64AFA7EAA5A51CFDC425BD5E31E27
3E85700FC6946F4FD07E79E68D3C6AD02216C07FAFAF9082A525F58A9A6966C6
CBF42BADE0E0B3DC9969D380EA76C91F40079222EF9D1946E97159A9DA0779F4
ADE5CEA2EC3644240D944E6CBA2F495EE857E517F94B239AA1A834CB1A2FD417
FF3782C73D5226363CB24B80E94B9F75FA7DF10FC3861DAF2DB00F6B41801BDD
3E29FE5354B3909818055DF2C46DAEF5CB5893251A05F81C2E630418666CFC7B
CE7E0C8119916F7DF53D5C926B0D18F95347519AE03A3D486D7E9B8DD2871393
B3341879C81C27A3D24777A77DA2AA7354AA2689B481A03CB0776B93FDD80702
4BBC034EAADC23E03BF225C3D8A1094C665021515BD8B9DF74AA62D786183478
0F07E8FC75770486D9FFED2A58FA365FB3B7FD4457689AE25271A1617C882B3A
10C0D9C5E664F0176FB3DF03281E27EAC262ACC3835F95A3118BABEADA10F64F
DF22F32511064181C216F77979E43A9F3F3B55F5C287CCB757741909E217189C
84774D267AD9BE82C08E52652A79090D35D9AD9986BB2183C6DC5158D214E31A
3C16FCC100BA49B4D0C7F9A202939B01B7C398BC2F50BB54726EE8BB4BC13AD6
B08677C8E076090105134470E46E4CCE4CF6994101FBDCD0E85F58FE33C0CFDF
DEBE49D32DDE447AC34526954BA8ED1E13B0D72D766ED64FB338544BCC5A2C3F
8874C7F89EB4ED5DF753B46DF68F958E28B76A9D2B9B0203FAA08AF2CB211775
42AD28C75437BB395DE780E7F84089E6E0A57A6A74A2468CC3FE07E06069822D
34C2876F90CE897F485D60F6BDF75DC4F3AA5DA17D556CF881BB47111CD6B9DF
10FBEB86D26C9863561BE858697ABA12E6841BEFD9463C5EBAB2BD26CF5C9303
EE64B08B76FF332F4DBD0BE513DD8983E2E1976B8D0694B8BDE27EEA56D95F1E
A1D03B67596336E2908B9F1A511854716BDCF430D506DE4513B4D0B4A6E2E90F
0F1A1042F57FBEDC56F9C720BE2062BDCEE26333F7D990B7270A7FDA226F49C2
4658B386BD3AE99C44DC3B07C49781FDF4CA59AD4F2C02E8B3BC2DAEE87A06D4
AF16E577A5E5D1FED815423763B9C406D5226E484BAC28D92D9A714D86B83F3A
EAA1B5463691A7D9F4BA7884ECCF2BDF44EEB7C8CE8F4D61E911FFE79A0D11E5
33A39DEC091B819316183BBC0BD3D44763E4F322BA6A1E4B600A144502EC6C0E
36C7DA0461FF84544BB448DEB91DE33E3F0902D38A8D3EFF3DBA9E29D50D199F
0C1EEF416C5E4E3931C9337CE4F5B564D7E74F1583138157FE741CD5E8701C62
5395790086EC65EFCF7D4E3C0A99F66260BA5004EA15F9BECF8B524E9B242462
225081CF70AB27644F93F3F99C017FB054E1903A3EBC9E7125666F02811E17B2
B6A99F66DE0BFA1EEF9DA18CD488A02CC1000681EA1A62A9CD3A7075B5E63ABB
CC470CF09672B1BE63F2D72403926FA0E4E13A9609AB34E6EE86F81A53A367BA
24B30EC64CC1DA1A113AE68E4ECD83D5A07CAC7B411827FCA41551D07F7A4783
BC85B7B83D5384A770DD975B4608488E406ADE9D31F3DACB8628E8B3D9E97379
A80FC4C213635EEA60C25EA1A7B0F8A628196DB1194C457DF775C1DFBB0CAC40
45BBCEDDB99BE773C88CFC2FCF646E70C59446BE30B5474625913611DBA16208
0CB2D5F3A0567AC09D7B8F9EEEF3A4BCCECF6C2B4D1D41BC181D33AEBB9BD844
E31A2FA27294270D7F71BE5DF3E3D226B4EF58B59002BE8BE133A2A2B3C97F15
CBEAFE5183316D7F907616D63BFF21AD413E59A3B5135CEE0C3EEF26005D3597
767FC165843F4C34C23BF6657164AE60A9F00F35ABD35D52601862D5702C596F
53C2589511ED781ECFFCA8A34BD16DB0B8CC69B30C2C0988B63138DEC10D5C4A
70CDB9F99EE7A89AE223C38C1DD709109D43FA13A1FCC497F7E84E35074B53B2
DFB330715D60C600C7BE3FCD5E3B4443DF76ED1A246EBF2FAFA88A35012CCE98
263FD3E45C94C68B55607558A1B4D2F8CA8D9E18DA67917545201288D0D6D68B
4B376EE52FC5CD45676A2AE8F354F09297A0A88746EE644957F2525996F02863
02F8FFC54F008AEBEE4B081DAB374B67DBAE781E392AC6A96EA1D581877E7381
5C9B80A286168B6CD6876981B943CB8103899EA851C655A625E65702DDF75453
FFF8B527CE7A4804AD9F0A6008EB2845CA6C5E849489ADCA43FA8A91955B9E25
10CA8F1158C10CEE0E4CBE75D6AE56F526B18A2C269A09CAF7CF6090716667A7
6F90F18E93874CF99E1BBEFCA8C48F2432ECCC3C5DE146547C9B492CF616B5C0
47DD34E8C2550CE2D4619FE4C3AE2C02E0DF69755AF6932714D02B43401CD31F
27F9233E9EE253F26AFBF7A6C26DD46E6A11B1675BD8F5AFC8343FD2C59E3348
8DA95892517A425A4225742947979D47CC57E139B28FF765AE9670A6979E89BB
68BBD3C1BF371642314B6DFE161B0BDFB369C47DAC56D0AC6A7696F98B6ABB17
363CADA7C66EA9145DE28774C9DB35F97C9A23DC28D5522D0B3A38873C7A0068
F5ECE51F8AC32B06CCBBAAC245E762708E56CBA6B76F006C2ADD9F02D98D0AA5
BB029ED62F63FF1FDB11E58CCC25FB434228E5FCB27409F964AC18AFCF09488B
3E5CA0DFA5B537DB59CD0963C7CBFC555458227FC69C40D8ABA27482931F09B3
C872D90B6BC3096264FD27A201DC5C0BEEDAEA61C47265049EF5969689EAD275
FFAE00E03B29795829E1B380E191D292AAB212BBD0FC7AC81CE1E2B9B9868C04
03217E88EECB72A04AB3085716390F106A16534BCB702B6332818570076C89A3
98FA317FDE368AE9A839FB6408C56A47E42ED5C9821FD86D6862F58DA33FBCFF
61003E124A67E5AD0D024E667DF88C0C58746780B7028B7EF18F7611B6EC09E5
174E93D7DD9B66979E0942BB69182B17B917610813904C53EEB2E16FA77D1045
101EAEBFD36F533888B1DFE9D597A310055E7570DB8231625821FB57B445CC3B
9E3C0D259F8E81116E2D1C51284EFB784A493F2A0290E43323DB6CDB29480E8A
3B2916855376977DFD6979B35B01552D26477F4BD2BC048CDC28EBE9C9E7D31A
D0E8892AA249C1EC2FE00036195F1AAD99817450FAF4E96E1EB9C18AC5C7A084
06E6E60BC3270DBEF2842D69A8EEB9CEC3419C62E31020540684B778AFA799FB
67774A23DCDF88B4A51AF00C00D2A9537B6A0895D5843D70EE9D08334A46CC57
5CEC3B0BB86C87F4F5296B2708E93CB76B1112A75D18832C763178EB342338D3
6429F4761C751CA2AD56EF8A70746CC740F8AA0CF8814640CFE2902B1E752E53
9E0FF6A49E7EE3E16D5CE052BDCF52C86D22DC38072F31AE3F5CA78A59676E8D
75CDFC2122C35BE86E06E838F7245B1347289952746D3C4B12F026AAD8812E4F
8AAE83223FB517CA9C79E306C9CA86C976904B7183E2E226699E4C00563DA29F
11B641ED0BDC27737515B233D3F8B7ECA94EF42BFEDB8DD399AEBC7D262EBF06
38B872485270FF05B4A716ACE389DB4076C870EF8915E364F4C6FA182F4214BE
A5B35D79A57B634246F435282E39547245DCB217C2E8AB7A189D617ED616B7C4
17A2E53EE40F592AC44182ED6246C2BA3EE3A1167718756D8BF3EA559963789D
E59FE4C58F3436CB68E03B56399CB8B92EFC1FD3A889B724B23BB93D6F9CFB04
9F007AAA1082324830B07C0B95C8D72181FC1EFB0BDD4A86699277B35F15BCC3
2354DBF8DBF9859979BD70E7E9901600EFF7AEA020E8AF7998CE3B60EEBE82B4
E7DF9BD5F90B6A5F40F3D8EFAE2AD893616B6A70C16AC1E93981A46DA27F594B
A712235F8EF96B768794558E7ABE6A3599C5152D0EEE6D7043CEEAF0618F0461
8F946BAB94D420F957160D0579C3D11FE565A04B9882C2FFEE3281E76D1449CC
8B1028A9A9480E22B55A820A9DACDB7061A5F66C57A219EAEA004902FEE6ECE1
50760CF527309125949CBC1D13C3CFF72346B52A47A503A4145C15EA06A75A8E
4A4057FFE49F205119C0D47EB198549CCC29664767E64B766AC02D4E301C49AB
519D822361D378461847AF40326AA810AE10CFEDAD69A75BA4BEA86FDA057BFE
83AEE1FC85A6CA6C8A50C2F4AA5E9B3CCB76C22CBE960B4BB86B6BA353FAF0A7
885A39D18E73922EA2B094AF43A55B2094F85B72EB1B2EB7FA488E9136C4B42A
A931C0EE925882D3D2AFBB7336D0B28CCF41D674FE94C85350752CB9D6303170
27F34BC8ED7BD5A39021ABCFAD12E73C7D6059DB25053493CF98D9E2971A44C8
F00DC8567D58B90B452C2F59C06A47BECD7029CCAE923CAD3E11F70B33986B6C
B437C9E0646A3966D08D5BD45338F4081E4AFCDC2D93CD608FA4BCFD3F8A2474
DCB3BCEFA4F76A0AD5DFDBA646AE88B0714F6722B2D0B0B9E01B3290A77BB367
7A7380102E7503F867B6BA13D5ED98FC3CC548723DCA5E1DA81F27BB6461F4CA
880A625B76BBE1343667030C0FCD54029EB006F90253FEC2408D307B366F367D
7FA076FEC81D9396D26DB45D6FD083FF842413EDE9A731BF0CCCD1F6BCBF00BB
A63D214F7C9846BCF7C01483537A61A3066B8A1E9E2E97EE886495C3CE72BE9D
BC9C9A6605FF66B4E865747A5F989BF7C3ABF9F0E4C9939CCCB57DF7078E3549
6CE7461558ADF848EE40094DEAA6774BABAA31BD9C39277FB8309F7F7D745DF0
00BF1213307AE490EBE06D20C1ED42288665B4E7AB9FEB3C03CC24DFC48A70C6
E3450ED927D5D9BB1AF596A554635B207820F3E4F9DF7ABC35B8B409B553CC18
62474D7919E403E1E172F26586F24DB76B24582DDE5BD9AF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 14 /openbullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E6861DBBF4AE99A7469F871A3940835
FFBE7F316FA9BB834EAB18625F0960352C75105A92F175850289B1AE177E0343
181E1D092202C86EAB1DF73EEC1E5FCEB16220DB9F316722ABB9E151B95BC7D6
8B8344D8E8CD18EC54E21A2F59754B862BC96E23BCF566986549B52D74C6BB3A
2E2D42AF12A2D4B10D89788F84093A75F7845C4A4265DE4485BD5ACB9A4DE7AB
6368E33667080CDFB742FAA6358F2E2A0F5A71BD38E31D187398AB7D417EE679
30C55212A05C17BE692C9E50D50F11B2D622291E0EDD057B7AA9580ACF6DC298
73B67271617DC515F47AC9EB5EBFE4402CF8FC421BE1E993121FE8CD73FE1FD7
54F350C6D9CE2021CCEA60EFC1968265045A5786F809C59CB1CEA12286BA55A1
6A7244
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/UniqueID 5087402 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 49 /one put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 69 /E put
dup 70 /F put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 84 /T put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC728B15800222E54C40FDA8B73C48CE82B
B2B3E7EF15157FB4510BCDD7EEBBE3FDDF708EA08540D94827AF3EA1B210446C
DEA9EE0EE9B4758863AA33FC296740F0DD9B42A45861516AAE6208F189D8CB8E
BBBDDBCC34B65A7D17B8BE932148C39084A9C71516582BCE25EBF7C1E0D84314
45B273AF903055D53313DBD159BB698038A397AEF418B4446739318E8D2730BB
6E4DD3C751E3FD6AD669D442E0EA21F69716B07C14F14443E159AFACEB00E623
17CF0B4499C079D5A6DCF4EA3363AB7D8607B409619E073E4F6D929DDA079A08
35039DDDE67828ADAFC3EA7A6B60A089510A8603FECB672875949BD3B1F79DBE
83B6B783EE0C8E5A208E229303FB68E7F48B0EB9653154D76F75EAF78BD04485
B87E21EB7D6A908608429632F00FAACF70BB554127AB1E09E052E9B25ED43BCC
2CD9D34DB25B1C87ABBB9CF7A32AE044C4904C375AAC2A5D03001E76093D5B58
813E53673DAB81F70A384D19EE70E9FCEDD3DBD7DA04872D650016D8F1365F7F
41CD6C5D58C94ED359241B9F91FB0604DD2952D32841ECC5048A2CEBF0025A99
F773BFACC0A4B683A4CA131B6EB15B4095F00AC42B3CC9ECAD676580F482D705
11930610AAAFBAFB2D497FE6A0F21CE88B35126DE1514F2B5E002852448456C1
E6FCF42F30289D82288F5DE2B395762DF4A1746770AACED8B8F1A61CD6580068
BD57A52EDA9FBACAC6255A691E67FBADB6444A70B4F6ED25209B72E39AFC7E85
E59755AF3DA4A64A1FFC58C75846F2AD9628C7428C4A921B1DCBE64808E61DD3
239F0F41E86F2D4EEB998520A57985CEEF4463EED9342594A74DA6519EE828AE
FE011DAFA5550F5E8A42634F9D5EF3020452EA3EE135E0A1038FE8ACDACA5B4B
10AB54777AD80394AF93CB2926B18D02BAB2836ADA4019D488DE5A1ED3478F8B
1E1B2861870AF7D08E4AE2CB1BD8EF2BAB6C72CE66E47A5D9717BC7D974D6490
7B200C7F91933A3A0B6F87E14C9F111E74ED5225D95B2EE12A3245E25D425EC0
618490528C5994D0718D24CC41444B99B216CA2883F16E8CF3E43018E89C2510
B4019869AA90BD057D58FFBA92A27AB9DE19D33EFE73CE2C661D619087DD1D7F
3DB9D3A9023F4CF9FF1E6D395989C35CB2D3E7192292EDCBD09E0FA952973282
4413A72119D248497241C94115156A99395CC93BAF71C2CF3D0B641218A69943
D9FFB44D0B778505A44854793C45320CBEFA42EF876524DCBBA3C5C1A579B151
E3771CB880B62C56A5AD19B224166F9A1AF82C9F1BD8832E0E2EE836DBA53E8F
0627A776FAD152B9B2BFB813813EF27C7B51A9DB721193CA230F3EE2BD888170
1BCAB0727785B2B87802A8FFE14C2D2937613A17EB65820B9B0F155E56DB3DBA
60A6D81A97EB11EAB999805BEA519C3CAAD82BCAC6C798B2C60FE6562DCB57ED
30D823AF50CDA38F36F975B969F844BA832B74761DC92C62ACA9EEB01BAD4513
CB1FBFC8D86BDA31D44A390FE7B1B7654B697C81F82A37B7BE0D06233415BAE2
81FD4FCB8BFB189FBC2B62ABD21BB37D8B0D4869727383D3ABD16CBDE2D05386
A77889F32C7D3B5AF9C36BA495D5C7E4E5CED4C1B6E46B45C731ACF0C011E3CE
4E28BE5F79704966E2FFFD1248FDE0B428EB054D821778AC07F5F4E1A5112A48
84CF8756A235273F01D10B7A1245C6127D8E2C4FEB5C8E7477BA2E575B4C220D
CE2C1644ACE3430B6B52ABC1DB503186A0B7D9EC3CC63BD3A8C6CDE5E70FF6C8
05CB6775AFBD562ADB19F6DC601185A28F23A0D7F547A3EDC29F85FA8593BB06
89512DFF27814C7DA77B64E1B49F5B99F88E6A2AB9528ECF167BB9BA2D198F63
95A7CC397F27CE9D60E795AE7B265D962C4813C28BD54E36E65C2418866FED79
044D1785BCE60A4C93290031C820DC0D3CEF2544105213441FD83E180EE25D98
0AED20F15C2DD9A7EB2D00342FE0876C068732D0BF760D911455C64E0BC25943
B131A8AA792CE9C38924616682773DB53530C5B679C9CAF970A6FF38B3D23E16
F2549DF9EDD3F3A72B73188F7BA3949CBF3EF41672E172E7D2D2798D67E7C1F2
EF0000B95D1CC5D5191EE2CD483DB1E8803EFE3A4E4646650C18A67AD01B2120
52C03121FD50092D96CB97F36122AC14404727C35F0BF9187FF5578B59FAEDBB
29131A29FFD18BF0420343CD71125218DEEF7095F1E9B0B03FA62791666F6757
0134FEA898D4489165A24A001BD54E5612DDBDB4A2C06022042D1147D4B78C8B
694B4484E4E73366BFE64EC1DD1405AA018E80CAF20B0C29FA63E80CDB366250
637DFF77F90323A0E58782CB9A1B44D783060E84BE983307CD57162E08C26857
492395C7AB02AD2ADA8F42A20BDE55DAB2B7C00F50A1D9E2A844124B95609B2F
C40E88F5D66B183B1513D6008DA4C351BD37C0115F7D28865339F31E990301BD
987DE751EA02D303D604C1742F5CE6C193D7DF537851A617F578729F54353FFE
03EAAD7C5C21E54E9618B3A67980D8BFC58E014D9247A25ED240AE3E1760CC92
967BD4E78FCE62A800D4C12B81ABEF805521F8B22ED2DA2D41C4DAC09875FA4B
8B02A6CFEA20BE316016221A67FAD0633C195C8445F86FB16C159367C055ED2B
7FFBC00A9912B63D61C17B9CFA8CCC439964947FF2898D02B1C233F416A0EE07
34BC84DB17F3DB2E0291D07E1E92833EEA6764B4B636DC6CD5063B20BE653C95
4DED49313C49D27BF1C8B5DF606C469696A47F9B9F9DC8D0D919F0C766C33E8C
11DB806C73E1DE5BED3C12AE67B955C880BDD54D47A468B5A85593C2D43B90AF
4ED0BF0C2260CA2347D580DF588DF93B6925D9EB27ABB56EB2D33940034A64CF
D28DE3BFE90F1E905C22DEF929CE607286B30D0458FFE8423D3F0379C6D0C859
9BBE5C4CA4E2BCA74C609C8E79BDC6C08D5150552BE4C412C4549C4ABC35C356
5BBB82E34E77A6223D48FA6BB846E20E2CC55D9CB41D6DA89151CC5D55568DB1
BBD408F17CB993C70CC0ADF54995799716B0F999FA84860BE804393F792444C7
2E8A15AF933C1ECF14EFB6636368D2D613638DC60AF8EC643170F5F73731420F
B74B299E008913B143ACB05F26C117C537F08D6A2590E785070EC33A804AF586
CB5165537AED62A0D327493BCA1213C0F8F85670EA705C5EA883DE3BF7D24856
C05AC61A94B661CAFCC6D5FE8F11F23885E03487FAA785E5F03454F24E9C856F
4B55A329E0A6D014C750EF927CFB8A0283897AAEF7BAEBA7A995A4977D14DF95
EE8CE422652F768E9F8EBF41DFB2C0B75E4A0E9230928EB656A3475777A18A88
F72C6F176FA5BA7BC930363674A76626A37CDA721D561FF271988D432B4D29C0
F8322B616406A13A5D9905639F4B7460645B1D5D4CC9821D962901CB6C0FBEBB
7B227B38BEC36AB8A7384C40125E9F3EFC0512B804060DD23CADCE433E15621A
DB2319304A802BFAC0BD92004DBD7CFE94F12E18D64B21A91586B52275052894
C352C38B39FC255B22353A25D68F2A5B52F020BC1EFF0FDA686AA6BB3A8AF33B
50344E874C0986973053CE711D512787F95D62AF425AE0177344A0C86AC11C4B
0663C47EEE56DF5E3E04DBC69D96BBC7DFA657A5A37D5DBCEA4427F7D08E6AA2
589766AE278205C7A797FB85179EA184D5C76F21F714F716484177CFB83E5E20
1BB55C764DA591895418CFDE827B79FB7793A03984595500610CAE1AD7201A1D
5150856120C8031A9C5FA82A4A784D9FFB234D0447C049674EC2A138F1CC0F4C
768847D81C7AE0AD7D74545CD9745C7CAA2FA7AED81E5B58FD1136FD51507C96
1017F3AEB87B3DF0FDA32DC3089F2C51AFB51A0E597C2ACF9261B0F7B4D8D887
75F0D871F74D4D72DEFD23CF1EBC8E3FB0569A39149D0C793CBEA6E5C0616220
4BFC8D2DBF87876B939B91A02ACFE5BF46B554C4F822E73F84BB4F0B35737E30
B437F57BD647494E832CA414A079737AD002C31AB62D15252B0307A74AA0F69C
452B2E6E6A8BC41D8405FDF8BEBA64AC8BE85BF2D52D82B7847990B0987597C1
EC02D61306638B540EC8D8EFA75E2DC8CD35BE6590B4FDAD47BF25392DD3720C
58776AD4F0CA372B6A9AAD62A3BD5A85C5F03F52DBF7A10C20D787527430A72A
E80C536356E5932508E68C5C4429D4A99D17BC9D5D60D4AC4B2F0C7E3795BD3A
75A2F670122EFEC048C2C1203C8043CB16FFAA93AF343B38D1E25C2DF33BCF18
8ECACA7AD947FE59C07FAE428BE3006F82A9B016B4D963C65BAFC5DF1A23D95C
55CA45ED9FF4938C3978E3D3E8A5F9644D926357A9F387411DE32EAF4A264F43
E9B12CFF2A4CDF1FB492CEDB8310AC2D053959A4AFB269BC95B61EFD84195213
5459C0F30A0741BC5A0142F1E02547453AE9324B23A6CAF7868CE5717F8D1251
95A734D5A0C68240D0129272BC14C95BF734869795FAF776B97029B189CF7832
8C215BDC21658A12ECC9C7EDC06394F0B0DFF1107CFDF4332BAD068BFF371E68
5F9E22A0E208208E55B49D528E5A2D900958BA47FCF8EB690CF2EA661828ADB0
C3F15BFEEB2D2AD1C6AFCA3C5F7871C5175FCCFF8E4E8525C124AB522728A459
B10E3AC7F9FAFCCA647A1599B1C4DC037005D769EF1DE97601D3491A82AB9563
7FE219FADDA79707936A3B819A203A684ACCC1A1A89DB4EE1C2ADE361FBD7A1A
A4662EC52A305FE2B63301AB59373BE73CCDBC4BF8E93E534904DD7215463BA0
90A46A54A231DF2A82A064E339999E0B42CFBBF5EC01A9EB508CF3586AB581AB
805C523EC8C785172FFD6B27391DECE246848FF5A845371FEE045500DFA9CE82
4D29F844220FDD28FE535B188895979CF0D4C9755EEC6421450170556B369756
4741EACAE33F60FE037C0999015093757F652EFC7F1DF2106CD3C95EB2ED06BD
962F586C566B80A146849D753DB10A6BC1096ABCD0A89651848D1F099DCDA8F3
3AD0685D626EF78570C5EB6B19D39C7174AA8DE3B033E16B574EF29A8C650410
477FD3931330FCF7B2F0EBFB5BF160AF8E40EA6D2CB639F98C03DE4F12FFE74A
1A53CAB7A39578D8BF8F6D835822AEF5C30735F787B055A9EE4D3E4B426A512B
6A9553506A2456F0B264CD6D9529F685BE20C0D94EFCF877FCC268314256D45D
36D8F7F3903C82D020ACEC02B37971030A2C1BEFD7024B2E538E75408C9FDE6B
31BC678FDC8C389F69566012E529CD37141069B5C8309291355D95F49167FEB6
D3ECCC3F64076D437244493DCDF6AE300E1C3329081883681CB411EDAFB0EFFA
515B059B6B215859DB5E5DF04BDA54D28C5E4EAE30DE99506106042EB4D60924
EB84E7014316B945E25F1663830DC704A0DAC4707D461915AD53BB4FE9559A1C
6988322A4D436BE9BBFD8019565F240C2DEB8A3F98F952E1EAA4AB9BCC46B76A
F76E554C1689440D23AD9ECF35BBBC30306DF047AB010FB5515111196F80A7C3
7D863359CDC856F4611BAB3D6390DD539D9012E9FE67CEFFD38CB58109FAF8F1
DA487C75EF0926F3D4D0728367E6A783D56473B2A6408184D189B32AD664489F
DB6525CD75816087CB8C42B4ED7B0CDF85A04B272462D4767A91CBB854BFF71E
5EC5E0DBC9586E8BB4221C61132B58DC4DC2F722EB3986CC1F646F71F35317DA
45F79B7E273C08ED3847D62458727BC98E2454A3C64D6656746AC649A3C5859E
2E36F3FD6B71B6CB93C5536780C0CA544D3DC28CA1FA4E2A223DAFE0C8FD4D04
B61AB78B90B8C8A05C38ECB88E9D7E15F607C91E3C584BABD1C5D5D29A913BDC
7444D811860082A90E86CCA84AB94769384B3A547E31595E514B6193DE16F54B
EBDB0E1507BFE84751FCA8F5E34CD981A3E4E2D92437E69D1E0F636261E79BDA
9BEB29AA5BB95D201F19FFE91423E1620F85D919529E13D0B931DD6FA82A6850
7180CCF01A633482924DB666347F961B0913F624E2E3AD06044CE6A425F13291
B7B8D2DB51486AD53EA384D28E071061C5269DF5E3ECE08D4F3A7EC65FD504E1
69F6264C2E625C2AC4FF7CDBD86B82B2DDA809AFDE13B779899E5378684F3528
F688B8D942805AD7C81440016164864C32BCA2272B9DF69AEAACD7A02849D5B7
CC43448A114774E3DEE791907EA8E0D2F8A7D4395D710A3EE2104931DFDC5DCB
C915F914AD9789D902D5B86AF3073D651B5A235B3DEF727DE51A93A960D9C2C5
0F47111927B5F4AE96FBBD6EBAB8B20BE116C771FFE3481A8889F034EF63E19E
CD304C9D72C024EDA02735843FB0D064E79B232D501DA2D8961D88D8312104DE
11DFF027B780311EF7FFFCC404416319D5BD2AC18E8A85D1966DB56AE412D53B
6F1C883CD2C15E43BF7E70755E46B7635484B2C4293D37229C0F545B735B336B
5DE3201955784BA44FA1275285DAF560741ACD8387933D40EA0D4917E4673F80
CD99C74972D51B1F753A0D1A228C983FBA66A67A7A8F4DA127839A9ACB77A236
5F2D75495BCEF9D3D0EA6B171524862AEC486E18110616A35B143FD962AF5E76
14EFA4290B522195875E90A8F6A547C57CAD88DE9D075AB1DF3BFAEF3436C8B6
7928327405D0160575F5180A7240BCC29C59A4D8F63909829677318BD31DD801
44E9B999BEBE3A44CE835CAA38067018CD93058450F8B7BB97ACF2A94925CE24
F38C9FE78AE1CF4775E9C2E82386DACE6F5C28A5934450F6C07FC7498DF7D0B6
C3BFC367F3394D7FBEB754AC9D8F330B418D968CDD0ED570FB43E28817318921
CA86D9787352B8A7B373C9AC8A6B06BCC69ADC8081E044FEAA30C7D6A44C4BB8
4B3EB7D5C81B05AC26DB83433972C8066F9E5E6227DF31D5939F6667A68F2266
200FBF650E4475AEB08BC1EC1D95B4F0F6854153B0C6D52239E0F945E894784E
6280CDF5B896FAB4E432D0385A258E2B71AC07E3D8AA7741869EB1B6EC876A8B
FF9EECDFD927DD1E1F56A5C3CF9AA2AB6C47548ADC02B187ADECA90BEF0F2AF5
65D07174F219002C4B1419F231DA32B8446BC62DC2E28CFD43710BF3F15E32B2
5BBABF0C9C2CEA61625B89A02FBA542DCA5202933078A998814BBFE4BB99C2D7
C04A014BB57425CB249D1AE1A28A1835421BF2235A7FA3C1AE755C6F13F023E1
90FDB56DFAF73C78C91F9C87EBA1C80496415A65B511E91754B78138F7722658
994560806694E47360245FB47C879FB3A23F87DC6A5872761B76A4668E4CC83F
EDA2063D713B549FFF854CBCF394C781FFEAACDCD6DAFFF420A977459124521C
8DBCD1312EACF0637C57CF1E7BF700C9C629407C43062A0DA31731C6B02E8EFA
F9170540038F44F8191EAB65A3E00E3FCA53E197AC018452C8BBD7D9E74F1A63
E8B7F9748DC8A66A1832D0E3D59DFCCBE3208CA8792F26B03580FBFBE75603A0
A117C1F2C5EA7BB587ADD7B0B511B17C8C16D6ECF26A0B8DE7D9A48741B1BF90
CD1535CCA633E43A353674E4AA64ECC8C377A1FB36ADA554E82B994B9596A92A
1C7DF004AFD887430790B6A4C2963AB832397B7E8B8F926D1744D5BD0064C312
A8A103FBFD5A15F005035D4A215F0D10FF8FEFFC4D76D8C5EFDD2FE2BA7DF67C
F6215EB04062AC9E2B9796B11FEC90653DBF06D686276D710044C2E61C6F69E9
749340C7FA755F4A270A3408D4DF1B57BDAA7E9E73F92A509C7DCE0419783215
D99A14DA93420DDC0A14936DB1DC86F39EE587C36C99B66A595788A50EFBB68B
98D8E061AC8BE9765DF39E140CBA0A8C56EC208905457F23ED8E83EC612B12CE
E47017971F60C2D74E63F0098ECF54D49C9AB65A0A0705CE49E5889224AE8007
41183F7B863F5ACF02DEB9748CCE9CD613B251A7AF514CDC62B83BA25801CE85
AFC0507420578D3683E0081E7E267E933876FA67AD0D799F502C061A96F1313B
2A5860B4EAE1A048E3940702B78C5BF286A90286A34069D402F5FDA418D20D93
D4BD25B4C6142E6DD8A9D49A86E8F6E934E7752F1ECCF1D2CC546D3BC52AC2AA
E03B7351EFFFBCFEC9A82E30AAA7021A9620AED07BE0CAD6BC9A6DD46C9AD672
872505D71826CB8F707EE7E469108894D2E5D5734BD228093998243BB4F409DF
B2F69E32A90A3F5218B16480CA57307EA64B32FACBB591C99A890098C710B1DB
C80619DA43298220C50E0AC87C5B54A13BDC6EE65380377B3F9F7A504731743C
248F9FB9F57E461DFFE16938929D7DFB7100EB6A13CF8B739C53CB6EDB44AE4B
F87D96EAF2821194BA040062486A211B7356149B7DF823305DB5696347C639B0
7BB53594E8B80C02B520A0EA13A6DBA6A20AB6F9461E9504E2F0C4BB58CEDEA6
3540726C8FE421BBB61C4DA441BC042636110993C4CF685B94F742C15356F83C
6B8425726CF6273A9D065886DF2865933FB7FAC67DE18EA57FADB3E41B894B41
E77C5BA3960F5C7C7C9BBF339A35B7249BD5A1DBEBBF327FD8E763927F51A26D
9C73C3AAABA993F0451294F174C76A8E9F7A5A9385C9893EEF493B9E13099288
E070F4451060927C8DFF1A287DA34E15E45750D57A8D685512FF5AAFE4D740CD
BB828063C9604EC988783A56E9A75D4F681A8AB61CE7BEBC9B8905045003B87D
7A3B25CC45596D98F08277308AA9B4CBE50BBBA8D4A93DB0C2C06C952DB69BBD
BF2968F0E5771E1433E1CE57A8FA596D4F7275E7DC6AEA1EDE2A1F77BBAA17F3
320918B21B53F99A8919C2CE12E6E4996CB147B679135582391127CE148896FB
75B9F13AAFD0B801A19701F3AA2169CE6B53E3A5C108F5939D688C3AAD73D732
8C93FCD825BC0CAADB2FBFFADFE7D1AAC616784D91B39A7BBC954C6914074A34
939D15CEB1B70DA6C59E0313407061346A344482A6813C78806EC87DC441CE5C
4929D3790AEF0F4697596EE117E3887516F12C87FDFB824655005E4317093CCF
C5C68ABEA3FB6153736E16E65FD92A19A5F62663D71E3BEF6C4AFB4E1C4C6CCA
346885317D5119FBB85AA7C6CB66F5D388EF55CE622CD925F90B1A392C28059F
1338302B9F2539FFE32CA8B42026BAA90B9D77F72D7EC77B71889B536265BA1E
A17F4B5903E2FB340CCB4640A2E62FFB227A7C13F2BCF5F3CA58E1A157606F0A
39C8A12B148D487CC7FE8F7ACCE890DBF1F48A3CFEAD39C2BCF6712F813A6BA2
25F460BC73B101CFF438A355259F9A2F2C0225BB2CC81CD014D200DC4320A763
BE7B3E501C3735DDC8CDE24F34B8C2D44A22A421A1D18BA8CBA82BD3699957C1
AB3B843F3F5C412BA640038A412A0A9FB040DD37400294A04E230D98D67EC782
530FDB0AA880B32EE70B3844B8A87C0939A2053AF454AD1B2317F45144176E49
9D3B1D97CE7097AE222644BC0EDEE2A32325FBBEA67E695F4702694203256F5D
8EF09DD20C05838C3385F6437487CD699B476E1D0BE42FE8D0D3278C14B2F35C
AEF4D1AE331487ACADB342A964CE7514DC8A2E5CABE647DE1F2657E818C24222
1D56EC9BAB7FD2213D868014A9D4E0FBA907FE6E1313D1766BBFA7AD915A48AE
20BE289E97956C16B540CB672507CA754164F7D48D90073C26C6DEAE0D5331DC
A5E15D72DE180EBFAE75310DCE569A891B4DD179E567E4D467C8AC4C8406CD58
22EA7248E931113EC781CAF778CBB095EAD38383B0DC1910A84FCFFB7FAD3D3E
F2EF2CCA38058601150B1C912BBCD0B21CA5E59A8804ED980718DE152D20E7F7
0E770E6EA33C519513D032A42ABAE18712D8B9CC9BF5E3C7C0AE6E45278F1A9E
51C088D91C90379AA98D7C5AED98B126C325A4C276278979C304
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/UniqueID 5000795 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 89 /Y put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B5768B77E7B2B812E8C804239B23202AF0EAACB83E7A32BF32493421CE4EDA74
808C7F2D0818FA5CC7B9DE5158BC7A1B7A9C7B95BD29B01BC1DEB37D4EC57C01
38AE5277D067BF0242AD7D07C2EF591D6C3EE87A9D65A57C287DAAF60FDA68A2
1ADE7E7A457B95C7BC603CD8D9A6BD66548E5BB2167E415C21463C22C4459A92
374A9BF3C35E2A4FE2658D8835158A2BE0E39E2553001E83367987705ADB7596
D0E268828757AFC19E45C3C949A68D0C51B9508758F4EB2D3C223431379C61B5
036040B05ED02979AD1E8521F101524364A1F7CAFD8C47BE7AEC111FE399FC22
964665BC26EF6F88FA8F5B9A516ACA5FB0217CEF8518BFCBA0E1F363F0CF981E
526F1D803C9318A1A784629913009ED9AEE896BCB0C32014E9F4EB900062A9EE
8AE41F583A2DE4B46F8EB3B207344F9CA52989AD8A876F133878D5ADD253FE74
A224D2F07EB970C525B6BF8E81FB5B1150F804828A0B8F207A9F331134C0EC0B
AC83F21985B3BEDF0AD31AD80965494EFBEFD1BC7FE7E72CCF958EC1C4658137
8D948109C3C2CF3C81C880B3DEC7A65E037E82CBE52233328E1B7B7676B3A534
D547847872DEFD0E35E50D000B12FD6FDC41AB1355CB98F31C9FF4E6AF3282D2
14F5C4249E303BE9CD14A077B05AC158B60655714A36B5AFC299CAE608580C90
A369061A83A297B0DD025DA24C655B18033AD0F88A1A186CD39AE50270A8CD6C
DD19E0B850CE5AD7912F328D2F902077CE2A5F5207151A0C689980480C4516A6
1D20BC3FE47C284EF16B23614D7344090BE2D18BE9455EF1A94E0BDBF53933FA
43CAAB98B505F66A5E04FEE63643B69BC61F924D47E4702F74717A7449680BC9
9381903237FB58F79B6486DA8C4F252E058289BE305D2B43393B57B2DCB9394C
15EC9BEBA3D1B6DA4B7981961FCC68B954A97759095E9BBAA5A2475EF2DC77A1
FA2177717BD1EAC3B8433D4D386E18AB32916F5D61EE8E6B9AB4780FF31CD692
2D15C1F17E83B89455CD71A38EA804ECEAF6BD39623AFEF08F7734F911A1FCE3
50DEBDE51EB7A30F4229452300FC238799DD899B773F9F4AE17B888B6CE51184
DF598BBAB68D383E2593B4F664CD295EAB8E80F533C6A321231B99E1376DD824
777F5F05C893C0C6831B800AF0E8ED01CB5BDB6855B3023A50723ECB45DB8EFB
2E2DCF54EBF0DFC5CE78A9B0E914B36F79864A5EC47E615AA9F1E76268A839E0
1F83300F5AD98EE5DFCED8DEB7E51B6C7B59A5D1B05A91835D119E7731761DAC
35EA65E60582B255ECE751AEC225910B6639369471997C8EFF9FE896C18F0012
4287B5FFD3C842732C4D98F2E06B5BBA33B1BEE1CF4F6BD8E5904BD9A941DB0D
44D06C5B859AEB77AE459DBDE124B15AABEE7F3B52BBF8941918298748B5063A
10C200DB752E2D8C9D61ABFD6152C6B51FDEDA86148AA53C5B76DD0BC43B9B97
E2DFC7C25DFFD40CD825DC942224F8089B3390E765F5D9213E06CE689832A9A5
071E6701AC60DD55CCBD3481106F441A4CAD6AF706FE54B4EEF3DB818641BD96
8DC97D9E2EEA8637AFECE93D5735213217B017FB2A39A6632AB2BB61D7877E33
67663DBCF22C567B73FD43CA7026BC704FEDEC788A046C3D26866EC762F61690
1C0C97698C06A0C995B7D1A07FF0F78A8C2BDDE1929166F6886DDD3B1854DA83
FA2A675554AD4D9849CB0247AF93E8C5FA3F6A92E56A7375396AFC4DBCF7EE41
53B9B2587DE0415847009CBEC4F643CBBF24B0416A16CB10C6266771D34B3BC9
A2882D4F218C5A0FB7DE9C66E5054E9315B34B8034BF95AA38D7568550A5B0F2
C7F3D7E4BD97877ECCB9E8E5D3CDC729DF798BD3C4D8ABA0A5706185E896982C
8933D9975361DD5D2FD6889F3E3D04FB432741C300BE32321329A7A99FA53CA5
EBE91C662B9CB69073C4B3BCD2C2B70C6704AEA116173DF48241071453ED4F5B
040BF8FF666F7C952A541064508992B412B5C1CF036F8EF3277FB9E4804C3A1E
EC5C6D644EF033B049B862B72FFA7E7B56BFBAAFD20EC25342BFD07483F95CF7
8999737631A4FBB4B2F9ED0E80B3323E2DD2566059EC0597A4A8101099601D0E
99FC038122B87743F615F0F093388ED8485A2CBAFFBC82F1018B3FF21D9468E9
5B9D878AAC9EAD5B8B3708E04E7441750948100034273F67AC13D3B359D8A485
A0C6F3E98C9567116DF9C0F821466A18B85F437AED78C1B3A0B3FFBEFA98BA4A
21051943BB7C74FBDE67F15CB974F8FCE986FF880C87DBFDC27A96231B2955E2
D0292D6EB36FBCB17BA3A421662B6153F97B3B6052678658F1CA6958720FED51
1375C8BA0E18E4B57444F59AE12801F9D85BAA9E87E0ED1EF4751BA13DF1EDE7
85312656BB5125C18945B7F1D679EFF7C3005A4456D05A333898D0F2700690DB
131C8F8FEF32E441F850947834E1D3301D1278422AB158267DBE698685803FA5
C87400A7363782FA6BD0270D2DA65C8F9C6D53BBDE70BBB5B3435E66D77BA90D
A65770B91AAE6BF711A3C5A04A26C922E59EBA6FCA4D730DA0547656D848D8E6
B929BD7F1EEED63D87836019D55B02EF2F012853C19D9FB1A5275E5D410E35A8
4A4C6E1EEA07EFADD46425CC1C85862695E9E97E20C99D4F0293E1F5AFF967DF
8A1CE65412A23666861CAEC070920B7092D1F5B0CE90283A185A0727995F0658
08A18138BFE27E8B01CF8C308768001C24B459BCB6215256CFF25F22E7F479BA
CACD82075F89FE3CC7A75A62004E50091478BB647339E69C2B8C817F37741235
3665202B8D82AFFD8A8FB5C0FAD71B49C3F9FF8830E7FBF104FB641BB0B7A591
F9D5BF1E2509BCCBB6A33A485091C24534687CE1F8D695C590A06F8293FB0975
3A551D04A419FB66FF74564AE2AAEF7FCF864F18C0CAA725394A35CAE9014FC7
208BA9CD53F2F6F977151C52292F7BED01EB572577559D2CE436E90808E97BB7
06CBB18A4174496431C4D28E7110E749721931AD20DCA91275F4281EFB3B59B3
84B2E592B08B8E8C4529429DAB90A37E9CE795917FA10D3E704B53DF0ABC1A21
1ABFF310CD6F8AE5220F3A1B6ED5483BBE1D21A1A85E0F108FF8692B05D45296
42F797E28606FE8927782BAFF65466C32B9B7E1BC860DDA34FD6FFD2966DB2BF
FBC66F9EB8E7C3C33ED476E9BF0FA10E0082D9D4059F68A864A26EE5B56C79FF
44D1983EC6E8BC8478AE23917F42222126B2F695F1A75D26D56ACC518A7777F7
46EDC49FB456E47C25A83F79636188A37C06DD458FE5B6AD823ECDD28197E857
63ED58F5D97B7B1A9C378704D28707EAF7541934ABB008DAF26313068EA681C3
2BB6ECECB359C94DB8FE39066A076B64B8D84627DFE3C1FAE25B78FDE1BAD287
6B5B44EF5F00633CBDD3FB0EF427C5570A162A58602B5FD2AC3E56A24D1AAA05
DCC9B2B6768B6F052F1CC979119C831FB93EB85D6850C3D893F64C3AD90667FE
4CCB0E51C6D04A5DB6C28C6662FB89AD49AD6CCC1AD5DB32C0260AD77DB005D8
350ACFD2C74CBE6123AC48D9B5527A53710391015CE4B8C11C0562839A08B22E
A6701A461DCBBFCE60E0E5B9C9025F0D0A2B6320E902FD214554A4F3F02FB860
564B4CF3BB0EDF0E38AB6471A6E430EE1E816060346BB150BBF751A65FBDFC45
B21D2084F680A03A2EA656E7BCAFABC6BB6B1EB7B35CEA106AA1FFDA7D1C4299
BDF3074799A93D1567F0D0FF37393602E4B83A9E92C674167E0A74B0B85721A0
C721D144D59AA23A265D8072E5ACEDA613D619487B3BBE45AA0BF147E7DFC48A
E9C326127DD7450C032D8E3E58CC09F9AB43D3AF581B666246A6C45005A55D77
906D6C498B7E2BAF229D087A21BE5CE7189291ED3DFECEDAF0FC091109447F33
F7F1CEEFCE6D4010156B1367FD61B7E0C8C6BD343F275FE9F58CB6957021DA1F
8FA503F4270AC1D548906C91FC136448C01681F978231CD04405627FEAF63DA1
F4EA31F3017EE455A30DCB0AF7C988AB9F6C28ABF5D952C3008BD0597E518289
2503B065554B8D95F4555D09BF05A912AC68D02FC2D209C536D962A095CA9091
98257880815F10D72982E61A9F4D46B3E5AFAEFB4A3EDE1A8184748ED92C2AAB
F57B83760FC67315D5E4BAFF1B53042F93751B07313FA6DCA7FC6FBCBE143BDD
6AE4A3E9465A6F4793108D86003A9BF9C36F76DCAF923E54898A43647D3C234A
660C466BBE7D8AB0420987787055C3C08FEC4F546B31566DA886D0A12E19FD88
1F7DBF17F4C7676BD086AFB9F942C51013A1937ECBC03CF7C4E174BFD8F8D843
57BCD02D0B1804227B1F17CD504A837F1968C7370173C3635DAD5017A362CCAA
BEF3665D6E69ADFBB43E0715EF2916938C5EE6D175249CE1839128D074887FA0
E6AB9A6147D9A26F1D0ADB5B2E0588CA8AB774C2159B034F2588A75B58632FF1
82AE71481A2A761DC91B2470E182279DF4924996AAB4A031237D80FFB67AB3ED
871E7418221D11B7E5CAD578C661D9E3415459CD408DA7E47BFC10658F9DCB0D
E79E2CC0DADD6B9D76CD16826B5F49B5468B5512CF6CDECCB9D8888BC18BE769
961B5519E7CF062BEA3338F9709941BB713708E68B494D7C2781F2CF6D8F8963
BC4B0B25914678750F920ECE57B1C2DAA3037450785F8908AB15CF20401A1AA2
2D6052C7D11B3AC59775562DA6F4C10261365C3E5EBAA2F1AE8D36D2EF9F1996
4B387CAE9A37A42C3F1CA929811466EF53C96B7DE19324A7BB3DCE5F32371122
88E3104A97B0F18F9D460ED21ADC3D57E776C76EC62D68A1913280257A7B8E20
F48EC02AEFD9147EB06B88CAA0F90B4BBB759438A817D98BC970CCEDFF24BD22
A16874761F850842429344E04124241B5B1992050B6C30EC1D1027D9E1E195CB
DAC59C655993CE9940A0AD3529F4D882775ECE93824CF6D3BB26035D1E6C9389
3AA7ABBB17E1F91290F488129CC10DB9B5CE3F9A0C6E72C275BB596ACC022CEF
F98D6887C30ACBFAB5201BBDF67D727BC7AFC877E74A69F0B0CAED6D6A3EB374
AF174C3881521C689528DE9B882F92BA0F0FC53DB0D2B1034DB601C5CB50A81B
0A0BE256C6D6B40B6EFAEDA4779CCDFFD1173A352831D61D38587583861D9A2C
06A538DB55461D648666E2DAEA32AB70D64B238B62B5DAC81CD524C7F4F56B85
D4B106350E5B949B8B2F32317E31460AD3C95777A814E962FB1422470AA21AD7
06D0745557B5E42C68AB03662E5C926D5A7CD1F2069D4E4A26664BE35E622980
59BD96E9889461DB870BE2D8F332ACF9BF65140252887A7A643CBC589EA486E1
1229E03AA1D0FAB54AA536BFEDE167AA4757EB1C5C8DBA87BEAAFACFDBACBAC2
9FC4A6DF4074CCA08946C57FFE7322E504F1D926B1ADE9C2AE6CEDFDD858BDF4
E9FC8C9CA3F630358C32576CE8D04104314D9300205A7DD7BA1E479EFEBFB401
5F10883ED4F53D7584C3F39AD62AD05FDA03FB859B895D09637A023719425956
BA86135725DF01D1783449F09D298FA362EAE642AAAAC8F8970F91071AE73368
2B0BD8F799FD3FF3A497C21FA272F8C8AB789FE2A6A031C008EA47F1E013ADD4
3BD415999F25EB661C4B2CC923C059A949D0CD0500BB2315EC3C7540931D48C0
406EE71FF5BB88D9CE2A5A8ACF2771E4B7E94287A85E9E98C653A337FC349441
4478C07C6C11E4372A3F923AEC792F3470E150F1B73F3CD6D5542CA41E3F1C50
1DE0AFD3D234C4CBA2FE175E35F7C4473C4F1ECFCD1459A988A33AFEA6084E4D
AEF1E1E1ADF2EA432864C76F5DEFFD172CAABFF248EFE8C9CD0958EF8FB7A048
AD887644E0D4E728178D2ED7D99BBC7581730F785D1877D02578455B8F2BF1FE
E6447742E5685238398E19629727481853A238965A65F311C7722A8A58202A4E
1D95E52378BCA41815E1D3FE77F3340CEC0051A4EEF616D4892B9F2FF2F2331B
4C6C3BB1028EC0A7B8D5E7725E5570B537F4545A4CE40FF6EE9A93EBED865D4E
2ED6EFC418B56F98570F7C4495F19C89BD96E469BDF4354160A7ACDF92FDB571
8E13616E095D2245EEAAFD6B5B48B9205E4A483A4C5AFA8F1C30F17E68D17975
F779FDC8C18DE1AAFF2735B45674ABCEAB2348709BBE69F7976B7ADB3DDE7594
DC077B3F515E285D2D67B8FF47B02CCBD9C04D53035C41D470ED04E4FC93FC6B
10422012D3E949E4497540F4158EAEFA949D1A3EE8BAA679C2E803029D21A825
D0B9388F913D84D86273C536BD046F1D2293F014AD50780FBA8B47BD603D329C
5EFE83DC6D487D887B9F20A0C70B4FC8891D5E42A4AA26395854F678342EA046
C55CD8F7A5111C03353966135FD4B18E2FDB0F260C184EB9C0130B3A08877B59
B1697B52EBE2CA2453C271F334D0B169676473C4A74D7309A028042F2C01029D
AB95DBC27C08A2A61C7F853D5D6B93B715AAEAC2DBE9112A95EA1BAB4237BC04
AA6787D4DBD58DF40B8983B2DBF025B79320172BB20356E3994C974AAF8DBCA8
25C9BF2575B386B6B3C8D7770622DBD98A041D2707C8D2572A80B2943463FDA5
2D61711E7AE5129A9653DCF70CCA5CDB1C46F0A3945D980CA87A7E593977DD98
5F896BF8058625808C1036B1151B144418AB356E56D7069023EDADB3B8D4B30A
136E66DF1334ADBEB517D05E5FC0053184ADF7E6F8CF420D15E0A8BFA54AE115
D2D929779FB067890AC7F3A3975B6E5C2496F7B508870D6FA9F946CBDD0FAA29
7E859AE38184DD9F5EED161B45085795D5B47E53844BCCB78583DB83951FFEF8
B4F56847697CC68BB47D6C760B96073CE03FB19B761707391E9ABB7F9D29EEA0
BA0B767596A00817B19E5D349AD02CFD9A4687C0A897D97294742CD0135DBF65
13AD15E4B865D4A3B0CFC348D9EB01392BE09C8FEEAED3E4B1FC7F6F55AEEDD2
D056D767BE22C1D0103C356171ACA66F0817C25F710B39D340A1BC199964691B
FB35F2BBD43A78777300EC3E83D4E1A3AE016DEC76A05A6D016735E08D594FF8
33CA8A531A6C817BCE477EF75EED06D56E5A3EFE7DC9EC38EA8B184D40D13FDE
1D0E45939A8D4B6C68B6B26EEF6BEE26E495D1121AF02C9833A5FC238D721F0F
7C690572229FF96FBB7B7A0754FF68ED7265752214BE5FE4D813BF53666948ED
6DCDF027C63BA8AEF28081E10670C1BE387529F7D527FBE6C2CD928320F0FDD7
D3137D801C424F3C26CB55D5E5BEE4EAA333D8C84A7362D2900B2A2173D4ADA8
5244BEC3446EEED240045759DA537A8E7D19314ABA371FEBB245282551B610BD
0A644EA0F6E69890D6CFFC24DC134970C4BE0E21A3F0AD0557B4007266D4C538
CA46E632E6A4B20CC1CF47D133F5CE7DB843176E3E8EF5F23C44BA5A6802AD80
3542C74DA02F3B700CA32BDD2BCFA4C25DFF30E19A383BF24ABC81D2793FAFDD
BD45EA6ED0BC03CB993AFAD163A12B5F6ECEB373E6100568E168031A4216F615
A08DAAA3D5C5AE0F7A914ABC04B6416D2EB6DCA3388A66EF7516F8EB1A060AF4
D2B8421D29DCA71839CB8EAB25884EF9AA6E6D5AC83B64B9732DDFE565DE99A4
B8D4E345B3D7BBBE703E55D72C8C775F4E91E9A1C0F294DD32A733277CADC872
0D6C9C75D408E8F476800961C0DBDC9F8FA4070C57C908121BBDCEFA62572E42
71B08BCA8BA99242CCF6472F9F5A06AB2619851B82587A0DB0D28EA3FAFCEA94
936381A1F93944C773001B9F1D4F70E4FCDFE183E8A6EBDBDDE9FB6559E70C85
B3251775BFA73C34635A913268C33DC754EC77687A4C45AADB642BDD192C7D23
30D65F123E63F662DA163E3C90A8CC3520C7A69AB5026E95D32D29958D4317B7
45A67BCD77F390A8EB7DEF896D22DC98770BA8051AEA77898D9C6E197F35E8EF
54FD8F5D045BA473C786B62C4E2D8840F8D2AEC813194BEB696B4ED97F0F7329
6C4770A2E7CB9819798EB517320CB31DB9F0FEB773360A927D5BEA69C1AB5639
9BC9D514A8789794404042CE1B0F98EE884E95A87A0D793E5DD4B1CE8E843F17
A4A37D38AD5CFBEC96F021E9C4C7FDD739EBD5AE6299F0CFBEEFC86908642D16
325DDFD743573DCAAC31AD9FDAD5D3A24EF151846FC43C05BD4CACF9F6F32C31
2D019BAC68F1CB46DB4FF72231887FD8CC83AA4C7C9CD5426747CE73F333F820
7CF45486916ABDF79FF0CCC76AFB4D3E2CD5AA606C604A3655BA430D0A406B51
13B1784EFDA3872F5D50C2354CDAC6E85E7628E93FB31B55CFA769876784B849
1A3A8342011E1D91D3A564DC4B4E07D73C4D68383BDB9F213F4CBE5B5A256E02
6B3AEDE4CAB13F59108A99020B585BF8DE8F448D3621B55910FCE6AC13F565BD
D541923632BE1AB928D7C48CDB4176490BB848294D42E418EB31EF91B5081A04
417487A76C5C6C91FBF9638EA5DD30686AEE763364C553B41AA3DFAC1149FC9A
5D01A1B1F533EA804A768FE9EB7F05BB398FC1F6B0A5F0ADCE4FA7EED656865D
33B92C204512584029A7E9F3DC40CE4F6CA38D54DAC3043A758FDE5DBCD6ACFA
4A93C67B872410754CBC7937AA7D807FC25B96B58DB90E04252D2DBE53684D25
31029639226624EA504B4811CC58B3ED7098D1C588C9FD0B93AC298FE90905AD
11073C75306533B6C7951B116A7DDED52E198394BB4380D62794AB9C5614FC8C
21B944B0E8209940491D65EADF93C09E818B9CAD650554AE74474D010BEF4511
F33EFFA730D331DF88888F10C73BCD1C85B4D608A3044806C53ACB11D9584CC4
D2022729F0DB7EA42A6EFF2339400B1994E88E0962B71B9E20398E6976EA8554
7426FB8DCA296F35E762619F53A31C2FE6024F1C5F01B4FC6EBC4FC1D33D8C4E
BF7A75CA4CAA4A3EBBD5B16EC1D5DABE8721AB035263269615D6DA4D9E464EFE
BEA1DA44C80B6C0CBD12106FC747E28B4A05811C7D649A66C41E2F3F93F6CC4A
61CB5AB2962DC9924BBB730FEAA4CE9EEE25A230E57899C7020065B7F30A0C1F
119A700AEE24A615B660375CEC14CA57A56C7E6DAAB3132F8E09E81804D198E0
C20A74B8B6AAE0E2B20BCD415809993B227683AA0B3F91E02C52338387CAC1DE
608A9ECDFE2C85DAFA97B0657BD62ACFF56158AB96C820FFD8866F152EA7C2A9
6FD3897C42CDB86BB905148A1B0471BA43B6B7111382F76823E1CE903C41E339
0DB4005B6D5499365C6129101D7803BEF35BF68D51BF03342B213524A1780624
EBF8221CCDDD7FE204BF70C18501BA32D8DC86E3BA3723F0152CCCF6A4F199F7
B48CFA5DE766E26D9A01B48CDD0860F794C3E6938A67B38A30552C087A2A1ECF
7341610BD09A5E47C49366F69C82012484AF7649C365A6B0C5E29D167A15BC53
2DFFCCCD6CF45F3839DF512221867AB76AA1C347D2F63782DC79F46A56FAFADB
88F51A0BBC7A5FA0AF0566516E66398B4FF519100A6A9C549F79168AC72581F3
FE5D82D0EB28F75491E948A373706ADFAF0E13DA1A016CC67CDAB63BA3BFC926
76A7567E1A5A8F67DE0112529DF06DB9957EF25DE4FEF6B744EC7D879BE5F935
7BCEF7A2EEDBE38C8AFD3A37DD96CE4126581A9210152C92276B2677C2FA409D
1FED89C938EED3FF6397AF43F21017ED37EB922943315D453D479FAD17BBFAAB
A3F056C65F8479551B3899EE00C122CAF4B111AB6AAB742B9923B7C67EF4E15B
6CF35093A7FE6DB7CE4ACC2EF504F363E7DAFF6534C27CA43415220531E77CAD
FA8B4A0BD958DA771705FBF88516627DF87DCF31D13E5E701EC2CF5FAF9B131A
3350C9B0844F8ADEB344A3C56754FBCBB57A6167894124DEE29ACA0C088F0063
5AE17FEC5CD3667C00733C259BD50CC6143454E7CC005B3006C82E06541FF590
4E52F1584E98145FE6033521B2AC5267992D5215D805BDF76E9F0AAD3314AE55
746E56DC40D35C0C768986A7C324A494B6E81DE1319E9207B4890538B12C7F93
B35775791DE2A51E37F329FE49D6260E194F098109EED134ACA7124B8168D8FD
BAA324148C0050E5D8A4922C26A9643AB8114822B24BF968EB84FCCC54E67B17
DD57A09F5F2425DC916BA9E548AAFF24D4895FFDE7DE7672FF6A2F53E237E8A6
0DF56C7A6DA8D804CF2CA4715CBEC33B9900892456A4853FE8E4724EA9BEAA53
4422700642208E92AB456D7DF85E828A82D52663A2F924EEC1BFF998C58950B8
D269E997273A42B9C2278070134417BE866CE19F024055FF9B2166718939FA25
ED47ECE518C64C582368DC741A12E60495610A4FB52686AE29F7408933501D25
92B595A48B872E1388210DCB4CEEA5264C5DA86825388E9CC3ECB0ECDE7D5A03
2EA94550507D10A5A1162DEDFD682EE98F3E61159C7F5005492801FB8162EB0E
518B7D0B0B70692F78FEAFAD041D699EE0BC0246228E0407E0D8649F59E13C65
930FCBDFDB52D6DAC604EC057EC4AC72AB6F83FD7ECF3D50CBDF3474591DAD3C
6BB8EC25C24CEAFE7DADE837D0B25A1D7689CFDEFEEC2E09E6D2743A5C9804B5
3C2A6E06C0216650C5199B82BC67531DD64DE6721DFCD2BFE1A5115F6B0DA818
E4A145A999842CC6F8BC9A5594B004E8E86E19AF62E04EC9319C3EBC32B1665B
CA2AD9AB6DD09D5D96DAC379CFF5C491A2E011FC866E3C0B16107A024B2352A2
9D637F36D225EB326BE0178F3FC252CEC75D11709F00171E62DE906E6DB8C9E0
63D6E278E3CC1786C09AF9A309A0D36D9151AA49BABB1D425E3187DCB8076B4E
FD167913F0F89147B7A6902C12C5D798FFBBDED03D5068DD1255006FDAC57983
40B5D1C509811A8914617358FB2852893871F9EF3E55A95CB6DFC79F0EA24196
A54A0E789EBF6B0107595FF1F5497F735C6807C9B95FDE09BFD3C22FEAA228B8
C34D89449D8184C3158B0CA157C015A54D5312C17F931F9C9E7DD4100A25196F
3FA9889D3422818FC0F694BBDB9038F7BC07B45203DF7DB234BBCDE5EF277120
D540C2DC96785BA40D860D4779CE1CE797EAAF98DDB0505EF380958DB049BF54
187E0227AF2ACBA405B117FD7CBCBD619412928E0AB8C5D379B0AC582CADB850
E2ABC55A8A5904AE26096FF3E8801DA746323CEC77B2F1F6852657418AE4E7CF
5AA34FA4EF6CF78E5CCAEB285FBC7C923B4FA6EFF6F31DC1E62172E624C0DDF3
A9AE13182EBE75143739F2CEB7B503FEA46DB87C4720151ADBC5508250AFBCEA
2A6835A068DBB17EF86DBE59E8C4EA4BEA519DF6DFB0D4A6416231AF3E0EB8FC
28515D394E70B367F872E0869D4F662CC1E6334D9FFF291B6A63BEA5880EC976
88EA088F373E59E900CC53EDEC3B4F3BC194CF4B341A71FC86238AB8ACADD8DD
214501F00291F0D22083F926D27B2E2EC2731D0A1E41B01A39917C63770FF0E5
9448B13A7D1376FEF0BE7B6DC4D0E02F1AEFAA2099A55FAA36DA17EEF39CBB8B
E57651BCB700DE303EE1D53C5A9DB3ABED20CFD64F3B82EC360F0ECEE7911BD7
15E36E7ED1BFB1216CD43E94F4C8D8281908A1E64729ADE3BE1AC6456164B554
108E48236F53FB508590D103B28F3A31BBE41740F1C9A2BA853D70CF17F787EC
75E099098E8064A2FB3D8EC90FF3D65ECB55CD98DD6A8EC063FA46AFF749E399
C0B4EF7CD9E6B16F029173AC1DD93C47BB693DCC2FCA556E23D42C79FF63118A
3D2F25072CBA56910E353CBAF9D8D6BC4E9DFEC9E62A46B0A407C40C36FCE8F0
108BCDCCC85AC34C7BBFDEE696F9CA04EF06D24FCD2184117C4509EAFBBE3B7A
678D3509BB5491D84C8B4977A4824DAFDBB09EB82D150141856C14EA8897B859
6C233F4915C29480454F04A9229B47AADC03FD379C2A03AB49090259242E2E8E
D1693CAB6B38003FB71C193C13C388F0E41839D8DD2162763CD1C1A925B02005
9C7B4422663802E8DAD9470238B20583EECC5E34BA10807E43C7876E7611AF76
8B6661BCC99D3B8F8EE674EE70FF75790E38D264BC6CD4CFB9AEE443BBC2524F
1B174D5B2724A343C3EABB68E1A20697EBE4411F69F228731D5CDFE0E7484FB3
0B6282329712AC3CA5FAEDD703D1D56EA1ADA2B903AFCAE2EFC316537E6D919F
0F4A971653CE60432B49E7B58EAEE55AE576BFCD29A83BA50E918E5328A81BDF
ED3A9250C33D9BA1DC40E8E5251F07C5C0BADF4924734EA04C41F3CEA9D93904
64DCD40A14247E9249A1A5513E5FC56207653A9C5E89160FC536939AAC35D857
2E6B522EC90916CD92FE5A9B5A7E84AC5F44A2526C9DAD93ED99719F5D5DBC28
0D9FFE5C72354FEC7265DD61AF6EF6CAF37B1585A96519183DC2CC264965DBDC
54730A209F1D4DFBE3D1CB288DB550D7488B296E870E441AA3FCE6A6846C0149
AC4B45385ECD1D91982BF9C612E525AF23B02658EDCA600EC4F317DE611CC1FD
439D79B54806DB1962A59E2DA9CEE063AF290BB5B14D44D899FDE16324022B48
941D0F1015198FF6B28DE5D758E05C517302E29A91103BA616909482EB8DC1AD
8F9BD06E484216A28C5BC32716043618382BCE949A9F7F406D6B1CAD893C4EB2
E135DFE6656B84FEDDFAED2CFA9994974953B90493B7E66ABC9B496C91435480
C7A0183EDE8D2FC87C18CB0199742E15DCA718D4E67E863D51C9DABE51DF4BB7
EB344B953910E579FB7AFEAB38BEC0F1901E407ACDECA1D89DEE9CED304B0C02
E51B73EE893D240BFE3EE7FFF4BCE905381198C786A8C8C23311F961E72125E9
1A6EF09AFB0D99FEE08233273893FDA1843958BF6F55AD88C6C1592A51166121
582941A659B33E20DB39C0D77C91A701AD37090B453F336845B71A5ED9AA8DA9
E448BB0D57FB06D13BEE92DD71DA76996E7F7E2D3E5AA334D8E66836475154CA
CD25A0DAEE81CC2C248847696FDE82CAC6C927E0E6C49A2871514D9E69D65314
3A927ACB614736504F4AE60C50EBB278531FBE749233E40A7C0081D805A7425E
91E66DB4410FECE539061C2C12535DBD666EAA2CD534DB06A5CC1D3051805CCA
0C407613AD7D8622DFFDF6C33B5F6934EB57D8E0819567CCC137CBA91547E557
4C56F9E5586CBC0CAF6DA6DDD3A5FD86FECBF0824FACDB81EFE4565E35964D1E
5700274267E8B78F3CD75464E2A838B660505E3DBE8219175680EC6FA63A361A
439ACFF6F4BF44DBE1D5C3C0EBB64374638B9BAAD7A018155FB16EB5AFEA28D4
8A4B0D2EF34E0B47ACACF6F62C277D339D4121303AF631E161FD6F57BEF8872E
A2BF458C5BEBEFA1EB5D375F71302ADB125B2E432E4DB4E9249181C981DDF8C6
F9D5BCCA4BD53AAB2208BEF362A86412E6C15D6E36F1CEBE4788E1347039D6CF
5D294D211BBEEBB7AE712179DF95536266451B086A2689E976D4BF5A7CDFC61C
7BD86A2D2641B50A544994C9B772EF6414E8AD960E5A8F57B89FB673CC863798
119B12BCF3F05BE194F4CA15B17B023D85514590F1A6F5EBDB2452F6241137C0
BAFE935A4C61371DDBADDA3039F4D62429841D484AFC18E89C4BFD7960828EE6
C67805F17BEA2D04B6CCFE75C013CD0B7BB7BB5FB7B5591F4E8974B781705706
1635D46C6D0E039548E44D106355E11F05FADDB0970E7798F8438D28977FF86F
398291C0F3D41F7919A060AF1D0A481C3ABDDC4DDC3D927C1A953F417370417D
64E47299991C889F8A5059B9D3F25E14A8E77F0B275DFF935965AF35DA0189D9
B33DBA9990678AD6EDE097E595995B89685216A9276598ACDCF7C21AB018A2DD
5FD92C742269F39030BB8C2C638C7E2C514236E86ABB7042C29B31487FDC78E0
81CCF913375F317E52EFF8BAA0689E764B7C99FDBEC005BB87EF27B018C1E2EF
E95E953CEF1F3219DDB4EEC7A721B31DE76FE1DFF254802AF0CEFD6FCE0ACEA0
CA814D473D87012C57453CA26C1FBB44FCFF5096A95107A084F9358873981825
247A95968FCB1C0AC1B0A53241F6A5FC8A7F5F22543B88ACCB00A8B9697760E0
55FDF9D4F20320B2DE808B43EDEF329836999DC2040A63C6FBB814A8826616C4
EA3A7AC919050E2F1F26A7098957FE1B74957839D1D105DEE00F1EAE0910A24A
EF10E341D52AE238225AB255DB00760F09025962C0917FF86C5F6743404A493B
9E2DA09466BF9D3D09F113598FCF63B09E5C327677301A575B2B53381DF1B4FF
554C2C2EA8B231BD837C5C1DD3613B650FBC4652CB0AB47680DC129F000325A8
EAA149830DD778D8ACE45A8CC44FDEE91337A9F889D022BE66E67F2E532FCE04
37E4C949B1E27803E2FB19BBBB9CAEED73528D5ACE727EC6BF8A506303CFEEF6
3F5AAB356E956523E715F48A0EBAB6C5B951DF3CC3A99EF48B265DF838440534
6BD7D8AE90112FB184072D77039E9358FE1FCA62CFA31F06F9B83D107D3AD54E
9DD56D567E464EEDC841205898733E7B87F7260C10A86BB8BEE33304EF7EE0F8
EA9A81A18C854AFFC14995432239749735E2EDAA054E5916B468EADB533CC328
7D743E6E51D7C60C0EA963E48C81BBA15000C1A9D5AC56EC79C87CC15B503110
2966F8C857FDDE338A3EB0505351C07813187DECE3B6CD1AA7B0F1A5ABFC5776
FF2928A66B1AB806778B30DBD7D069B090A59FF5317034F04FCEC4068470586B
0E852A69421EC98BE8BEFD2EC56B55CF3E6F27378D05C3A8B1D89823D872147F
81D811EEED8AB9B5BDFEA0DD14AB0B864A58E00B4B28F054D13F73271D1D7B26
6BB576C308750A88A5C3FFC5224AECE4A623CB3D78BF6FD984A0E15506837F7A
995DB673A6AC13F3EFBB720AEF9ECCE922F4543500CAFF6CB0D42757A3CA28DD
234F2CA832CF556B3E11B5BFD21C2EF268B8518A1B22AAAED4D988B80672EC18
B0571B7EAA24CFA287D67373DCF726DA255612140B1FC6445E214F23D5FDADC5
1C9EC097955FEB2AD54D41B7EFF1C0F09CFEFABEA40BA6501FEA79149E39B0A2
BED72B7287ED3C0942D8573824B2AF8ADBD2762358455982631047678177EE66
B51F7B0F810040E2028D6BB7A12D7F3AAA2CFCE5736A792DB36394B0F409686A
E22C3EAA2BCDE359B2D07CC0F13378C1900710089D01DB755EEAD6297ACC0A28
CA189EF8093F150A430E3F12A107A235C4E5AEDB7AB4379B768969541D4783F1
1B5F18893B198FF9F0FF76AE58FAC8919B8A060933104831A4D242A773FEA817
B9DA3EBF1B34A94178D783B5B1A8793FDEC22EA39FEEDC9AC74821991901D047
446B52CAE032285860B043FED30616C0B723869F6239DDB5594D75BB62328848
5842670B92C500B3BD73FBCCB81F04EDF61C836704CCA5E70934685EDD56CA8C
E059672A43E86BE3988F8FBCF50996884F0AA2AEE5F68EA6CA9BBDFE92E3EBDF
F09D541901EF2A0AC70E43FC65CAEDB379FFCCB02C72AE66C7BE187A8DAAC525
946EBEFE1ADB1FCE5C5549BE46B10F173760D7BBE28410F32DED531B2705533C
CFF0A5DEF52238596CAC69B8FFF08557A002C3CE7A921C0CAD981C64EE344977
45F20411489E2BE841FF814EDBD51EB960150F34F1022E7F97D9B8B9B0B22DC7
AAD957C7B15FFA5166DA403C9B8BEE49262E09BC4E29ECA356745BA0A43E8BE9
0E0F153BDBF3E53E519ABAD6E615461E27C1D738FF4E35F17E223C43A226590A
0AF05CBA9E10EF1FCFACB2AA0FA2DE30437CD3B7C145E0684FE8251EC439AF1A
60CE13C9464EC965F724E58428D84A73596B76EE5E9E3CF0E58326E82E6C240E
ED7E204ED53D0F689BBE18BFA66F14D3B0B3337991462E1D9C6F0905149605B0
D4351E7E97DEABE4DC3DBB5971B483C51A7E944DB1BD112D7C44655B27571712
FAB793FD29324EA25F2C1BA4747B85247E1810380B336578E8441AD7C224BF74
BEE45596BD7FC6CA3FB540F9C1B59A292F73D900098655A5412F6982888202C3
9AA0619995254FA3EE11FA9B4958ABB109269657D440FA78AC00B9878F244533
FC1B5FDDF9A550E6D9C4EE0E79B1B9CF0B4A0391F953886A02C23BEF74DA0DA2
C7781ACD9E58D6A7FE50BFC134EC6F25EBEDE4E7905E75D45D41FE1DE4E1AE05
846028DBC6014035FADF17F8154146B1FB9FBD73A3D03AB7A9EF9F2A7911E691
2C2C6C0DAD893755B8F7B61A58180E05B5C3CC8968277D71359BF68A5E2EDE64
6FCEB1CE2FC43AC26E1EBD5427DCF42A8F36572D65A48BDD03D91F6D511C9E1E
2AF27F334AA7AD49074DB43A95C95BC62329B0FDC5305A4E3BD434E14859E0AC
E78A2F8F17376B84FEB89A89F188A2AE5B7663AE7DC0AFAEA7D1B66D50B55E45
C25948DEF700775F9EE49CE9F22A8D18A7906D8264C6F57E2A8918D297B9DE52
B35BD3AA2CC1A48B3ABCF24A78EDC415317AFEFC811D0923307B984EB0C5D25B
1C306DE0F9845269EFA73DAF9A67B6281F40F29EB0564866FAC2BEE47713EFD1
419D30DBC7DF245C2EBDE100F7CE44586BD16C0CE52A0FFFA333A9AACA2ECC8D
6D9F4EDEF37CA66272040B31F85AF3385D62B3AE45F94CD7FF2D70C59F830974
DFEA77A27C3FA2034BA2D425B18A3A9830ECD85E9236BB468CDD652160A3F2DE
281C5B05E26EA5706EE2F19860AB7C8FE202323D227FEA4030D1333F4D2D8E91
32B4F426EADCD7168CEA961A2123E8851A1829852F1B852D0161C36C1C030F0F
951305B500B5AB474F52ED517693A54A887F44C9EB5A65690C2A47E48679D374
406E72DE157A9E810AD2ACA7F126ECCC9B8045B7BE86CADB37FC3A3C2835FE9A
690FEEEABD3E94E6259D15AB34B3E5C3F556623A115C1BC198A602905074BD50
224C663E4DC92D70742136DDDDF9445502BCF616559FBC72FD37710D3E7106D8
C27BC8C6529822D24D2415B1E6E0FA876C62C5E4377268ED11C7C5A9789552E9
F249B0C6A08B79D849CDED2FAFD41F76B46A26F1A51F11232A3995A07D8D883E
3E42174BFBA3060C9531E801E9B46EA3AB5A61825E15ED7A7B7D9D257C873BF5
F9D8DA123189A1F97AEDDD06255026DF8583C82671035CE6D552FD6E444784AD
83589A2AAC4E6CB6FB6E187BACA879AEEFBE63D9EFD6A1E6EF83258CA02FEF2C
F3A119F3DE26FFB9DD779AC5EA0F48D4946B0B81A1600A427825911AE0DB1DEC
8E49C9EF73D73415F9C1B5342FFC97C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/UniqueID 5087386 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 25 /pi put
dup 74 /J put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427084643B66BB9181094E29D
5FBE37708E1D8A6B7518A96876844CB66954227A7A6AF28DD075A462526DD5D6
40EECC56FA366106E55C7068997B54B7F0D03AC1AD45D28C67C7ECA99DBEDB1C
E18A79C353113E2E05B837E703278B202112B1C69E42A69D64B62F0E7D8F7E5B
C1F93F0F99EC20EF312046F4B0CD7DAB31E422070B629A7FAF3BC331F0A7186D
4053C7A7BB3253326E1E84A4EA2D9659CAA229C3AC407FB24F4ABE9482030869
A9668917643AF4FD39F791FEA3E91AC2C563B89563D09DD560E81B91EA9F8BC3
BAF9E3BDDF5E8851177A96BA4AFEA907BDD656B529E95613D80859032573F8FD
D5FFE584D6E50B59686CE34AD75874F33414491C781B49C37BB109CDDA3CCD28
52F99F8B4EF693FD3486F5E99479643E4FAF299A56229FF319B5AC8FF07DD2A4
5B158755E2B803566EF4D8F032FC88DAD6CCCC45C99BA1B5CB095D261844590B
08CA49FA307F342CA44B775A21BD8C25FA642D30D884990A0005B8F3BC4E1166
2F5560DD62072EDB9B4584D8AE5FBD76FBDDAA375A9336BBE76F345B0EC6045A
0BC1F5B70DC01117E72718E86BC4DCB0C73A0DEA12C2AFB867224E5808A68E68
D07A2D71AA82B732B703F32AFCA5215E71F799D98FF0564E405D2B0012DCA718
A93EB799CF7E7427B2E178D2625B9CE7A0E81D86F6E597AC0B5B68FA8C88AE83
DBD8C5CB15E407012F8ED4F25BD418A7CA1B247B9A200B6FC72F32513C6510C3
BF83017974152B6F88DBE5296682BA74CE27B2C4557D9AC0B7547D031CBC6A57
F5F2524EAC39E7D758DE7C659E3A2924CC8910B24552EA51F81B9E68D52C5F3A
584810B613D43917470A9E549B1CAAB11F5FFAF062CD995ED06B44047A186D1D
FC358FD6863127DD94E7947E59742BC7C79704A92EB975ECED49A1B126634761
E49200EA7018A62A7F328E1BABDF6B692A9C317C82380DF9BDAA91A5627BD00A
B9A9BC8397F705419BBF4B146DB80427366BBF1DE87DE5831213BBFF636A326E
1CD1A2898DC7023905E7EF3E9E3CCD5D32912B8E16DABD1D13FA9021549B6D5C
BE687CD583AB97BC534B3A5DAD5562B365C7D3BE4D8140DC2178A3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 223761600 170636867 1000 8000 8000 (poster.dvi)
@start /Fa 199[1348 11[749 44[{}2 2754.12 /CMSL12 rf
/Fb 205[1549 1549 1549 3[861 44[{}4 2754.12 /CMBX12 rf
/Fc 241[1148 14[{}1 2295.84 /CMSY10 rf /Fd 138[1689 2[1659
8[832 1[1766 1[1536 30[1962 70[{}6 2754.12 /CMCSC10 rf
/Fe 205[1053 50[{}1 2295.84 /CMR17 rf /Ff 255[2142{}1
2754.12 /CMSY10 rf /Fg 181[1491 48[1530 13[1715 11[{}3
2754.12 /CMMI12 rf /Fh 133[1119 1335 1335 1839 1335 1407
975 990 975 1335 1407 1263 1407 2126 688 1335 1[688 1407
1263 759 1119 1407 1119 1407 1263 3[688 1[688 3[2629
1[1909 1839 1407 1874 1[1730 1983 1909 2341 2[1299 902
1909 2000 1658 1730 1946 1839 1802 1909 3[1983 1[688
688 1263 1263 1[1263 1263 1263 1263 1263 1263 1263 1[688
831 688 2[975 975 27[1375 1447 11[{}65 2754.12 /CMR17
rf /Fi 134[2355 1[3223 1[2479 1735 1760 1822 2[2231 2479
3718 1239 2355 1[1239 1[2231 1363 2036 2479 1983 2479
2169 12[3103 1[3328 1[3048 9[2805 1[3420 2[3369 65[{}25
3966.24 /CMBX12 rf /Fj 134[1923 1[2648 1923 2026 1405
1425 1405 2[1819 2026 1[990 1923 1[990 2026 1[1094 1612
2026 1612 2026 1819 7[2750 3[2750 1[2026 4[2750 3371
2[1870 1299 6[2595 2750 10[1819 1[1819 1[1819 1819 1819
3[990 32[2084 11[{}35 3966.24 /CMR17 rf /Fk 134[3503
3503 1[3503 1[3376 2615 3440 1[3186 3630 3503 4265 2932
2[1726 3503 3662 3059 3186 3567 3376 3313 3503 3[1825
1[1825 6[4490 1[4569 1[4236 4823 4649 1[3903 6[4236 2[4403
4649 6[1825 8[3157 3[2158 45[{}34 5711.91 /CMCSC10 rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 36.000000 translate
0.972222 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 866.057143 rlineto -612.000000 0 rlineto
 closepath}put initclip
PStoPSxform concat
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 0
a 0 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 0 a 0 TeXcolorgray 1107 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 0.0 3243.61417 -2475.38976 .5 Frame
 gsave false 1 0.0 0.0  gsave 1 1 1  setrgbcolor currentrgbcolor grestore
gsave 1 1 1  setrgbcolor currentrgbcolor grestore 300 0.5 0. false
tx@GradientDict begin GradientFill end grestore gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 10267 26642 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  0.3 true 28.5114 neg
150.3288 neg 3096.35706 162.7688 .5 Frame  gsave 3.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 1 1 1  setrgbcolor
gsave fill grestore stroke grestore gsave false 1 0.0 0.0  gsave 0.4
0.4 0.4  setrgbcolor currentrgbcolor grestore gsave 1 1 1  setrgbcolor
currentrgbcolor grestore 300 1.0 0. false tx@GradientDict begin GradientFill
end grestore gsave 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 11098 38155 a
 gsave currentpoint currentpoint translate 0 neg rotate neg exch neg
exch translate
 11098 38155 a @beginspecial
0 @llx 0 @lly 153 @urx 59 @ury 5669 @rwi @setspecial
%%BeginDocument: figures/ublogo.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cntrd_stacked_full_color.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Stegner, Timothy
%%CreationDate: 8/25/09
%%BoundingBox: 0 0 153 59
%%HiResBoundingBox: 0 0 152.2911 58.2261
%%CropBox: 0 0 152.2911 58.2261
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE Cool Gray 9 CVC)
%%+ (PANTONE 2935)
%%CMYKCustomColor: 0 0 0 0.6500 (PANTONE Cool Gray 9 CVC)
%%+ 1 0.5300 0 0 (PANTONE 2935)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-08-25T10:13:09-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-08-25T10:13:09-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-08-25T10:13:09-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>100</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAZAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXz/rn/ADjRrF7qOoahDrcHK5mmnihaFxvIxdVLcj40rTOixdtxjEAxOzpcnZJlIni5+TwT&#xA;OgdGjdD0m51jWbHSbYqtxfzx28TOSFDSsFBYipoK5DLkEImR5AM8WMzkIjq+h/y8/ILUfKvm7T9f&#xA;n1eG5Sz9XlbpEylvVgeLZi3YyV6Zzes7WjlxmAjV/rd9puzTjmJcV15PZ80jtXYq8B1n/nGbVr7V&#xA;L6+j1yBfrU8s6RtC+3qOWCkhj4+GdFj7bjGIHCdg6XJ2SZSJ4uZ7ngkiNHI0bfaQlTTxBpnQAukI&#xA;o09j8rf8456vqmj6XrTaxBAt7DDdrB6TuVSQCRQW5LvxIrtmlz9sxhKUOE7bO2wdlmQjLi57vpbO&#xA;Xd+7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXwJnoTxLJfy0/wDJ&#xA;heXP+2jbf8nVzG1v9zP+qXJ0f97H3vrDzR+ZPkrytexWWvaj9TuZo/Wij9GeWsZYrWsUbjqp75yG&#xA;DRZcouAse8PS5tVjxmpGvmk3/K+fyo/6vn/Tref9Ucv/AJK1H837R+tq/lHB/O+w/qd/yvn8qP8A&#xA;q+f9Ot5/1Rx/krUfzftH61/lHB/O+w/qd/yvn8qP+r5/063n/VHH+StR/N+0frX+UcH877D+p8j3&#xA;Lq9xK6mqs7FT7E52EeTzEzZL6h8nfnV+WeneUdD0+81n0ruz0+1t7mL6tdtxkihVHXksRU0YdQaZ&#xA;yup7MzyySkI7GR6jv970ODX4Y44gy3AHQ/qTxPzx/Kt1DDXUAPjBcqfuMQOY/wDJeo/m/aP1t41+&#xA;E/xJ15f/ADA8l+YZfR0fV7e6uO1vyKSkDckRyBHI+QynNpMuPeUSA3Y9Rjn9JBZBmM3OxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8GalYXOnahc2F0hS5tJXgmQ7EPGxVh94&#xA;z0CExKII5F4ucDGRB6Jn5G1C307znoV9ctwtra/tpJnPRUWVSzfQN8q1UDLFIDmYlt00xHJEnvfV&#xA;fnn8pPK/nPUoNQ1eS6Se3hFugt5EReAZn3DI+9XOclpe0MmCJjGt3pdRo4ZTcnzX+bPkvT/J/nCX&#xA;SdPlklszDFPEZiGkHMEMGZQgPxKabdM6fs/UnNi4pc3n9dpxiycI5Uw3M1w30D5M/wCcfvJWteUd&#xA;L1q9vtRinvLZLicRywLGpYVNOULED5nOd1Pa+WGSUAI7Hz/W73B2ZjnASJluPL9TwCUIJXEZqgYh&#xA;Ce4rtnRB0Zq9n0T5a/5xx8mal5c0rUby81OK7vbO3uLiNJYAqySxK7qoMDEAMdqk5zeftnLGcogR&#xA;oE9/63e4uyscogkysjy/Ulnn/wD5x00rSPLl7rGg6hcvJp8L3M1teGN+ccQLScXRYuJCCoFDXLdJ&#xA;2xKcxGYG+2zXqey4xgZRJ273hMUssMqSxO0csZDJIhKsrA1BBG4IzfkW6YGtw+yvyl8y3nmPyBpe&#xA;pXzF70q8NzIR9toZGj5+5ZVBPvnFdoYRjzSiOT1mjynJiEjzZfmE5LsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdiryz81fyPsvNtw2saTMlhrjACbmD6FxxFAX4glWA25AH3HfNto&#xA;O1DhHDLeH2h12s7PGX1DaX3vBtb/ACk/MXR3cXOh3M0aVPrWq/WYyo/arFzoP9amdBi7Qwz5SHx2&#xA;dLk0OWPOPy3ZX5T/AD189+V7KLTdVsP0lZWwCx/WRJDcJGNgnq0IoOg5IT75iajsrFlPFE8JPdyc&#xA;rD2hlxipCwPgw/8AMrzwvnTzGNaFkbD9xHAbcyetvGWNefGPry8MzNFpfAhw3e7iavUeNPiqtmK5&#xA;luKz64/OfzU3ku28p2aw2VjDbi1muYwxnkjA4leRPFQw60FffNeOzcfinIdzd+TnntCfhiA2FUwv&#xA;SrqztdRt7m9tRfW0Lh5LMuY1lC78GYBjxPenbwzOyRJiQDR73DxyAkCRYe0L/wA5S6ooCr5ftwo2&#xA;AE70A/4DNH/IUf5x+Tt/5YP837f2Mc87/n75n8z6PNpEVrDpllcjjdGIs8rp3Tm1AFPei1PStK5l&#xA;aXsnHilxWZEOPqO055I8IFAsH8q6HZa3rMFhearbaPDKwDXd3y4AE0IXiOPL/XZR75nZ8phEkRMv&#xA;c4eDEJyokR977Q8raBp3l/y9Y6PppLWdnEFjcmpcsS7OSNquzFttt84nPllkmZS5l6zFjEIiI5BN&#xA;MpbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+V/+ckf/Jj/APRj&#xA;B+t863sb+4+Jec7W/vfg8szausfZH5XaZpsn5eeX5JLSF3ayiLO0akk07kjOL12SQzS3PN63SRHh&#xA;R9wZR+iNJ/5YoP8AkUn9MxPEl3lyOEO/RGk/8sUH/IpP6Y+JLvK8IYl+Z/kfypqnk7Vpbqyt4Li0&#xA;tZbi3vlRY5I5IkLL8aivEkUK98zNDqskcsQCSCeTjarBCcDY6c3x5nZvJvqz/nHXWL/Ufy7Ed25k&#xA;Gn3ctnbs259FUjkUV8FMpA9ts5LtjGI5tuot6bszIZYt+hp6fmqdg7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq81/Nu7/NqC707/AqyG3MchvvTitpPjDLw/v1Y9K9M2nZ&#xA;8dMQfG59Of6HA1pz7eF8eX6XhfmDyV+cXmHU31PWdHvru+kCq0rQqvwqKABUCqoHsM32HU6bHHhj&#xA;KIHvdPl02oyG5Akpb/yqj8yP+pdvf+ReW/n8H88Nf5HN/NLLNOT/AJyJ02xgsLG31OCztkEcEKwx&#xA;0VF6AVUnMSf5KRJJjZcqI1cRQuh7kR9e/wCclv5dU/5Ex/8ANOQ4ND/R+bLi1nn9jvr3/OS38uqf&#xA;8iY/+aceDQ/0fmvFrPP7Es1zSfz8123Nrq1tq11amnK3IKxtTcckTirfSMuxZNHjNxMQWvJj1UxU&#xA;rpQ0D8hPzH1WdBPYDTLVjR7i7dV4jv8AulLSH2+Gnvhy9rYIDY8R8mGPs3LI7ig+mvJXlHTvKXl2&#xA;10SxJkjgBaWdgA0srmruwHieg7Cgzl9TqJZpmZegwYRjgIhPMx252KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVCaxqKaZpF9qToZEsreW4aMGhYRIXKg+/HJ44cUhHvNMZyoE9zz7yx+d+n695f8w6zH&#xA;pc0Efl6GOeWFpFYyiUSEBSAKU9LNjn7LOOcI8X1uFh18ZxlIA+lNfIX5raL5r0q51KVF0iK3nFuB&#xA;dTRgOxQP8LHiOh6ZVq9BLDIRHqsdA26bVxyx4uTKLfX9CuLtbO31K1mvGXmttHNG0hWnLkEDFqcd&#xA;8xDhmBZBr3OQJxJq3n3kD82NZ1vWr208w2Nto9jbxM8V00hQNIJFUJWRqbqSc2Wr7PjjiDAmRLh6&#xA;fVSlIiQ4QHoMmv6DHFFNJqVqkU1TDI00YVwp4txJahodjTNaMMyao/JzOOPetvPMnl2xmEN7qlpa&#xA;zMAyxzTxRsQehAZgd8McM5CxEn4IOSI5kK1xrGkW0kcdxfW8MkwDRJJKil1Y0BUEioPtkRjkeQKT&#xA;IDqov5k8upbvcvqlottHIYJJzPEEWVaVjZi1AwqPh65IYZ3XCb9yPEjzsMW8/wD5jSaN5ch1Xywt&#xA;rrsrXiW0qRyiVEVopHLExN1rGMy9Jo+OfDkuO1tGo1BjG4Di3STVvz4sNC8uaTd6pp7y63qUDTNp&#xA;9u6hIirUpI7FnTkCCPhOX4+yjknIRPpieZacnaAxxBkPUej0HTvM+hX0dv6WoWrXFwqlbdJ43fkw&#xA;rxABqSPlmungnG7BoeTmxyRPVFWmraVeyPHZ3kFzIgq6QyJIVFabhSaZCWOUeYIZCQPIrdR1rR9M&#xA;CHUr+3shJX0zcypFyp148ytcYYpS+kE+5EpgczSA1Tzn5c0/QLrXWvYrnT7VWLPbSRyl2UV9NKNx&#xA;LnsK5Zj005TEKonvYTzRjEyvYJP+XX5n6X53ivJLWA2RtpfTigmkQzSJxDGTgvQCtOpy/WaGWCrN&#xA;21abVRzAkbLPzM/M+z8iRafJc2Ml9+kGlVRG6px9IKTWoNa88dFoTqLo1S6rVjCASLtilt/zkhpK&#xA;6lbWeq6De6alz6bCWQgkRzAFJOBCFkINajt0rmZLsaXCTGQlTjDtOPEAYkW9UOuaKJ5IDqFsJ4Qx&#xA;liM0fNBGCX5LWo4gEmvTNT4U6ui7HjHexnz5+Zui+WfLM+rWk1vqdyGWK2tYp0IaRiN2KljxUGpo&#xA;PbatcytJoZZcgibiPc0anUjHAy5vObP/AJyM1xfLd5q19o9rz9WO305IpivN3EjOzozPJwRY+oG5&#xA;2r4bKXY0OMREj5uAO05cBkY+5mP5Zfmpc+YtHutT8yJZaNbRyJHaTmdY0lJ5cxSV6jiVHzrmFrtA&#xA;MchGFyPXZy9LqjkjxSAiyvVfNmnR+WdY1jSbq21FtMtJ7njDKsqc4omkVXMZNK8MxMenkckYyBjx&#xA;EByJ5QIGQ3oMY/Kb80LvzlpmqX2qW9vp6adIi80YhOLqWLMXO1KZldoaEYZRESTxOPo9WcsSSKpm&#xA;un+YNB1KVotO1K1vZUHJo7eeOVgPEhGJpmDPDOO8gR8HLjOJ5G0flbJ2KuxV2KuxV2KuxVLfM1lP&#xA;f+W9Vsbccp7qzuIIl6VeSJlUb+5y3BIRnEnoQwyC4keT5L8p+bbby15b846BqFrML7WoIraEUC+n&#xA;JCZFYShqEbS1+imdfqNOcs8c4kVE28zgzDHCcZDeQWXOm3tt+UtrdTxNHDea0zWxYEc0S14lxX9n&#xA;lUV9jhjMHUEDpD9KmBGnBPWf6FTy1YR6X+Ynkz6q7/6VNpVxIWIJDXDp6iigHw7nBnnxYcl9OL7E&#xA;44cGXHXXh+1U8i+X/wBOx+c7NVDTxaXLdW/j6lvcxS0FO7BSv04NVm8Pwz/Sr5gstPi4/EHl+lBe&#xA;TLS681+ZPLHlqWr2lvKyFPCAytcz0/2PLLNTIYYTydf08g16cHLOEOg/tQ1/p91L5p1m08w3cFhq&#xA;LSS+vdal9aNJRKGJT6skzFmFaFlK8T48clCYGOJgCR5V+mmM4k5JCRAPnf6FfzZa30Nn5Xhkv4r1&#xA;Pqbiwu4PVC+iLyZV/vkikFGDUqvSmR08gTM1W+/yDPPE1AXe23zZT+af5aaD5SGnaZb66wf0JLt4&#xA;L9ZCkkrcUcwG3jcIW9MfC/h9s5iaDWzzXIx61t+m/wAeTfrNJDGABLz3/YxqXUTc/lteRJpkdpCm&#xA;sWTG6hMvCRza3Y4kSPIOSin2Ke4zKEKzg3fpP3xceU7wnavUPuKt540K1tPKnk7VoYmWbU7KQXUp&#xA;JKs0DhEArsKJ4YNLlJyZIn+E/ey1WMDHCXeEx812OlaDF5O86+UopINOuULKs1S4u7OdvV5mp2Ym&#xA;g36DKsE5ZPExZOY+4hnnEYcGXH9P6QXpv/OMfl36t5c1DXpUpNqU/oQsR/um3G5B/wAqR2B/1c1f&#xA;bea5iH80fe7DsnFUDLvP3Me/5yO12FfNenabLpsEno2okS9uvWIAmkYNwWN1UqOG5KsfDMjsbF+7&#xA;MgTz5CmntPKBMAgcuZt595F0aPWovNVoUeSO20m41K2t42ZV9e1kQRtxqS3FJXAB8c2OqycHAe+Q&#xA;HwLgaaHHxj+iT8RyZx/zjNJ5c/xBdxzRS/4h9J2tJgT6X1YhfUUitOQYDtmD22J8Ar6Ovvczskw4&#xA;j/P/AEJ1/wA5U/7yeW/+Ml3/AMRhyjsHnP4fpbu2Ppj73jrXdnH5h0m509pvMEsa2pltr2NqPOoU&#xA;fV0CuXeNaBF6fKmbrhJhIS9HPl97qjIccTG58uf3J55n1NNI/NHzbLcxSH6wdWtUVR8XK8glhjah&#xA;p8NZQflmPghx6eFdOE/Igt+afDmnfXiHzCW2OkWNx+WmqapKpN5YajbxWzhiAFuYz6lV6GvpLlss&#xA;hGeMehifsa4YwcBl1EvvR+o+UtFg/J3S/NEcbjV7rVGs5pC5KGILOaBOgP7td8rhqJHUnH/CI39z&#xA;KeGI08Z/xGX61+sfonRvIPln0tJS5udXS5vLq6uXmMfqRytAojVHjXkEXetRv0xx8U80/VQjQ2ru&#xA;tlkMYYoVG+LfdA+SLqSPW9bS3dUguNG1dJUh5rE6iwlcUD/Fx5KGHLJ6qPpjfScf90GvTy9Uq/my&#xA;+5CW0WsN+X149r6h0xNRi/SASvHkYj6Jen7NeXXvTJyMfGF/Vw7fpYgS8A1y4t/kjfLkaz+dvLS+&#xA;T0mF8BZm4ryP+lLQ3L+0XUntSvbIZjWKfi1W/wAunxZ4gDlh4fPa/f1fZWcS9S7FXYq7FWlZWFVI&#xA;I6VG/TbFUPe6nptihe9u4bVB1aaRIx97EYqicVdiqDutE0a7m9e7sLa4moB6ssSO1B0HJgTlkcso&#xA;igSGJgDzC+60zTbuJIbu0huIY9445Y1dVoKfCGBA2yMZyBsGkmIPNSGhaGJYphp1sJYePoyejHyT&#xA;h9jiaVHHtTpkvFnVWfmjgHcvtdG0i0d5LWxt7d5AVkeKJELKdyCVAqMEssjzJKiIHILbXQ9EtJhP&#xA;aafbW8y1AlihjRgDsfiUA4ZZZkUST8VEAOQbvNG0i9kEt5Y29zIBxDzRJIwHhVgcEcso8iQpiDzC&#xA;2XQdDl9P1dOtZPRXhDyhjbgoNaLUbCp7YRlmORPzXgHcqXulaZfFTe2cF0U+x60aSU+XIHBHJKPI&#xA;kJMQea19G0iS0Szext3tI25R27RIY1bfcIRxB3OIyyu7No4RVU22l6TNZpaNaW8tlGf3duY0aJSK&#xA;j4UpxFN8RkkDdm08Iqnmnnz8kLzzVrCzJ5gex0VOJg0dYC0MBVArGFRKiAuRU/COvfNppO1BijXD&#xA;cu++fv2dfqdAcsvqqPc9F8u6Dp+gaJZ6Np6lbSyjEcfI1Y92Zjt8TMSx9zmtzZTkmZS5lzseMQiI&#xA;jkEReaZpt6UN5aQ3Jj3jM0ayca+HIGmQjOUeRpkYg81sGl6TaXLXFvaW9vczVVpo40R35fEwLAAm&#xA;vGpwyySIok0oiB0daaPpNnK01pZW9vKwo0kUSIxB3oSoBxlklLYklAiByC690zTb4IL20huhHXgJ&#xA;o1k41605A0rTGM5R5EhJiDzU7TRNGs5fVtLC2t5Rt6kUKI2+3VQDhlllLYklAgByC+bSdKmuDczW&#xA;cElyVKGZ4kZypHEryIrShpgGSQFAmkmI7kFY2XlG7gntrGDT7iBHH1mGBIXQSL09RVBAYe+HxZ3d&#xA;m/ejgHci20TRmtFs2sLdrRG5pbmJDGG3+IJTiDud8Hiyu7NrwCqp0mjaPJax2kljbvaxGsVu0SGN&#xA;Sf5UIoOuIyyBuza8I5UtGg6GJGlGnWoldSjv6MfIqy8WUmm4K7EeGHxZ95+a8A7lS20rS7WKSG1s&#xA;4IIptpY4o0RX2p8QUAHbxwSySJskpEQOTrLSdKsWZrKygtWcUdoYkjJA7HiBXGWSUuZJQIgcgisg&#xA;ydirsVQ9tqOn3UssVtcxTywcfWjjdXZOVePIKSVrxNK4q8t8x+UdGsvMXlDQLWP1bi7upLnU52r6&#xA;k6RUkf1P8l/j2woWfmT5a8uaT+j7aOJIYtZ1W3klUJy9KCCPhKIgKt8XIGg6nbFWXaZ+ZGn3MWvX&#xA;F9aTaZa6CyLO85Uuxk5ALwWtGqoHGp3IxpKv5c87TaxrtzpMuly2TW9ul0JXkSSiykcElCf3chDV&#xA;4kk7HFWP/mRenTvNGk6hrli+oeT0haOeIL6sUd0zGkksZ+FqLx48vem+IVT1bVpPLehabY+UP9Ii&#xA;1+9rp10DGyRJcNUxRLI3Veg5rxHffFDIdU89ize4tYdOkuNRsbU32pW/qxpHaxBeVJZviHMruFUH&#xA;GkpNr35ha1LoGgz6NYNb3vmGVI4Gdon4BnIIUMRViACGZeIB3xpUx1/8yY9KiuQmmyXN1p8cUmpw&#xA;+rGi25nNI4jJ8QeVuoVAdu+NKyG+vbZ/Lc9/d2/+jG0a4ntZ13CenzZHU9wNjgVif5PaJaReR4Lu&#xA;4iWS41P1WuXkAYtEXZFQlv2OK1p03wlUo8u+aNE8p6bpbHT5TL5iuJJjdKvwJBJO/pKrULPwj4/u&#xA;0Hf3FVDIbb8zLaay166l0q7iTRHEcsNA0r1VmPIL8MfEJ8VW2+e2NJUdC84aJp1n5a0yw0m4tbfW&#xA;aGEEN6cRlBk/vX/vSS1dux+jFUe35hWAM0S2kz3R1CXTNPt1KVupIaepIjEhVjQn4mPT57Y0qUn8&#xA;37OPQ4tVudJuUV71rFvTIliHAjlIswAV61PELuSD23xpUwl/MOaKK0hk0W4i1i/klWx0qaSGKR44&#xA;QD6jM7ALyBoq7knb3xpVt35i0m+866VpNzo1ydUtoJL22lmoixM0W6qORRzsU5fZDdDiqW6L+Ymt&#xA;S/p/Vr7TZ5dHspnt7WO2WJzEbVGaXmVbkxaoJavAU236tKyDTvO9rfzaBDBayNJrltJdniVYW6Rq&#xA;CTJ02LtwB8cConWPNEdlqtvo1nbPf6xcxNOlqjLGqRJt6ksjbKpIoNjvirB/Nv5hXGs/l6s+k2st&#xA;vPqtyNMkbmlYZSwLRg1DN6iVoQOnWmGkM80vSNItNHcNpcNhHLCFvYCkRLJGpUes0YKv8PzwJeef&#xA;lvqt/oOoWui6x/xyvM0K32jO26pJKKm3Jb+ZSNvGn82EoTXy1eaHoFpLf29p62oa/qV5FpVrFxDt&#xA;BFMyKoLUWOJVj5segr8sVRVt+a1vJptpeTaTcxG61AacCpDwAlgvqC4oEcfaoF7j6caSmV1+YmjQ&#xA;nzEEUyny4kZuKMoEkknIemle6uvE++NKnlxaWutaMbe+t2WC9hHq28lOacwGoetHQ9+xGBXknlqA&#xA;XWhXvkq8jWA6VezS69qpFOFpA3NXWQ/7skoUU9kBwoZfpPnjTbT9B2dpo8tpoWryNbaXdckBLBqK&#xA;zQ7sFkJryZqnqRilW038yjqetzaVY6JeyPb3McFzKwCCGJ9jLKD9ih/YPxUr06Y0rGfIWu21rqPm&#xA;OfSdPfUL/UtRkMFja8I1jtIH4pLIzFURSZWp4kfTihkc2heZ7j8xrXzDNaW4060gazhQXBMgV2bl&#xA;MR6dK8XPw1+nFKP1fy1f6l560XVpBGdK0iGZgrmrG4mBX4Vofs8VauBWH3P5b+cLvyvrdrPJaC+1&#xA;LUTqKwguS557o8uygU+yAvzPgbQzryppup2Vu4urOy02FwPTsLIF6PvyklmITmzf6v0nAlLdQs/O&#xA;bLrWm/VbfUtP1IyfUbiacp6CTIEMcsZRiVQ/EOP+0VStfy71q0k8pW1jdQm20CO5ae4mUt+/noeS&#xA;RgitGJK1NBTfwLaoHU/y985Tr5tWC5gSLWp1lh4swllVW+GORyKJGquagbkin2eqhMZfJPmp7vyn&#xA;/pFmkWgQSxyOquyqzIsUZRCQZGVVBBJAqK07YpUrHyR5jsvNmsX0drYXEeoXIubTVLotJJbVrXhB&#xA;T4nHKg+Jfn2xQznWtOOp6Lf6bz9M3ttLb+pSvH1YynKntywJYfo2j+foPLUflaaG0tYoozatrMc7&#xA;O3oGorFB6an1OBoCzDxwqj7jyfPJ5t8v3MaRjQvL9o8dtGzEv6zL6a0WlPgVFNTirH4fIvnL/CHm&#xA;HT5HtBqGvXhuKhnqollUymSSlKcF2VV+ntiqaeYPI+sahpvlmyguo4Z9InUzXsIMfpRJGVHpIxer&#xA;DioFe++2KofzV5CvX1Xy/c6PZW17pulRSW8mmXUhjQrIKcyaNWtatsa9wcVR+reVNc1Kby1Hcm0F&#xA;ppl2b2+hhUxxL6QHoRRIQeQFSKmn0dMVQ/5heUdd8zXEVnHb2X1FQrW+ps0iXdrIGBkYAVWRWUUC&#xA;7b9T0xVE2nlbzBF58uteaeFrOOyjsbP1uUkzqqBmLU4hKzVJO9d9t8VQGgaPc+UPIF9D5ku4Fjlj&#xA;mLpEpJ9SflsXP947cgoAXt364qmX5a+VbnRdBt5dS+LVZYUjcEf3EK1ZIF8KFizf5RPgMSqlf+Xf&#xA;M1v57udf0pbeaK+0/wCpcp5GjNvIpDK/EI/NfhGw6+2KpLceUItNufJXla3kNwIbyXVb+Y7c2tgH&#xA;LstTQMz8F/28UM283Qa1daBeWWkRRvd3cTwB5ZDGsYkUqX2VqkV2GBKTeYvJs2u+SrbT3iWy1fT0&#xA;R9OaN+QimgHFAJAEPFwN9tvowqkepfl7rKt5VmgtLXUl0mzNtfWN1IUjaR0+OTkA/IcySRQ/TjaE&#xA;681+Utb1nypaaWsltFfRXcM3KBDHDBGjH+6U15emp9uXgOmKULYflqlv5vkvA3HQUgtiLXlVri5t&#xA;68Wm/m4t+8P8zUPjjas5uHmSB2gjEsyqTHGW4Bm7AtRqfdgV53pnkfzPJpvm211FLe3ufMTyTxXE&#xA;UzOFZiSkLLwU8RyI5V6dsKo7RPJus3D+W5NdWC3h8tQCO3tYHMpmnVFjWZ2IUKAEBCiu/ftiqN8q&#xA;eXda0fStcnnETa3qt1c3qcGqoaRf3SMxA6N9ArirGtC/LjzN5bn0S/0ZrU34gltdcErP6TiSQyLJ&#xA;txZ+FQO32Rir1LArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSPXv8AC36V0n9M8frn&#xA;qn9Fer6npevtSn+6vU6ceXxeGKp5irsVSDQf8IfpfVP0T6f6V9Z/0lXn63Pn8X958XDn/L8NcVT/&#xA;ABV2KuxV2KuxV2KuxV2KuxV2Kv8A/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:3851B12892F211DEA587F4C8D3C17A8D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3851B12992F211DEA587F4C8D3C17A8D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.000000</stDim:w>
            <stDim:h>2.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 2935</rdf:li>
               <rdf:li>PANTONE Cool Gray 9 CVC</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=45 Y=60 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=20 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>19.999998</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=40 Y=15 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>14.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=100 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=40 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=90 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=0</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>0</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=25</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>63</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=75</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>191</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 2935</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>52.999996</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE Cool Gray 9 CVC</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>65.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -58.2261 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 58.2261 li
152.291 58.2261 li
152.291 0 li
cp
clp
[1 0 0 1 0 0 ]ct
91.002 24.9165 mo
76.8799 24.9165 li
76.8799 19.1289 li
91.002 19.1323 li
92.8501 19.1323 94.9082 19.6675 94.9082 22.4746 cv
94.9082 24.7271 92.1143 24.9165 91.002 24.9165 cv
cp
76.8799 11.186 mo
81.1294 11.186 li
81.1294 12.5425 li
81.1294 14.209 80.0898 16.5034 76.8799 16.5034 cv
76.8799 11.186 li
cp
86.2197 12.2056 mo
86.2197 11.186 li
90.8184 11.186 li
93.1064 11.186 94.6748 11.7739 94.6748 13.8691 cv
94.6748 15.7295 92.6724 16.7397 90.8184 16.519 cv
83.9951 16.519 li
85.5435 15.3613 86.2197 13.6294 86.2197 12.2056 cv
cp
97.0439 17.7227 mo
97.0439 17.6694 li
99.1836 17.2734 101.165 15.8472 101.165 13.4966 cv
101.165 10.1416 98.1533 8.53076 94.561 8.50391 cv
86.2197 8.42871 li
86.2197 3.62158 li
86.2197 2.87549 86.5137 2.4458 87.2603 2.4458 cv
90.2495 2.4458 li
90.2495 0 li
76.7007 0 li
76.7007 2.4458 li
80.0889 2.4458 li
80.835 2.4458 81.1294 2.87549 81.1294 3.62158 cv
81.1294 8.42871 li
63.8525 8.42871 li
63.8525 11.0483 li
67.2886 11.0483 li
68.0405 11.0483 68.3364 12.1436 68.3364 12.8955 cv
68.3364 16.8286 li
61.8994 16.8286 61.0718 13.6133 61.0718 10.8799 cv
61.0718 3.62158 li
61.0718 2.87549 61.8628 2.4458 62.6094 2.4458 cv
65.3125 2.4458 li
65.3125 0 li
48.0615 0 li
48.0615 2.4458 li
51.3594 2.4458 li
52.1055 2.4458 52.3999 2.87549 52.3999 3.62158 cv
52.3999 10.7637 li
52.3999 16.6494 58.4956 18.9517 68.3364 18.9517 cv
68.3364 23.8691 li
68.3364 24.6436 67.8809 25.0537 67.1519 25.0537 cv
64.1836 25.0537 li
64.1836 27.5083 li
94.376 27.5747 li
94.561 27.5747 101.64 27.9448 101.64 22.3979 cv
101.64 19.6772 99.5796 18.0659 97.0439 17.7227 cv
cp
false sop
/0 
<<
/Name (PANTONE 2935)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 0.53 0 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
21.3999 40.1685 mo
21.3999 40.8301 21.5894 41.3311 22.2275 41.3311 cv
22.9253 41.3311 23.0747 40.8599 23.0747 40.1782 cv
23.0747 36.0186 li
25.6968 36.0186 li
25.6968 40.1284 li
25.6968 42.3892 24.3057 43.1279 22.1978 43.1279 cv
20.248 43.1279 18.7153 42.3296 18.7153 40.2686 cv
18.7153 36.0186 li
21.3999 36.0186 li
21.3999 40.1685 li
cp
f
26.6582 37.7998 mo
29.0342 37.7998 li
29.0342 38.6904 li
29.0542 38.6904 li
29.354 37.9604 30.0444 37.6704 30.7534 37.6763 cv
32.0908 37.6763 32.5801 38.377 32.5801 39.3896 cv
32.5801 43.0029 li
30.0645 43.0029 li
30.0645 40.0088 li
30.0645 39.709 30.0645 39.2998 29.624 39.2998 cv
29.1738 39.2998 29.1738 39.709 29.1738 40.0088 cv
29.1738 43.0029 li
26.6582 43.0029 li
26.6582 37.7998 li
cp
f
36.0552 37.2373 mo
33.5396 37.2373 li
33.5396 35.5029 li
36.0552 35.5029 li
36.0552 37.2373 li
cp
33.5396 37.7998 mo
36.0552 37.7998 li
36.0552 43.0029 li
33.5396 43.0029 li
33.5396 37.7998 li
cp
f
42.8892 37.7998 mo
41.3096 43.0029 li
38.0791 43.0029 li
36.5293 37.7998 li
39.1094 37.7998 li
39.7593 41.2061 li
39.7793 41.2061 li
40.4277 37.7998 li
42.8892 37.7998 li
cp
f
48.9985 41.0029 mo
48.9985 40.6948 li
48.9985 38.9365 48.2866 37.6763 46.2622 37.6763 cv
44.1504 37.6763 43.0313 38.5562 43.0313 40.3071 cv
43.0313 42.1138 44.1504 43.1279 46.2622 43.1279 cv
47.1445 43.1279 47.9463 43.0386 48.6177 42.8296 cv
48.6177 41.4805 li
48.2168 41.6934 47.5952 41.8154 46.9043 41.8154 cv
46.1616 41.8154 45.5498 41.6631 45.5098 41.0029 cv
48.9985 41.0029 li
cp
45.5 39.9092 mo
45.4697 39.498 45.6001 38.8765 46.1821 38.8765 cv
46.7534 38.8765 46.814 39.5083 46.814 39.9092 cv
45.5 39.9092 li
cp
f
52.0151 37.7998 mo
52.0142 38.9761 li
52.0342 38.9761 li
52.334 38.2358 52.834 37.6763 53.624 37.6763 cv
53.7739 37.6763 53.9341 37.6963 54.0342 37.7261 cv
54.0342 39.8174 li
53.9141 39.7671 53.6943 39.7373 53.4648 39.7373 cv
52.7646 39.7373 52.1748 40.3472 52.1748 41.1152 cv
52.1748 43.0029 li
49.6592 43.0029 li
49.6592 37.7998 li
52.0151 37.7998 li
cp
f
54.481 41.3398 mo
54.96 41.6333 55.6792 41.8154 56.3281 41.8154 cv
56.749 41.8154 57.2529 41.7344 57.2529 41.4717 cv
57.2529 40.8262 54.3311 41.4512 54.3311 39.4316 cv
54.3311 37.9336 56.0186 37.6748 57.2627 37.6748 cv
57.8921 37.6748 58.521 37.7642 59.1401 37.8936 cv
59.1401 39.29 li
58.6108 39.1084 58.0718 38.9873 57.5024 38.9873 cv
57.0713 38.9873 56.6279 39.0278 56.6279 39.3511 cv
56.6279 39.8945 59.5498 39.27 59.5498 41.2388 cv
59.5498 42.73 57.8521 43.1279 56.6582 43.1279 cv
55.9287 43.1279 55.1899 43.0088 54.481 42.8296 cv
54.481 41.3398 li
cp
f
62.7349 37.2373 mo
60.2192 37.2373 li
60.2192 35.5029 li
62.7349 35.5029 li
62.7349 37.2373 li
cp
60.2192 37.7998 mo
62.7349 37.7998 li
62.7349 43.0029 li
60.2192 43.0029 li
60.2192 37.7998 li
cp
f
64.1299 37.7998 mo
64.1299 36.5996 li
66.645 35.8296 li
66.645 37.7998 li
67.7852 37.7998 li
67.7852 39.2998 li
66.645 39.2998 li
66.645 40.7642 li
66.645 41.2026 66.8652 41.4419 67.1953 41.4419 cv
67.4253 41.4419 67.6055 41.4121 67.7852 41.3521 cv
67.7852 42.8579 li
67.2354 43.0181 66.6753 43.1279 66.0562 43.1279 cv
64.7588 43.1279 64.1299 42.478 64.1299 41.0991 cv
64.1299 39.2998 li
63.2397 39.2998 li
63.2397 37.7998 li
64.1299 37.7998 li
cp
f
70.3511 37.7998 mo
71 40.9946 li
71.02 40.9946 li
71.6392 37.7998 li
74.0566 37.7998 li
72.6782 42.1528 li
72.1787 43.7905 71.7095 45.2202 69.7417 45.2202 cv
69.0825 45.2202 68.583 45.1206 68.0938 45.0405 cv
68.0938 43.5605 li
68.2935 43.6206 68.4932 43.6606 68.8428 43.6606 cv
69.3423 43.6606 69.6318 43.4409 69.6318 43.1714 cv
69.6318 42.7817 69.2524 42.0229 69.0723 41.4438 cv
67.7441 37.7998 li
70.3511 37.7998 li
cp
f
78.4346 39.4331 mo
78.9336 39.1797 79.5728 38.9873 80.1724 38.9873 cv
80.8047 38.9873 81.4971 39.0684 81.5068 39.7466 cv
81.2764 39.7266 80.8745 39.6763 80.5234 39.6763 cv
79.2729 39.6763 77.835 39.9976 77.835 41.5928 cv
77.835 42.6904 78.7739 43.1279 79.7427 43.1279 cv
80.457 43.1216 81.0972 42.8413 81.4473 42.2515 cv
81.4668 42.2515 li
81.4668 43.0015 li
83.8037 43.0015 li
83.8037 39.8369 li
83.8037 37.9336 82.0562 37.6748 80.6138 37.6748 cv
79.6328 37.6748 79.1831 37.7642 78.4346 37.9731 cv
78.4346 39.4331 li
cp
81.5068 40.8789 mo
81.5068 41.3252 81.2461 41.8013 80.7241 41.8013 cv
80.3325 41.8013 80.1318 41.6626 80.1318 41.3052 cv
80.1318 40.77 80.7344 40.7202 81.2559 40.7202 cv
81.5068 40.7202 li
81.5068 40.8789 li
cp
f
85.0493 37.7998 mo
85.0493 36.5996 li
87.5649 35.8296 li
87.5649 37.7998 li
88.7051 37.7998 li
88.7051 39.2998 li
87.5649 39.2998 li
87.5649 40.7642 li
87.5649 41.2026 87.7852 41.4419 88.1152 41.4419 cv
88.3452 41.4419 88.5249 41.4121 88.7051 41.3521 cv
88.7051 42.8579 li
88.1553 43.0181 87.5952 43.1279 86.9761 43.1279 cv
85.6782 43.1279 85.0493 42.478 85.0493 41.0991 cv
85.0493 39.2998 li
84.1597 39.2998 li
84.1597 37.7998 li
85.0493 37.7998 li
cp
f
95.5044 37.3311 mo
96.2378 37.3311 li
96.7202 37.3311 97.1621 37.4922 97.1621 38.0156 cv
97.1621 38.5493 96.6499 38.6904 96.1777 38.6904 cv
95.5044 38.6904 li
95.5044 37.3311 li
cp
92.9888 43.0029 mo
97.0347 43.0029 li
98.4868 43.0029 99.9092 42.8232 99.9092 41.063 cv
99.9092 40.3594 99.3081 39.5986 98.3364 39.4692 cv
98.3364 39.4492 li
99.2739 39.2095 99.7842 38.7002 99.7842 37.7339 cv
99.7842 36.4063 98.5933 36.0186 97.3823 36.0186 cv
92.9888 36.0186 li
92.9888 43.0029 li
cp
95.5044 40.1279 mo
96.2246 40.1279 li
96.7246 40.1279 97.2246 40.2388 97.2246 40.8418 cv
97.2246 41.3843 96.6943 41.5654 96.2046 41.5654 cv
95.5044 41.5654 li
95.5044 40.1279 li
cp
f
106.659 43.0029 mo
104.284 43.0029 li
104.284 42.0967 li
104.264 42.0967 li
103.964 42.8267 103.273 43.1167 102.564 43.1265 cv
101.227 43.1265 100.737 42.4258 100.737 41.4131 cv
100.737 37.7998 li
103.253 37.7998 li
103.253 40.7944 li
103.253 41.0938 103.253 41.5029 103.693 41.5029 cv
104.144 41.5029 104.144 41.0938 104.144 40.7944 cv
104.144 37.7998 li
106.659 37.7998 li
106.659 43.0029 li
cp
f
108.042 39.2998 mo
107.122 39.2998 li
107.122 37.7998 li
108.042 37.7998 li
108.042 37.354 li
108.072 35.958 108.993 35.3779 110.294 35.3779 cv
110.884 35.3779 111.504 35.4678 111.854 35.564 cv
111.854 36.9487 li
111.734 36.9185 111.624 36.8779 111.304 36.8779 cv
110.984 36.8779 110.664 37.1006 110.664 37.5264 cv
110.664 37.7998 li
111.734 37.7998 li
111.734 39.2998 li
110.664 39.2998 li
110.664 43.0029 li
108.042 43.0029 li
108.042 39.2998 li
cp
f
112.494 39.2998 mo
111.574 39.2998 li
111.574 37.7998 li
112.494 37.7998 li
112.494 37.354 li
112.524 35.958 113.444 35.3779 114.746 35.3779 cv
115.336 35.3779 115.956 35.4678 116.306 35.564 cv
116.306 36.9487 li
116.186 36.9185 116.076 36.8779 115.756 36.8779 cv
115.436 36.8779 115.116 37.1006 115.116 37.5264 cv
115.116 37.7998 li
116.186 37.7998 li
116.186 39.2998 li
115.116 39.2998 li
115.116 43.0029 li
112.494 43.0029 li
112.494 39.2998 li
cp
f
116.956 39.4331 mo
117.455 39.1797 118.094 38.9873 118.694 38.9873 cv
119.326 38.9873 120.019 39.0684 120.028 39.7466 cv
119.798 39.7266 119.396 39.6763 119.045 39.6763 cv
117.795 39.6763 116.357 39.9976 116.357 41.5928 cv
116.357 42.6904 117.295 43.1279 118.264 43.1279 cv
118.979 43.1216 119.619 42.8413 119.969 42.2515 cv
119.989 42.2515 li
119.988 43.0015 li
122.325 43.0015 li
122.325 39.8369 li
122.325 37.9336 120.578 37.6748 119.135 37.6748 cv
118.154 37.6748 117.705 37.7642 116.956 37.9731 cv
116.956 39.4331 li
cp
120.028 40.8789 mo
120.028 41.3252 119.768 41.8013 119.246 41.8013 cv
118.854 41.8013 118.653 41.6626 118.653 41.3052 cv
118.653 40.77 119.256 40.7202 119.778 40.7202 cv
120.028 40.7202 li
120.028 40.8789 li
cp
f
125.696 35.5029 mo
125.696 43.0029 li
123.181 43.0029 li
123.181 35.5029 li
125.696 35.5029 li
cp
f
126.389 40.3062 mo
126.389 42.1079 127.511 43.1279 129.617 43.1279 cv
131.713 43.1279 132.855 42.1079 132.855 40.3062 cv
132.855 38.5547 131.713 37.6748 129.617 37.6748 cv
127.511 37.6748 126.389 38.5547 126.389 40.3062 cv
cp
129.074 40.3062 mo
129.074 39.6855 129.133 39.1748 129.617 39.1748 cv
130.102 39.1748 130.17 39.6855 130.17 40.3062 cv
130.17 41.0674 130.102 41.6279 129.617 41.6279 cv
129.133 41.6279 129.074 41.0674 129.074 40.3062 cv
cp
f
6.08398 47.7886 mo
6.38672 47.7886 6.45654 47.7188 6.68896 47.4961 cv
6.8877 47.4961 li
6.80615 47.9878 6.70068 48.8774 6.60693 49.6147 cv
6.24756 49.6499 li
6.23584 49.041 6.17773 48.7368 6.03711 48.5381 cv
5.87354 48.3271 5.51074 48.2568 4.80859 48.2568 cv
4.2002 48.2568 li
3.15918 53.6533 li
2.91309 54.9175 2.99512 54.9995 4.10645 55.0698 cv
4.04834 55.3975 li
0.468262 55.3975 li
0.526367 55.0698 li
1.55615 54.9995 1.66162 54.9175 1.90723 53.6533 cv
2.95996 48.2568 li
2.55078 48.2568 li
1.55615 48.2568 1.20508 48.3975 0.994629 48.6079 cv
0.818848 48.7837 0.620117 49.1113 0.362793 49.6499 cv
0 49.6499 li
0.19873 48.8774 0.421387 48.0928 0.561523 47.4961 cv
0.760742 47.4961 li
0.877441 47.7651 0.994629 47.7886 1.31055 47.7886 cv
6.08398 47.7886 li
cp
/1 
<<
/Name (PANTONE Cool Gray 9 CVC)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 0.65 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
6.66309 55.5386 mo
6.78027 54.9414 6.90918 54.3682 7.02588 53.7715 cv
8.09082 48.3921 li
8.18408 47.9248 8.17236 47.8662 7.7749 47.8662 cv
7.21338 47.8662 li
7.21338 47.5854 li
8.17236 47.3828 9.24414 47.0854 9.3374 47.0854 cv
9.47754 47.0854 9.50098 47.2876 9.43066 47.644 cv
8.49854 52.0513 li
8.52197 52.0513 li
9.32568 51.1387 10.1152 50.5889 10.6226 50.3545 cv
10.8569 50.2378 11.0908 50.1792 11.2661 50.1792 cv
11.5352 50.1792 11.9565 50.3193 11.7227 51.396 cv
11.5352 52.2617 11.313 53.2446 11.1021 54.2158 cv
11.0317 54.5205 11.0088 54.6255 11.1138 54.6255 cv
11.2075 54.6255 11.6289 54.3799 11.9331 54.1343 cv
12.085 54.4268 li
11.4531 55.0352 10.436 55.5386 10.1675 55.5386 cv
9.85205 55.5386 9.69629 55.269 9.86377 54.5674 cv
10.4932 51.8291 li
10.6108 51.3257 10.6343 51.0449 10.3633 51.0449 cv
9.92627 51.0449 8.81299 52.145 8.34717 52.9521 cv
8.27734 53.2798 7.98535 54.5674 7.91504 55.2222 cv
6.66309 55.5386 li
cp
f
16.6138 53.9141 mo
15.9478 54.5229 15.3374 54.7568 14.8794 54.7568 cv
14.1865 54.7568 14.0225 54.0664 14.0225 53.5161 cv
14.0225 53.4575 14.0342 53.3521 14.0454 53.2817 cv
15.1611 52.9307 17.1631 52.1929 17.1631 51.1157 cv
17.1631 50.5889 16.7539 50.1792 16.0298 50.1792 cv
15.3726 50.1792 14.668 50.542 14.1631 50.9053 cv
13.312 51.5254 12.7881 52.7549 12.7881 53.832 cv
12.7881 55.2002 13.5796 55.5386 14.1279 55.5386 cv
14.6328 55.5386 15.6543 55.3633 16.8125 54.1948 cv
16.6138 53.9141 li
cp
15.5137 50.6943 mo
15.6895 50.6943 16.0063 50.8115 16.0063 51.2446 cv
16.0063 51.9004 15.5015 52.4038 14.0928 52.8838 cv
14.2925 51.5605 14.7974 51.0103 15.126 50.8232 cv
15.2432 50.7529 15.3843 50.6943 15.5137 50.6943 cv
cp
f
20.3735 53.1016 mo
20.4795 53.7681 21.0425 55.1011 22.2007 55.1011 cv
23.1948 55.1011 23.6392 54.3765 23.6392 53.6396 cv
23.6392 52.9146 23.2417 52.4468 22.6099 52.0493 cv
22.3301 51.8735 li
21.6509 51.4409 20.937 50.8447 20.937 49.9092 cv
20.937 48.4941 22.1426 47.6167 23.5371 47.6167 cv
23.9126 47.6167 24.2993 47.6636 24.7212 47.8276 cv
24.9307 47.9092 25.0698 47.9678 25.186 48.0229 cv
25.1509 48.5249 25.1509 48.9922 25.1392 49.6401 cv
24.7798 49.6753 li
24.6978 49.0439 24.4634 48.085 23.3472 48.085 cv
22.4814 48.085 22.0605 48.6812 22.0605 49.3945 cv
22.0605 50.0146 22.5049 50.4004 23.0781 50.7744 cv
23.4756 51.0317 li
24.2349 51.5229 24.8423 52.1309 24.8423 53.0898 cv
24.8423 54.6099 23.5459 55.5693 22.084 55.5693 cv
21.1245 55.5693 20.2695 55.1714 20.0605 54.832 cv
20.0493 54.5752 20.0376 53.9434 20.0142 53.1367 cv
20.3735 53.1016 li
cp
f
28.4395 48.9053 mo
28.0537 50.4614 li
29.4927 50.4614 li
29.1182 50.8828 li
27.9482 50.9414 li
27.2813 53.9941 li
27.188 54.439 27.2344 54.6377 27.3516 54.6377 cv
27.562 54.6377 28.1118 54.1816 28.4043 53.9009 cv
28.4277 53.9243 li
28.6035 54.1465 li
28.229 54.6143 27.1064 55.5386 26.5244 55.5386 cv
26.1636 55.5386 25.9067 55.1289 26.1401 54.041 cv
26.8037 50.9414 li
25.9185 50.9414 li
25.8247 50.7891 li
26.1748 50.4614 li
26.9087 50.4614 li
27.1182 49.5957 li
28.2876 48.7886 li
28.4395 48.9053 li
cp
f
32.6167 53.4409 mo
32.3706 54.6479 li
32.2183 55.4097 32.5112 55.5386 32.6753 55.5386 cv
32.8984 55.5386 33.9297 55.0347 34.5845 54.4253 cv
34.4443 54.1323 li
34.1284 54.3784 33.707 54.624 33.5903 54.624 cv
33.4966 54.624 33.5083 54.519 33.5669 54.2144 cv
33.8125 52.8901 34.105 51.5542 34.3623 50.3408 cv
34.105 50.3291 33.918 50.3174 33.6953 50.2715 cv
33.4146 50.2139 33.1914 50.1792 33.0273 50.1792 cv
32.1362 50.1792 31.106 50.6641 30.5908 51.1675 cv
29.9355 51.8003 29.3037 53.1011 29.3037 54.249 cv
29.3037 55.269 29.7363 55.5386 30.0293 55.5386 cv
30.2749 55.5386 30.9536 55.1279 31.1997 54.9175 cv
31.6445 54.5542 32.1948 53.9917 32.5933 53.4409 cv
32.6167 53.4409 li
cp
32.4526 50.7104 mo
32.7344 50.7104 32.9336 50.7456 33.1094 50.8276 cv
33.0742 51.2378 32.7813 52.4448 32.6636 52.7026 cv
32.4175 53.1128 32.019 53.605 31.6797 53.98 cv
31.2813 54.4019 30.9302 54.6362 30.8247 54.6362 cv
30.6729 54.6362 30.5674 54.4365 30.5674 54.0386 cv
30.5674 53.5112 30.7075 52.7261 31.0005 52.0464 cv
31.3281 51.2729 31.6563 50.9917 31.9487 50.8276 cv
32.1245 50.7339 32.312 50.7104 32.4526 50.7104 cv
cp
f
37.9282 48.9053 mo
37.542 50.4614 li
38.981 50.4614 li
38.6064 50.8828 li
37.4365 50.9414 li
36.7695 53.9941 li
36.6763 54.439 36.7231 54.6377 36.8398 54.6377 cv
37.0508 54.6377 37.6006 54.1816 37.8931 53.9009 cv
37.9165 53.9243 li
38.0918 54.1465 li
37.7173 54.6143 36.5947 55.5386 36.0127 55.5386 cv
35.6519 55.5386 35.395 55.1289 35.6284 54.041 cv
36.292 50.9414 li
35.4067 50.9414 li
35.313 50.7891 li
35.6636 50.4614 li
36.397 50.4614 li
36.6064 49.5957 li
37.7759 48.7886 li
37.9282 48.9053 li
cp
f
42.6611 53.9141 mo
41.9946 54.5229 41.3843 54.7568 40.9263 54.7568 cv
40.2334 54.7568 40.0693 54.0664 40.0693 53.5161 cv
40.0693 53.4575 40.0811 53.3521 40.0928 53.2817 cv
41.208 52.9307 43.21 52.1929 43.21 51.1157 cv
43.21 50.5889 42.8013 50.1792 42.0771 50.1792 cv
41.4194 50.1792 40.7148 50.542 40.21 50.9053 cv
39.3589 51.5254 38.835 52.7549 38.835 53.832 cv
38.835 55.2002 39.627 55.5386 40.1748 55.5386 cv
40.6797 55.5386 41.7012 55.3633 42.8594 54.1948 cv
42.6611 53.9141 li
cp
41.5605 50.6943 mo
41.7363 50.6943 42.0537 50.8115 42.0537 51.2446 cv
42.0537 51.9004 41.5488 52.4038 40.1396 52.8838 cv
40.3394 51.5605 40.8442 51.0103 41.1729 50.8232 cv
41.2905 50.7529 41.4312 50.6943 41.5605 50.6943 cv
cp
f
50.1782 47.7886 mo
50.1079 48.1162 li
49.2305 48.1865 49.1133 48.2686 48.8794 49.5337 cv
48.4111 51.9932 li
48.0244 54.0073 48.6104 54.8979 49.8975 54.8979 cv
51.2075 54.8979 52.0732 53.8438 52.4829 51.6533 cv
52.6235 50.9507 li
52.8574 49.7207 52.9277 49.0767 52.939 48.7139 cv
52.9624 48.3037 52.6816 48.1514 51.8979 48.1162 cv
51.9683 47.7886 li
54.8579 47.7886 li
54.7993 48.1162 li
54.2026 48.1396 53.8516 48.3037 53.7231 48.7139 cv
53.606 49.0767 53.4424 49.7207 53.208 50.9507 cv
53.0327 51.8643 li
52.8223 52.9771 52.436 54.0313 51.6641 54.7339 cv
51.0908 55.2568 50.2134 55.5693 49.5229 55.5693 cv
48.8794 55.5693 48.1064 55.4072 47.6025 54.9438 cv
47.0747 54.4409 46.8638 53.5742 47.1333 52.1572 cv
47.626 49.5337 li
47.8721 48.2686 47.79 48.1865 46.8638 48.1162 cv
46.9224 47.7886 li
50.1782 47.7886 li
cp
f
54.1064 51.3726 mo
54.7852 50.729 55.6509 50.1792 56.0371 50.1792 cv
56.4229 50.1792 56.4346 50.5889 56.2827 51.2441 cv
56.084 52.0981 li
56.1191 52.0981 li
56.9111 51.1387 57.7129 50.5889 58.1313 50.3896 cv
58.4458 50.2378 58.6553 50.1792 58.8301 50.1792 cv
59.0859 50.1792 59.541 50.3193 59.2256 51.6533 cv
59.0742 52.2617 58.8418 53.2446 58.6235 54.2046 cv
58.5532 54.5205 58.5298 54.6255 58.6118 54.6255 cv
58.7168 54.6255 59.1382 54.3799 59.4541 54.1343 cv
59.6064 54.4268 li
58.9629 55.0352 57.9458 55.5386 57.7002 55.5386 cv
57.3501 55.5386 57.2104 55.269 57.3853 54.5674 cv
58.0498 51.8291 li
58.1665 51.3257 58.2129 51.0449 57.9341 51.0449 cv
57.5386 51.0449 56.353 52.2036 55.897 53.0107 cv
55.8149 53.2798 55.5342 54.5674 55.4639 55.2222 cv
55.4521 55.2222 li
54.1885 55.5386 li
54.3643 54.8945 54.5044 54.2627 54.645 53.6191 cv
55.0659 51.7002 li
55.1597 51.2793 55.1948 51.1152 55.1011 51.1152 cv
54.9844 51.1152 54.5396 51.396 54.2588 51.665 cv
54.1064 51.3726 li
cp
f
63.1704 48.001 mo
63.1704 48.4116 62.8423 48.7866 62.373 48.7866 cv
61.9858 48.7866 61.7632 48.564 61.7515 48.2007 cv
61.7515 47.8721 62.0098 47.415 62.5488 47.415 cv
62.9595 47.415 63.1704 47.708 63.1704 48.001 cv
cp
60.373 51.3726 mo
61.0752 50.729 61.9971 50.1792 62.4395 50.1792 cv
62.8477 50.1792 62.8125 50.5889 62.6841 51.127 cv
61.9209 54.2275 li
61.8506 54.4971 61.8506 54.6021 61.9326 54.6021 cv
62.0264 54.6021 62.4707 54.333 62.8218 54.064 cv
62.9854 54.3447 li
62.4238 54.8716 61.3242 55.5386 60.9849 55.5386 cv
60.7158 55.5386 60.5054 55.3394 60.6689 54.6489 cv
61.3906 51.6533 li
61.4961 51.2207 61.5078 51.127 61.4258 51.127 cv
61.3091 51.127 60.8057 51.4194 60.5249 51.665 cv
60.373 51.3726 li
cp
f
63.4243 51.4546 mo
63.9272 50.8931 64.7461 50.1792 65.2002 50.1792 cv
65.5371 50.1792 65.6187 50.6006 65.6768 51.396 cv
65.7231 52.0981 65.7813 53.3032 65.7813 54.1577 cv
65.8047 54.1577 li
66.1909 53.6543 66.4482 53.2915 66.7524 52.8472 cv
67.1621 52.2505 67.4546 51.7471 67.4546 51.314 cv
67.4546 51.0332 67.3257 50.8462 67.3257 50.7642 cv
67.314 50.4834 67.6187 50.1792 67.9707 50.1792 cv
68.2993 50.1792 68.5454 50.4248 68.5454 50.8228 cv
68.5454 51.1738 68.3462 51.478 67.6895 52.332 cv
66.9634 53.2681 65.9688 54.6724 65.2349 55.5386 cv
64.7813 55.5386 li
64.7578 54.5791 64.6528 52.3789 64.5825 51.9346 cv
64.5356 51.4546 64.5122 51.1621 64.3721 51.1621 cv
64.2432 51.1621 63.9858 51.3374 63.5527 51.7119 cv
63.4243 51.4546 li
cp
f
72.604 53.9141 mo
71.9375 54.5229 71.3271 54.7568 70.8691 54.7568 cv
70.1763 54.7568 70.0122 54.0664 70.0122 53.5161 cv
70.0122 53.4575 70.0239 53.3521 70.0356 53.2817 cv
71.1509 52.9307 73.1528 52.1929 73.1528 51.1157 cv
73.1528 50.5889 72.7441 50.1792 72.02 50.1792 cv
71.3623 50.1792 70.6577 50.542 70.1528 50.9053 cv
69.3018 51.5254 68.7778 52.7549 68.7778 53.832 cv
68.7778 55.2002 69.5693 55.5386 70.1177 55.5386 cv
70.6226 55.5386 71.644 55.3633 72.8022 54.1948 cv
72.604 53.9141 li
cp
71.5034 50.6943 mo
71.6797 50.6943 71.9966 50.8115 71.9966 51.2446 cv
71.9966 51.9004 71.4917 52.4038 70.0825 52.8838 cv
70.2822 51.5605 70.7871 51.0103 71.1157 50.8232 cv
71.2334 50.7529 71.374 50.6943 71.5034 50.6943 cv
cp
f
73.6411 51.3735 mo
74.3198 50.73 75.1265 50.1802 75.5234 50.1802 cv
75.8271 50.1802 75.8389 50.5894 75.7451 50.999 cv
75.5352 51.8882 li
75.5703 51.8882 li
76.1313 50.8818 76.7983 50.1802 77.1377 50.1802 cv
77.395 50.1802 77.6523 50.2969 77.769 50.4961 cv
77.8628 50.6479 77.8276 50.8818 77.7344 51.0342 cv
77.6055 51.2446 77.5 51.3384 77.3833 51.4204 cv
77.2661 51.502 77.1489 51.5137 77.0322 51.4116 cv
76.915 51.3179 76.7632 51.2715 76.6577 51.2715 cv
76.5405 51.2715 76.3652 51.3062 76.1079 51.6572 cv
75.8271 52.0195 75.6284 52.4053 75.4766 52.8828 cv
75.2432 53.9941 75.0913 54.8013 75.0679 55.1992 cv
75.0562 55.1992 li
73.8052 55.5386 li
73.9453 54.9067 74.0859 54.2866 74.2148 53.6431 cv
74.6006 51.7593 li
74.6943 51.2798 74.7061 51.1162 74.624 51.1162 cv
74.519 51.1162 74.0625 51.4204 73.7935 51.666 cv
73.6411 51.3735 li
cp
f
81.3989 50.7847 mo
81.3989 50.9604 81.3052 51.1362 81.1528 51.25 cv
80.9536 51.4019 80.813 51.3901 80.731 51.3008 cv
80.5195 51.0659 80.1914 50.8193 79.8242 50.8193 cv
79.5166 50.8193 79.2212 51.0542 79.2212 51.418 cv
79.2212 51.77 79.6704 52.063 80.0493 52.2744 cv
80.7544 52.6729 81.0947 53.0483 81.0947 53.5527 cv
81.083 54.5381 79.9663 55.5386 78.8379 55.5386 cv
78.3965 55.5386 77.6479 55.2256 77.6362 54.8076 cv
77.6362 54.5732 77.7998 54.3389 77.9756 54.2329 cv
78.1626 54.1157 78.3032 54.1509 78.4199 54.2798 cv
78.8027 54.6904 79.2212 54.8667 79.5522 54.8667 cv
79.8481 54.8667 80.1914 54.6201 80.1914 54.2563 cv
80.1914 53.9868 80.085 53.7285 79.5049 53.3418 cv
79.0005 53.0015 78.3618 52.7314 78.3618 52.063 cv
78.3618 51.7466 78.4312 51.2773 78.9888 50.7847 cv
79.3984 50.4351 79.9312 50.1792 80.4258 50.1792 cv
80.9419 50.1792 81.3989 50.4585 81.3989 50.7847 cv
cp
f
84.7446 48.001 mo
84.7446 48.4116 84.416 48.7866 83.9473 48.7866 cv
83.5601 48.7866 83.3374 48.564 83.3257 48.2007 cv
83.3257 47.8721 83.5835 47.415 84.123 47.415 cv
84.5332 47.415 84.7446 47.708 84.7446 48.001 cv
cp
81.9468 51.3726 mo
82.6489 50.729 83.5708 50.1792 84.0137 50.1792 cv
84.4219 50.1792 84.3867 50.5889 84.2583 51.127 cv
83.4946 54.2275 li
83.4248 54.4971 83.4248 54.6021 83.5063 54.6021 cv
83.6001 54.6021 84.0449 54.333 84.3955 54.064 cv
84.5596 54.3447 li
83.998 54.8716 82.8979 55.5386 82.5586 55.5386 cv
82.2896 55.5386 82.0791 55.3394 82.2432 54.6489 cv
82.9648 51.6533 li
83.0703 51.2207 83.0815 51.127 83 51.127 cv
82.8828 51.127 82.3799 51.4194 82.0991 51.665 cv
81.9468 51.3726 li
cp
f
87.9927 48.9053 mo
87.6064 50.4614 li
89.0454 50.4614 li
88.6709 50.8828 li
87.501 50.9414 li
86.8345 53.9941 li
86.7407 54.439 86.7876 54.6377 86.9043 54.6377 cv
87.1152 54.6377 87.665 54.1816 87.9575 53.9009 cv
87.981 53.9243 li
88.1563 54.1465 li
87.7817 54.6143 86.6592 55.5386 86.0771 55.5386 cv
85.7163 55.5386 85.4595 55.1289 85.6929 54.041 cv
86.3564 50.9414 li
85.4712 50.9414 li
85.3774 50.7891 li
85.728 50.4614 li
86.4614 50.4614 li
86.6709 49.5957 li
87.8403 48.7886 li
87.9927 48.9053 li
cp
f
88.8442 51.4658 mo
89.3589 50.8926 90.1431 50.1792 90.5986 50.1792 cv
90.9136 50.1792 91.0303 50.6001 91.1235 51.4658 cv
91.1821 52.0972 91.2754 53.3721 91.3105 54.2725 cv
91.334 54.2725 li
91.7441 53.688 91.9785 53.3252 92.3184 52.7754 cv
92.6699 52.2026 92.9043 51.7466 92.9043 51.3369 cv
92.9043 51.021 92.7988 50.8691 92.7871 50.7871 cv
92.7754 50.4834 93.0679 50.1792 93.4648 50.1792 cv
93.7451 50.1792 94.002 50.4248 94.0137 50.8457 cv
94.0137 51.1147 93.8032 51.4775 93.4063 52.0151 cv
92.7637 52.9043 91.5918 54.6587 91.0889 55.4189 cv
90.4585 56.3662 89.9907 57.0562 89.3823 57.8516 cv
88.0723 58.2261 li
87.9551 58.0151 li
89.207 56.8809 89.7217 56.3311 90.3418 55.501 cv
90.3535 54.6353 90.0962 52.3779 90.0142 51.9453 cv
89.9321 51.4541 89.9204 51.1616 89.792 51.1616 cv
89.6631 51.1616 89.4058 51.3369 88.9937 51.7114 cv
88.8442 51.4658 li
cp
f
99.8223 50.1792 mo
99.4351 50.1792 98.8721 50.3066 98.356 50.6094 cv
97.5244 51.1011 96.6816 52.144 96.6816 53.7144 cv
96.6816 54.5693 97.0796 55.5386 98.3325 55.5386 cv
98.9189 55.5386 99.7163 55.2012 100.221 54.7451 cv
101.005 54.0542 101.461 52.9058 101.461 51.8628 cv
101.461 50.8901 100.864 50.1792 99.8223 50.1792 cv
cp
99.4233 50.6792 mo
99.8926 50.6792 100.197 51.1011 100.197 51.9683 cv
100.221 53.5151 99.5171 54.8394 99.0713 54.9917 cv
98.9893 55.0151 98.9072 55.0386 98.79 55.0386 cv
98.2505 55.0386 97.9453 54.4644 97.9453 53.5615 cv
97.9453 51.7925 98.708 50.9019 99.0713 50.7495 cv
99.1768 50.7026 99.2944 50.6792 99.4233 50.6792 cv
cp
f
105.858 50.4614 mo
105.589 50.8257 li
104.407 50.9434 li
104.244 51.9717 104.126 52.6968 103.962 53.5264 cv
103.53 55.7944 102.968 56.9282 102.465 57.4658 cv
101.927 58.0391 101.365 58.2261 101.108 58.2261 cv
100.897 58.2261 100.605 58.1206 100.605 57.8516 cv
100.605 57.6528 100.722 57.4312 100.827 57.3374 cv
100.909 57.2559 101.038 57.1973 101.178 57.2559 cv
101.33 57.3257 101.587 57.4658 101.728 57.4658 cv
101.833 57.4658 101.927 57.4194 102.021 57.3257 cv
102.196 57.1504 102.407 56.3789 102.711 54.3213 cv
102.921 52.8721 103.05 51.96 103.202 50.9434 cv
102.278 50.9434 li
102.243 50.8257 li
102.582 50.4614 li
103.296 50.4614 li
103.459 49.4893 103.764 48.6577 104.267 48.0835 cv
104.747 47.5439 105.483 47.0864 106.232 47.0864 cv
106.677 47.0864 106.993 47.3213 106.993 47.6025 cv
106.993 47.8491 106.806 48.0483 106.7 48.1421 cv
106.583 48.248 106.396 48.2598 106.279 48.1338 cv
105.999 47.8633 105.706 47.7104 105.425 47.7104 cv
105.098 47.7104 104.84 48.2041 104.489 50.4614 cv
105.858 50.4614 li
cp
f
110.723 47.7886 mo
114.257 53.5337 li
114.28 53.5337 li
114.771 50.9478 li
115.005 49.7192 115.087 49.0757 115.099 48.7129 cv
115.111 48.3032 114.842 48.1514 114.058 48.1162 cv
114.116 47.7886 li
117.018 47.7886 li
116.959 48.1162 li
116.363 48.1396 116.035 48.3032 115.895 48.7129 cv
115.778 49.0757 115.59 49.7192 115.356 50.9478 cv
114.502 55.4761 li
113.999 55.4761 li
110.407 49.5796 li
110.384 49.5796 li
109.876 52.2368 li
109.642 53.4663 109.56 54.1099 109.548 54.4609 cv
109.537 54.8823 109.806 55.0347 110.583 55.0698 cv
110.524 55.3975 li
107.63 55.3975 li
107.688 55.0698 li
108.297 55.0464 108.612 54.8823 108.753 54.4727 cv
108.87 54.1099 109.057 53.4663 109.291 52.2368 cv
109.748 49.8257 li
110.015 48.4326 109.829 48.1631 108.835 48.1162 cv
108.894 47.7886 li
110.723 47.7886 li
cp
f
120.135 53.9141 mo
119.469 54.5229 118.858 54.7568 118.4 54.7568 cv
117.708 54.7568 117.543 54.0664 117.543 53.5161 cv
117.543 53.4575 117.555 53.3521 117.567 53.2817 cv
118.683 52.9307 120.684 52.1929 120.684 51.1157 cv
120.684 50.5889 120.275 50.1792 119.551 50.1792 cv
118.894 50.1792 118.189 50.542 117.685 50.9053 cv
116.833 51.5254 116.309 52.7549 116.309 53.832 cv
116.309 55.2002 117.101 55.5386 117.649 55.5386 cv
118.154 55.5386 119.176 55.3633 120.334 54.1948 cv
120.135 53.9141 li
cp
119.035 50.6943 mo
119.211 50.6943 119.528 50.8115 119.528 51.2446 cv
119.528 51.9004 119.023 52.4038 117.614 52.8838 cv
117.813 51.5605 118.318 51.0103 118.647 50.8232 cv
118.765 50.7529 118.906 50.6943 119.035 50.6943 cv
cp
f
121.036 51.4546 mo
121.528 50.8813 122.335 50.1792 122.792 50.1792 cv
123.119 50.1792 123.212 50.6006 123.248 51.396 cv
123.283 52.0981 123.353 53.3149 123.365 53.9702 cv
123.388 53.9702 li
124.102 52.7886 124.792 51.5601 125.482 50.3545 cv
125.915 50.3545 li
126.091 51.5718 126.266 52.894 126.395 54.146 cv
126.418 54.146 li
126.652 53.8184 126.945 53.3618 127.284 52.7651 cv
127.553 52.3086 127.869 51.6768 127.869 51.3257 cv
127.869 51.0332 127.729 50.8696 127.729 50.7876 cv
127.729 50.4717 128.021 50.1792 128.359 50.1792 cv
128.687 50.1792 128.932 50.4365 128.932 50.8462 cv
128.932 51.2207 128.733 51.4897 128.418 51.9463 cv
128.079 52.4844 126.547 54.6724 125.927 55.5386 cv
125.459 55.5386 li
125.33 54.3916 125.202 53.1982 125.026 52.0513 cv
125.002 52.0513 li
124.277 53.2334 123.517 54.4971 122.861 55.5386 cv
122.417 55.5386 li
122.358 54.5674 122.207 52.3789 122.16 51.9346 cv
122.113 51.4194 122.089 51.1621 121.972 51.1621 cv
121.832 51.1621 121.575 51.3374 121.177 51.7119 cv
121.036 51.4546 li
cp
f
135.132 47.7886 mo
135.074 48.1162 li
134.512 48.1992 li
134.255 48.2344 134.173 48.3164 134.29 48.6558 cv
134.489 49.2524 134.98 50.6338 135.285 51.5117 cv
135.811 50.7744 136.642 49.5103 137.121 48.7378 cv
137.378 48.3164 137.332 48.2227 136.969 48.1758 cv
136.489 48.1162 li
136.548 47.7886 li
139.204 47.7886 li
139.145 48.1162 li
138.408 48.1982 138.303 48.2803 137.718 49.0293 cv
137.133 49.7671 136.594 50.4692 135.752 51.6982 cv
135.577 51.9443 135.542 52.0381 135.471 52.3657 cv
135.214 53.6533 li
134.956 54.9175 135.05 54.9995 136.126 55.0698 cv
136.056 55.3975 li
132.556 55.3975 li
132.614 55.0698 li
133.62 54.9995 133.714 54.9175 133.971 53.6533 cv
134.206 52.5063 li
134.264 52.2368 134.241 52.167 134.146 51.8506 cv
133.924 51.1602 133.644 50.376 133.117 48.9595 cv
132.836 48.21 132.766 48.1982 132.114 48.1162 cv
132.172 47.7886 li
135.132 47.7886 li
cp
f
140.361 50.1792 mo
139.974 50.1792 139.411 50.3066 138.895 50.6094 cv
138.063 51.1011 137.221 52.144 137.221 53.7144 cv
137.221 54.5693 137.619 55.5386 138.872 55.5386 cv
139.458 55.5386 140.256 55.2012 140.76 54.7451 cv
141.544 54.0542 142 52.9058 142 51.8628 cv
142 50.8901 141.403 50.1792 140.361 50.1792 cv
cp
139.962 50.6792 mo
140.432 50.6792 140.737 51.1011 140.737 51.9683 cv
140.76 53.5151 140.056 54.8394 139.611 54.9917 cv
139.528 55.0151 139.446 55.0386 139.329 55.0386 cv
138.79 55.0386 138.485 54.4644 138.485 53.5615 cv
138.485 51.7925 139.247 50.9019 139.611 50.7495 cv
139.716 50.7026 139.833 50.6792 139.962 50.6792 cv
cp
f
142.806 51.3735 mo
143.485 50.73 144.292 50.1802 144.688 50.1802 cv
144.992 50.1802 145.004 50.5894 144.91 50.999 cv
144.7 51.8882 li
144.735 51.8882 li
145.296 50.8818 145.963 50.1802 146.303 50.1802 cv
146.56 50.1802 146.817 50.2969 146.935 50.4961 cv
147.028 50.6479 146.993 50.8818 146.899 51.0342 cv
146.771 51.2446 146.665 51.3384 146.548 51.4204 cv
146.431 51.502 146.314 51.5137 146.197 51.4116 cv
146.08 51.3179 145.928 51.2715 145.823 51.2715 cv
145.706 51.2715 145.53 51.3062 145.273 51.6572 cv
144.992 52.0195 144.793 52.4053 144.642 52.8828 cv
144.408 53.9941 144.256 54.8013 144.233 55.1992 cv
144.221 55.1992 li
142.97 55.5386 li
143.11 54.9067 143.251 54.2866 143.38 53.6431 cv
143.766 51.7593 li
143.859 51.2798 143.871 51.1162 143.789 51.1162 cv
143.684 51.1162 143.228 51.4204 142.958 51.666 cv
142.806 51.3735 li
cp
f
152.291 54.5313 mo
151.718 55.1987 151.191 55.5386 150.84 55.5386 cv
150.501 55.5386 150.267 55.3862 149.963 54.7656 cv
149.683 54.1802 149.403 53.3369 149.159 52.6582 cv
149.089 52.7402 149.019 52.8105 148.938 52.9155 cv
148.705 53.1851 148.658 53.3486 148.529 53.9927 cv
148.436 54.4146 148.354 54.9414 148.295 55.2573 cv
147.079 55.5386 li
147.208 54.9063 147.348 54.3208 147.465 53.7236 cv
148.541 48.3921 li
148.635 47.9248 148.623 47.8662 148.226 47.8662 cv
147.664 47.8662 li
147.664 47.5854 li
148.623 47.3828 149.695 47.0854 149.788 47.0854 cv
149.928 47.0854 149.951 47.2876 149.881 47.644 cv
148.821 52.4941 li
148.844 52.4941 li
149.299 51.979 149.87 51.3701 150.454 50.8794 cv
150.922 50.4707 151.332 50.1792 151.648 50.1792 cv
152.01 50.1792 152.279 50.3423 152.279 50.5522 cv
152.279 50.7627 151.987 51.2417 151.741 51.1943 cv
151.625 51.1714 151.519 51.1479 151.378 51.1479 cv
151.121 51.1479 150.875 51.23 150.665 51.3467 cv
150.396 51.4756 150.162 51.6631 150.01 51.8267 cv
150.104 52.1079 150.232 52.5176 150.408 52.9521 cv
150.571 53.3853 150.782 53.8418 150.981 54.2158 cv
151.168 54.5557 151.309 54.6372 151.449 54.6372 cv
151.578 54.6372 151.858 54.5439 152.116 54.2744 cv
152.291 54.5313 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.2
%%For: (Stegner, Timothy) ()
%%Title: (cntrd_stacked_full_color.eps)
%%CreationDate: 8/25/09 10:13 AM
%AI9_DataStream
%Gb"-6MfL)POXPO*T`1W0:3]._/%#`Q.\3mnK&%]#]V_M3NU>O2T+(sZlksf^=-+ETg9894(QbSq-93=(dbZ:neoYK^O[s"014]St
%X']^]hHum^>ef%Kr:PuuB/[9MB44njB)6sf]3kO%s'0rb]:Yt*CY-Uo';fn:#)fJ4]a8[if#IAMbS^q0cJDpqXrh!+h43m#n$b6B
%2g>"'FMBm3D><8gic96jF*Dd'Y_q`f@."t-nAkFTGIoM/pm](6]fs&UJ%g8PH$Zn\s6WhcHk.=I2u*:Cmbo>LFoTG'W%,:FmiQGM
%\Am&HY7A;E_cL1dXmG8gYB.#L[t;%I2j^T&gn"GK)HYZXD;jgSp]'qK<Br0^eZUc/qYVlYe^LjbiQ4tT-(n@d55Fg%]6>(c%sOo^
%(H9tG%Z(^F)i5Q<GIOIQcOH^%TB)'6_qj(rpQlCYVc?HVIm3dVKm8#g$\3TJ'JkK@4R2Y`ka1HgPQ-CA]R"]+RB8c"lrQBPCjtU(
%/E^8d!nBZQrF'nmH[5Il,F1(+Y@C8,c^\-"k@O_>PM(Q9LWj6*H,L,'TStcspd"'oMs\6nf_soieaH;[0!6:6m_:(=]t-0JIQP&d
%G^]+SRB^S*L%1b-?baA2h>Qm?iZV5,R;es<^V;ed?%)h0cZtR):P$K2eT1R@-2>CBh7MK1QBI`\pH\='<^Y3*^3kEQEr*]ANqa8;
%q!*$HrJ-k,+h""'O,[:fU4lmLe?<-@Tjt=!>fP>UXq:Jjb(W`d$n4<fj&`Fi3.,jmna>E5$^B!T1J<1_bQ)_m,W!3G]/Zu<PO*%W
%s'TWnKDPTrs!P00"We_.fA$dE^Y/V#QBPn[pTH@W8(ZqYRk*]a/>Bo5A?NYl/:Vs:NkUe9pa'R&InQo[pM[dYaf0@MjYFG$n]UFH
%X3:85dr4YlhV\>+qX%#OahdetS)*A[l,1!2c/nBir;P:uL=,=EEb+CU`V2HGX\UTfJ,O&+J%,TpH+3Y8c%#**Z2f<iJGSU)qhp6c
%dfmEK"#A]72L"WY^Kpd]X+>k0ql-71@"^lC?Uc'>0Z3Qbf0nkK9q5Tp;jN\U>V.u/rYk@J?ZPDce'#pmGB]sohd2g)<Ntu+e3r1X
%TX$-/GIs:c?fg0XYiQBsDf.0\m]S*!.`e[>]8)<NbMDJ+mN6UR:R@@P\8337Z6Al(qYT+1c)j=<5YeN/=9!;eGPbLicqSF3Y0XG-
%TKH:2hH\lgKsQ+(mHO!Jd=(f`(fS.t"rgp@?D$)V&714sooo21la'V<&ZcZb^<)70X1lnDHUK5"\(Y)fn(GW=^W>[ugGk[=++:Wp
%LXj.e$OuDKmod?Ye`OOAF8*G\j5]0pj29pEn`KW)GW[%-dr@J[a8X^3gLG<[*uuFD*??2<O#BK58)r!9P`Fa#3:]T-a<$bErp]^P
%kj\(\Hal'u3#iHamP#[$_f4fMh4ZtgL]-pkHaGrkDRZ,&_04TDgU)spYk;50[9L!)2ohD_c/E9Hfk_-Vj(?r>:#(D]hme[%QqcHY
%*$6.@*$/o,2?sHlj2#\r%cTc6n-ABs*ghS/4<BR'_f7bU`e/7NLG=d.%&4p#BLalP_sq\&*"L_31E6h`0Q]Z#iXc;Y\A8YekgON4
%8r%,M2X)?DBh0\l'Tu6Efjmu&O5j)"N8(k!#B>\i9JDi'+'l8$`4cW"i@#\#D:jMo0SUaH&46^e\6spq]g)3\rm5T^`ZP!'%mKgQ
%KD45Jl](AhYrcu]DX04K^l<6q>]S3qkOVMe?+-EnYs#CJG&'&1^lETBai6HAHg@c@`qJQI*191#2&gUE`bZV@'2:1;3+Iq&IFmYB
%luQP+Rm%LecY`)[T+UC1fmU<[]Dp^[X'^:]\][)9jolSB4[S^1rf)MGmQ3dSj_K.fh_p7DNJ/;n@F.eSrquDB4^Zk5Qbf9JDsqSH
%J2-j)\3.]mI:gVqSqnX!81+1Sr)e=T5<V/tKZ?VQH4KJuo!@R9AN*09"/IV6"$[*aaA:`LC6Ll?O5[#*>RsWuQXfA$H4Kc(ij7V,
%J=dFGJY.Tkj<o&[3s0Z*a)7_DrX:tR4h7o`3Pss@T.N5GIL`s5#m\N\,B<oMM4]T"i(&SpXlJ+DrUogTa1t'_a@AbA9D!&rg#-qe
%ccFF_:Z<b]'DV*gF<-KA=sk%/;nhIn(]D;Kl$mi0jn3[SH+&oL1OBVmBgng]_sBsY-Vb]uUom6fQ)Rfml=4JQoIm\c1OX[Rrq(7g
%Gn)4JG5?;3W:`0<4QGcG-;W&c=6*OL@Ij38j(=@.^[3@o5j8CIbH,)bW6/q_[OG-<o>WuNs&dk@p@8-;ZbAp(Is'BJBp>unBHYe:
%WY$h:e3n]K'^;b0or)u:F?Hf1ZUl;ar<^4N*t!K)ho6-d=u]e5J0[KMLBL1:9LOpEP"2FuTr,`mjA1Lg)X%5e1(Ma2-t=N^Qnj-5
%Ge39]Ga6*G#%&@-$U]c@;/PkoA%IWg1?,2A%0/*f`&o/P@D`UY&r6C@SUjg3iG0U6mBC_BYfIoS1MGL85!qfDf^Su(HGGQs?p>]@
%^DZAckadO#0d?.s88KER6&Kua@-Wha5c?9_jV[5iZ/*d\KT/(/`]t2t&S6k;!a[=^s-Uc5PJuK7MoB\&\^9F*E>e5,jX+R7)7(<"
%Z90.>\N8%6Bl^\ngnKnl/nOhtZQ*lR=EKqNUuT\.-?lE3@o^T[<pK862<I2@P6\G34K'95Q8Z:O>or?!*q[l7j:Ul(O+c7M+s%36
%RFP$o!LH="O@RQ[8'`oNU7496*p->m\B?X8139rfgkIrXVEFd:Go5E!iV5);bK!aF9P,30a6Si-m?GZ[0ot@a4J!YWEW%j)NQKu:
%nou8I\=^?K!0#SBfOTWm0H15:=di#r1RAQ*O:?te3+OQ!+BoN6CfMGq*bRJhRJgC!3't&9;RSj1Cl)u67<4bIPN*,U&3)J8/=Bo!
%I*&M5VG+-RRl*^Va2/13d0N_k<'ATC!1&$Kr$q8+fK1DD,3:B5/DO7,X%6<#/qQb@$pn4<[gI"'Z;k"(9T+k<d`GD?Yuk%h6r>Lu
%fLfP:^/jMqg.9l-,&&64$(h7/H:6$_h?NE),)68]B.erE#u),>aRGVZ4-\?IS.E9)OT.TJ7[*t9"-A0f8d!-:4NAib4^/++V8JEW
%dm6!VrXoPGLs(Su"%'>n,D?_Rm)8sR0n>/_N$rQUbmgC>%rq>o:Z?$%"0LAA:Aj9F]][Oklb):<UWdfn^Y(Moo7!$OgUPJM?1*Tj
%XSq7bi%.+T.P";gRs<'\$Z:!#j(i_M2;[l,S!`A3mdZH]][o%/-<B]#>FbLX1rZ(u5%_0c$(24Sgr!q<(s0:fDI>=^IgMm=fie/4
%alhbY^Q_NBXg:BDS7(AIrRFTV)ZI=6e^qnO;[`VeRASlsm<7*RXu;X8@Cf%Fl"SLa7)K("M[c*k?sjtKOcdlsGd-dq>:`qt%]p5F
%3s++W@!s<-5dCjI6!4EtBSpWQ*!(]Q&<2ihQGA,X6#:5^6ucn;J>!V&=93IhTuiIWQ4=Kg5hfk&p'XtVLM4Y;3sHa:2WAV42N:)9
%`mYKaQ$TlWn/9$_l(F#deeZH_DUIH(7&q]i4n'R)PMB9IJK3B0?jR"DL;4j&BG4sXW'c.WTQ.>)!sqYs6St"4T`bl5#Do3EUWK4g
%jD!i%it`J.$&tm"7WgtC+P.46&^WSUZB!l3(`r6daAP;K$S;H;[;[B\K.EYCQ-HIl3YJPJ,T,6CL_u@VD)&<54PO5"/MFB>f\0f4
%aqb(P9WO:MW\(3?ULH_rAZnT\S&SpCZdE+'FtqdkF;Ntce$8j((;/;h@`=6G0:"`Snnd9hD,ZB31hSkXl.N'iG.h#O@bZf`0D<(]
%pgW9iQ!`p+Z1Q#d(MdCEIBiRdk%Ca0f_o:TLQ7@D1&o2n3't/4`<Qr-5l:WP"N2)fDnpM^&;Wt%:'%s1S)]jW`u!K'/WM[*m5g;U
%AMd<N,YOb;-s]?'?ttJ))>ljV[BK!nYM\_2?1EI=Vi.%fh*W7AQJoAn='#6Fd[`o#7iE,-53l>kU/:TEW/([Zasce]WmPr5"l:E3
%>NC$Ra8dF'8u9uYN@m%Gcr`h+m!oTU,VZ%4NlMr8>s.D6Th&Z*=]VK7$#L`mk`81h*,onNb>QmLLdtr^`.pfMZDM?+'H<:V:GU[<
%QlrC?i`,cO_]bD%G-VqhHt^/^%EYA)RHcW;PBfeG5$<Ou('1[%Pi>&pj=O!q"ss*GV0YPO*`0E]8pE`Q%k-Z`V;7i`>Eo!^F<LKp
%D;ppQS]N2f&d@r4nSaU""mjj`=AVKi;`n3&@dAhH`e9ALI;i;]W?48Wi6[!!"3gj`YX]1c\a&BTa+lcDJ3&9*Ju47e+JFPsRNQY7
%"U4OrAYd[_"cjE>RrMI<(ja9%K>pr.[:6%:[a9UE3JL:3AQuU`Nd4r&lnHbl99H?[Of+SbkW7^[-Cei9f[B>,@hnlu9e.s!NnC![
%4T?[]<9.2\JZYhEa-0AUA2LR5A9gp">6Z`Jh9/WmV]#?'phsMjdj:Su5Ma@mrS&$"Vb]5VrOD%Z<a]&rWKWGt.i&(i<[prD+0cg<
%G2Pq)Z:sHmS[]8eG+-i#H(KEU*KJ?#F\&ib1ttLK@-F!hChJn[Lh$@K/1NE%W:YZ?&fCiZrPs_;6D2FrSsQ5j6^l5_GrD)q+@DH2
%9sP#O@-bn8,4#u0T'-\tl=og]k>l<NP9qPdSWkJkE4u@mh[TmK6Q@Yc3+-QAd%H."7-ISFoS5%Z:#,<fUo]KC%P9B',c%s[ZGXd^
%-?GJ):,33FqEu>jT?=&r=PTQX5<Sb[%s^4-DgD=<4T9FYd.foQ_=[!ST]XpTd$(T#mWeU0cf*>KVd>BIn6,\TE+Vc=YhAUN?Zh=;
%&#D3@:Nh3hoOgZ)1U=1[Y%hQnnKUgX7jj!c4Q3,T+6!aE]"%b-e()5#/h_/B_S5Ig42Ztam0ir7#<&0\l[G:2NU45j=O(D"3fcF5
%+Y:S%/3P(cPC/2>[Em]_`bt,"B(d4gSoOH4mF.=<"T?9l'5!;t4ZMKKD+f7kR=)6&BaF[]K"4DQBu/)#4H0?q'*n6TB/>SbHgI0?
%OtAfPhCu:tB,Z.UHb-&PZou_t:i.@tm;Xk+Y-9>Rh^9aHM8PP6ati#GSS4aC4dffCq'DG5P'J@A;j-r%dhQ(`m(dJCrl/F?OhKr2
%gU:YLZ"\F'?8q]9@n0Q>)fM>HDbJ(gqr!6GRN8V$QIluiDqpN#736`p::[mrig9tZUF_g.m%'&a/fqV!ki/FO5J:Ps?!R'fXGa\s
%*VSd(f)WYP[BncInXB1qYAoKlY2+<h^hX`m47V[W6SS42j2`$<^5XHPcW%pul"Hf2&k>o2L^]>k3:_4:dahNpKd]j_\.""u":%@*
%$5toEBWK.j4<iA7*sqf^38A.&=kg5sE7Dd8nbd'+X&FYH*[[cej`IGk&!lPcG.a%sW4C%s5O`Yg;#,^6Fp@^9Jfj%_G-*i.]tp\I
%kA`qB(+/0ehVqTpf6U*%PNbI,g0C+q6c6,=:mS25,e_b`s7AS]hYXq>bMB(sYBT/=d"-VS!3PBhs"^_Phf)at>CVFi3@`@[MJ_QW
%KS)ZQ=;C-EnIE8`5n=V'&68LX9[OA5;*U@;L]\A&+YaT(FGKOMQf++W=$uiM:59H;,uIjY#05[9SVj+s.[!,m.:b_P/3t!U.^VOZ
%/%.=VU>n4kUDduHQ4J9VG9O4-2?#pO0YE:]aA8_r$0KP5P/lFhfb<g7j3hY6\$^j0oCn.3a%11DQjA2#"F#o`nAe(=pQu59N!+?c
%M=APVE;,_*5AO[o1&%3[Vp%=UYl07R]1"`Ib<mKjbqo1][%o6DbZo1c&nG3LlBFhRTpc;>,I;O;FBc4ecKuJ_B@!(GRa5V01.a@Z
%"u2a(RErc%c,;G[0cc%Ia'sU;3#$d%+#BOORErtXOG)kE"505WO3q*rc6oqSAU^MG78VO"#AnSJ`US-A@:F>%.V>]`5g7e%((AOB
%1'F#:h8K#WY=8(>o5gN)$HAgDZ[qMXin5\94cQm%Fk#[J"3j<`ff9H127"qX@WHpGH?&lfbtRq52^uKYQN-mlb<<b+dF$UN(%K>j
%,.EcWh2bnaD3\,qj-N8?("N9Xjj@*`F[(>#Zs=^>If/bM]8s!sgrMA7K]i:3A75g0=V/C?B(Zt4G-:F(eeIg??*bdLa$,p9]4]@i
%5Q8lM5X5+XKNGhq(CQAD^Z<ASQ`-@fli,c_N<jYt^l,XGd2'^2<1]=W/T!S:_/UurJdlIM64;pMGJ-_n9o@2ML=nNB``Kf2hjahG
%_6f.t6+/dN8qYg_>M(1J69iD<Hi:2'?*6)`GM.VL^RLc*04OW!B'S`hQQc098<tFp"&Hg-e)Tpq;1Fcp[guPNG\H.&+(1@TolZ"\
%?=o2*!2L:JH0Neb2MHE20j\tZSn40'<d8&,ei,2$ch&l#ild_A*)lOI$88LM^L&OMQf7#EZ?Tf3(X(fL3-hb[?<H1*Z?R6^?7_!N
%<d:l#?A=YNeo:2s$88LM@Tg>P-SLe)$S/kl(,*SIMe2Fq$@b.\im5r2@V[.Q^(8O`C[Bc9BfU>8(*r1@f>-5I*J)X'R_ejnf[QS/
%Kc*38AF/\=64:n@g5ga_2Fe"&qs[t:i5bfkLH.Xf^E<K0jREiYa!GcG8*I^T+[&0l1acs_K`2A$LI^Pm/<P!uK`6lI7\Kc&Id7de
%\mH3d:AaB+.6@H:oa`Q6!P:fnmJ2iZZ1XWC?ERWJD>s;ge7G2R[!K3cS*RV2I8R=pO6u.7eEfupp?qH6?'"5nZ'4FUh:nuSrp"pJ
%HJ>[\<*V=$GA(gE7rMV_gR7_HkIM7/Dj0<(e/eNe[ohsC'/dr*:[dYQ]=uIKn?/:@?I)-nVkiXbdd)2Cprp1b$D6(<d?h*p?p98j
%"Q%,/[!d,snY9WL%T6GkRJ'"5R2>2P`VM$<n@gO3]<cX004R4j$QZpqX7tjGe_AoU]D$FB,Pt^nIGR-I!2t;d^N]fZ=&,AplMUV:
%^Mh`iVVB8qqj:bU)rU/9DLiD^XADZWP8!$ZcV-=4R6Zdqdg+!S4A/P4O`NWd@CglbaPeQsM9l4pI."2sfo&?1OmC.=EfSK7mJ58g
%_r_fHOUpW7HmC?c``it:45t=*2dJF:DW!m*lY1B!ftl,X7soYf4]"lq.HgM=2WO[pk<G"%%^li(]Jf8a/!2JfF*tB!cdO%-I$*-;
%Y>6*^=sS9=<LVt6d<`M@:!T0]nGQu%hg6--e)h'GD0EiF8T*HcaEluRid8j2T4qu9ZR:,%_uN<?VD:uUB8Oks:3SBLQ`SDT4+6%;
%-eG)?\rtfGpi`l35Nb*+bM`+Mpe<W;g`\'^'g$OsS6%Yf"ZcUPDfJ?rVouk7][-t8#G&F`DGq%DQ*\EIr0/FOlKP?i^U`-`/2oNa
%N\@)g"2\PnP.G%=i+oRXQFV=jgd[j)Mhd[BI-FnHG`G:gHMs@2-eZW[[rV8G*/c<PjsK:P\Wq'jF(E:23F0=kDGq&;II^4DDK_aY
%F./T0__0/nEa(ZGX_Z4%'*QecDK;-@e&qk9E%Y;6$O%Wd<3YP%ZL3joJnH_QPgt@Jl?48Z@.<4`A_h1Ei56??RT%A?B.Y&bHf9L8
%?9R@b4eK"$TBTP*b)LHeVq<t!I/1UU>^A*1Ek9@q\OV%4_7nB=kNCr%/=fP(3`BP/n9"j+gt^.\CSs0U\"95(D"-XeFR(ru;i?E,
%e*ZpV=ZK<&g$%,YS[%imh:f-"Y(Yo;?k9k4L/6lg?<t+uF_:L>iRJ$S4*A4)-H6RsJiYVpeQdd!JQTX<D;bQ)m]d_`p0>B+kiHU9
%^>%8hj_Gr[oiehDpY,-'Mq8`I?0fYHCOGI%7pijI-Xh5dSSK<djk?:6f=L+a[?i25s,M7GFo+[6G4=JR1B!aNr!ACXqM==4/F_%k
%a$0@'.Bp?'l]?e3>R4Td#Y<1oZdVM$A\Fbn%8;AG7DDb;"=J<OA^7@uA6FpjB6E-O8jJEDXOdWV$\N_=6-Z=XCP1rl_=d*O%;KT@
%mZM58$r1QI%``sFFei7`\_2=TjM'q);7k23R,q#caT[j'D!L8Po.)(`oB8gm4+3$_3\kd623N+)Y.[@]a[MA?IQND`7'$?9:AF^:
%1]FtHf'I`aKY!dF\(@Z>]:V^-MfPH9GQ,[Ir]6n55;)MBJ)FE&EKOW*"2DF.Mu;9NpsjdtjOaCHYO:Ep^\.n]FWVFq[6O/];aGq`
%e$0#TIR1m57htgB[UGbVl=#s#.&Y8%LSSAs6Ci:kI9F;6/F(T;Ko^=!pqlE5Y%HJ`^#$$AA%C^L%[D24o4+!F)=Yn;2qP8$0!69K
%Y2=[$R@64h+1a+DiJXHaY>-/\G'DPFX?JYS]=[ls=kiVoqhNKNY(,9P+;i_h`c[TQ;?"h]^/p)VorET@!FPjes87odr6*6dI_YaN
%^\=dMK`CAi4SaJ\s%6uQq/'#M"#K^aptoj<l>%YE$@M<ag>VEH^Vb0n%!gZT`4R7;7.0[t0$jC$ZMchj:T7e1EpFkZWt7W%=p\W@
%.B+?.Oq\8I8OCuk!kJM2:H68,Bs]C92fUtt)ckjs1rcYW%ms'$f-+5+qLNG[@s:>3Q$\k0lLE03^Gt-8Y/C"fEW0n,Dgi#b0tkS[
%<$^VC'STmen+qa`*TinSbW7]-qY%IahV;D,I<V;TbWf-?*V'0OnUE`_Zs:`gs2NIe[o.$j1]1_3D^+UN86jL[6fA!G^AA4/Ip9M0
%XFA'0r'eaph0)d*_cQ(K8.b/L>M:q<^RqGM+nq^+_XBOB+#4W@2$q#V8M\1B8a'G-EIQa<W@$SJS]#+peOfOA-S]+#0@hEHhB]?D
%4e78_Rmq&W<!mr:"@P^J>PnZ#ZW.3[9KEd!F!<%>W1XgOq]lb1;CA458Kqi#:.4Q77.`KL&s?7^kO*AY*F$`f.KXRh(3Pn"!0^B8
%X%Gg28Ld&-V'<]#'dIMFAkWPY?kY=^?6pcq-#.F$M$VHT@SCP]!jme$d@,jkD'Hh1Z<L%Hi(Q'U]1PKl:=Z)A;A!<"MGR<P#V\h=
%\>iL2R&"2%/bVWP5%'RYjAdC9,#$MGXqEH"22N1!RYY+F8]6G97*IqkU<NPg_.)>&"c2/+PVS.SBc*Ml^hD;p@=V+:Bbm-o%+&_P
%@nf;)+N7oM0mA.;3B,9^.Fou>5h^=3BMBk92Otspdg;gE`u*E=%%pR`<fd`g7PLT3)Gu\Q@$6I'WQ>u28Of)s<:nIm-CD&E;5g`"
%:Jb!S"Oa/WC8u@WC""fZ.\/iYFG."n`W4K/)WT&Q?*s`E:9+`==eudLDppGd.\1O+RuVJhl%JBWFG."n`f(uXFiQK)iAH9seBJ!l
%P%K*9'+1[4aB7b]!brB(g,bpXg4Y-h:<*o<G1fo$R?%@^(4E>#]DZnC<\47n&&I<RB6TR>m=(jh^nmaLh3Qj3QCJ)b@kf7_L]tu@
%_leZ_afih3ZRO@fhbV``W,8M)ngqU&hckerP]=)9EV[<OPCH@Db*..IDI$&SOoK:PZ2i?b:<T[B4->Jk/cT-?5n[I/ah%[SH/GVC
%Z?%JsPr3aSrnM7cXhq`N.I\t'..HK57TJW$:64UFQ@)?0kOaSMmn2WlG/,;W:>>Jc6:V["L4YJpHeJ^C(H>/_R*Jo(G7!sG#7KCO
%I]b6GN)unF3d$(!,I=8`CT8Oi)FH6"koYX(Xidiq,>DP'*$7/rQ8OsR]kRnAFSV_2Fn&,KhKGl$bkDs,Q\IB!erjE5TI!UKW)KS1
%2eCnnS[1hQBH2,\8m+dq\AY>p[PYKE-D(X_P_MhU/h&C:ZUU(aWaT5[jF,p)TkXI->8n<]Usg.ViU&s8bpQ3nQ5&2=!ahmQT9<>T
%*_XE6ddX_AaXdlh9+$'H:o8ZFD]kM.UALcaB1i?K!aV/H#5(+5Uq=0d]6ee4!2E;<!orI4Z^[Hoap>`qpro`7(t26FFX=4j*9+!A
%<rc=YIJ[2"4gTJ/dhcAh/GjV5ZA0mMS2g'B%qGc4,$+/F>as8?0Yr'EP9:;p7BB&n<ZY2/#W%3;X7GTCS7E_\(mSih\Na#NMY18?
%PV[WH)=-p,R,Sf]0%AT!c#:0/V6#\^:#ho)lpETH60!pSM/k\:CJ`05cT-ug</NQ"W\1'nf=&6d?4*u/V4k7J_NJ!gUAU(UF)I#$
%NMS02%P(:$S"V2#\I1k/rS'j9pr@OJI[/;R^:I5l(MEXq4+je34-+PeKls\2`@\44'Q^;<*9!3f#M3Ih&fJJ99<DTfOb<r"G'_\h
%O?L85"$?.+$4DSmY/q7U-+bquPh6r!Qt@=c#1Q57h">Q<\L;+#Q"b)V.l4o7nekB'K$?%OCFi"4E0&&0br\(hAmta0)(Z6*+Y+Zk
%ckcY=^[8Af$j($(:\SGC>F]H.Kk5_s@59"TR]!)l>PjM9BoG?7=)tOR0G<e@G'%$8@r4r'H[!70L.&u&r=>eV$lP^=(GZ?U.(`Sr
%M]e=f/45IuGt2in)MU2l>>V/\K7[hcWVTk&-;(8]U/7:*;'oema:r60fZ18a@u%@b;L(WSCJfe7d:iYoMITRj5^nZcV@!S_%1+4:
%-VJu_*g%iaXHHGL:o.nGBR,S-'&i^UnQAhr<>-7d;Rau8ats8NMl9F_-3K$rbH`A%7AFaNlCk4J,FWi)bFl,?VTjW^l\DJ$W'!+:
%35N&%K;okp&nL[6P@Qku17Ka85e4V*5d[mf-08[NOg4VDJdc@96/(=Cj^O]-.Q)ZDeH<UrCe&g,CZ[IX.btf(R^P6768RYA.(o*N
%=>g=Z<"r.O`&aJolD#[8WRJulhCF++aT,J>3fhhe[c9K1A@[Poei+O`4ArsE,6K?%_\@+KPFsW85\gB#b?MGB&mg]ZQ1r-C5g.sS
%V=-l?Bk[Bf-oM*Mh(UVt?oi\sQ.,gh?)n?hknU7d;#unt)UWA+&s-X?O:'(2(%L'rIdh$$Ud:pL0#>X[`^`TZnG8['jdE;\bmi`t
%LX@er2`J<!QNR-lDD][5kJ>16b`+;3QXi,.OJ%)X0hO2<'O^9!W`DC%U+?hO<q!"4XW%3ZF]-V[4`up'kqNll@\Y+Kh_^&rp>f<`
%!\;^+]hL!,2-*YG8om[:Um3bZK@[JW1%tqZ5qKssb_CN[)J[qjI:N\m5_6_&=Plr5FA^RiTWFh7@jZ'>CcDR"*]#a;BJ_80##SB:
%UtMke[8Gp[J1B)[btSDbgf::6Y36m[Cs_KN`(O-p'ElK7KK#J-[k^@%OUHQhQjOF/>`<J1K%>CjO\H_Z"u$(teOh0T5g/4U29s4h
%_]6EmeeoU%9q3cbJPFZW!eV*Jai74HLp6k?(1YZ^P:%S$</X%37`\?<eW:dhY*'e1.b?0*fK(s7_7/qJf>]Fg2D)'/golR:a5Z7l
%95IlGZf$]8f#KIc[EljAG/#BTIS*8qISSMKq`1'&pt8']AP?q4m-\O3S^$WiZ;0cT>b3^dfs&cD>0At)d\\l>c%*=4RWFbJCdo@D
%Wt%#i)BUZ>=8n^mf;9sD#@_;7Z&;%fjJ\b76A00)_cSlt;P5(QPuTs=\P!ANA4I,%8)Ncm<"6Q3/]<mnZq7o&n_@9/_`*o0(Y:_S
%ICm#'hSH=f1Q[:-fp#]/s*eM*QB$`Q;J>'i/\-H">O6r,dEJ=f.??T>9K=XRIUO<&T`B%>;`=J]>_6L1WHV<GAsG(Z1D#5Y;;jRd
%?BA.rYr^Rm!Zl<>*:502=9&X>fSP2o>Wd[RVE)`7#b*h5W/?@AR&]+4VT]`egq8-(1(/Y`=U6hJ:]/gl/Ak:eMJJ/c8mDF3_W[?,
%\4:/C$AF!Z31^bN`L$]g;(sPmk9I6eKiQ;8n3h)k^Au\NC\GR3kET9<ZN<28+F58NWI7(P(u"8A@("@Bj9L^?SO/S+Ljq52&Jnm%
%<ul/@qj#7mQ%D:4KooGKT[V-u891:QPh,Q1?\ocg>"IFY;re"9F.OqIp;($ZEI)bKI1Dq[jX51S*gMJ9'/lUE+"b4^Bj;"=gm6a2
%p'*J6181+X(t-<b&:1cs&G#2Q.-J^R/0SMa;sf<S.j5Z+kTZ;DQhA09'WSrD8ik!HX'i2(#M!A.#E2Yg,_.Wo3[KB4VSGdC_IM7U
%$),<M@=Dn<;EEPH3R(c!61O,[.s`EuV=1SZRfR/DCoUY'laMaNVBT2AK:Qn.;d<&"km(t)G"2:t2)SL$3e'_,lK=\^#Lh8'P%+U2
%=ME+M*Lh67p1.+!V*qa4I:>C0(,r(IUqKs/`_qqh9\2BYD*g9haTBSMEcX!AaeZ.5?V,>s,O@`4e!-g\Y)@#8S*$I%Y]tPam3bn)
%eIthemE<3d>t`V[U_OYklg:4V=*ns@l(/'dYb4)o3j<RVDtR>hL8@)+C8HdTqN*Grs6T`2qX+Q2<6;=+\FA&UPAMf=0*h5K,Ea]D
%PNQB\@9p*l8?B%&g,K-kK>U7FYV"o#YqhoL>:mh2qNMuup,f*lZP+=a%@8)ZQiVc\GbVmlM<2gB=0S3*$O"VtDQ.W=n"_;PFp.0F
%3[pmR5jn"N^!>,,"Ftj8.H0X&+!rt4bqr7$,m7Uc--&UUY"G9cL"JAUWE(1@">J1#PWUY;BVVGc+4^WI\QX<&fHICs[?]2hH>kkO
%&j8uhW*F1F'>,Y;ij=CqWPZM'JC1%E43)YR)e.=X;RJ>E2Se+5GHpNi""R$^0PE@R87a$kW7VBd=Rh3p&EY4&X0$,g(<k_4.99,a
%KpCp-_M[oT/E0C*U&^-Nc-t6"l*q%rOJGHH$G4=C$CIMdUUg8`0VNYadL^"=Q)h$&JlbSp:9$iBk@$i\[[WJZo&hkc<g_"m1_XVL
%/RpcJL\#pd*(fXtC<01.($c&Fh6@LpO@d>(VY.>PF7k@?Qn&q(qYQMn<+.V8Ft[Mtbo*^_6n_Ze\8Qp_2>c`MW&`>WEpr<Z1EfbM
%SXuSm\mEp)<g;`aT'DYs1fBD:]p;jhPS+P0mrO>N'UlKPB0Xpe.7SlMcI;'7Fd2OddpFmG=7Mt>lMH@\ZC[T#^Y<%[):mpb]koiA
%Pm;Z.l/1pLH.u48E`?7`"++i75mV/\A.`W?DO><t3+:m"C^(j0U[c(6:,L1-9Ac!W50CJ?;gI9/(c^6q!&65@B3</eX.Nk-E1"!R
%r.(f`g#Se-%ncrb*DQg[L@,r?@9?XPi,P79#k_C5%7CYWT4"?M2gd.KH7'iR3J+;p8tIS^0o`"tIVgPL(a'$:jV"(P]OBo4g9tkm
%@J2I_P>'(VY;dQg?m_$th6!Vk50eO.KbZe(U(gD672TYud3UoEj+(?'>j%-Q/lZ4&\h<j4)lGo'-t>K.j`ahu1?=R'&];O!VA!HO
%15DB7b_Y'rI!3,0QW!:p.s*]Q$kD,1Qq_?T,`bBQ'I`'W-8ulS`+Bq+IT=MO31a/C"lB\'J%/s:4eoGu[)\U\j.:4t,@bUmPLb.-
%S+01UIY0g)P9iAX4^S0KoU$>9<F7*,9@qS,Qj9F?k;&IM@h$FG"?<W[ChDTak$*Z(&DKM!0>UVj74,A,hIKCm!YEd&Mm.K:*au1j
%USt=#j)@I8lSSsR*8qlrbYH:C!VQp,Vr%%_eIc5SK$^TLg=H'@Vu7k24"NI+=^X[a@0=E1a@^&taG\sd(hLcJiTV6l"d0`Mf,0)3
%!mI]1bph9*BZ4G28W.Dj6HCOmOZEdHCtc<t1rpnc0!<W/P-4\21n"cUAIk:K,!l>qAh5d[70"iR)J#XL%#"ldXVO?WXCCR]"JBoW
%$<WCS:ae"_]Qke'7'ITY[!t72TenuD%`,VkPIC?*!+KrLBj)#:WA[;r0gI"b!H*7MoE7(:DS/F/psT#o+$RUgbm/[V+e2%[T3tta
%+2e@R88^UZjTZ,4`TG'H/\sL(I$gf>OHS=iLTiUe(*Wge/UOSn-)D@Y-A"d>:dN$mO?puS+Ti*=+TkAhU-k%G7>E&nKb,dA63r\V
%TnJ_b64+J3TnUS)Ukp1pDKi#9n*WDeH[6!"e*&`t(a5n'pYml=KR`?O)APS>[k:]Kp92^0/hU:sBhPti=2GWYd^8Nf<flQQf7%+=
%dt$u=o.4)M5dZVYgB%3/%e'PI?@V5gCt:iW3_DiL2Ig!O37^-HT8Ogk-6%K^3uJ)?26KH1DW$m".,iPc\UE.8^^(QHB^fZQLjJ78
%0T&4\"7A+&#kF(4I8$'d+\3>880FEK.tX#+M#i4\4<,N-a"UuGr"T:&dMaHW+f]NM9RD`g5otd`C:p?"!=dm,cH(g03Dh^R#VO4W
%0ne):>V$^8&>D4G3+Xrc9K>S4Z8Dpt$Aa@f`#`fm5](0I:)AQqj,$6EemY/<`gC;5kWWC!`R&[6&k*`CCo_VjHAoSr4CF[m&"dPF
%*!=PB8e!Wo8>G*:_W^k/^3^dt!mF^.In!Zr0S*FF1W`Hd%cEJ$(*S#UbC/fKjN%rQ8r%r2i_H0)@Iu`'KR&PjUh:<J=ua<L#$Eph
%$+*k]gDqL]*LZ7J_p-smdd$f3WcQB&'gn`Z*,RQDRt1J#,YA=bO?2CjR@oC>lU4un*\r]tdWcTS[3845-lE6nO(I8h;n]!GBilb'
%NHcEH6bn9oFBG@r`+1o,KqR0i/.&a>5R=hHduebhW'3`Z]/qPl6m%M7YW$Uug$[($B$rsr?&p3G0EX-id+T>hEcb=cHqVBr3IAoM
%"dHuV'oT[XI#hc'Q$1QJGd%JHX`n6M_\lGsM@&I)@W"M]lO><E0[g52kV+61L8YCeO['fTL4[-cWWIoX0PRi>HI)j+:,^9XQMY,:
%UiNAS4!?!\2*S$mf]-#B!N%]9=eOXlOcL\;o%2`N2.KMc$k+\NA:]UV!=43CRQ?i'^lUX6;9M=#Q5YPK7F>&^['i-#apg=(@mL;H
%>Vl>Q:.ap$"1UQ#LXQ6,3Hl2.YmZ:")@CZj`qJ%$0X=j:]4,bZk-7'[Fbt.,'i&YS5oFd4&d*,pIUP0F^s,9XQk?G=6V[n,)&LCu
%K-;=87be=Qr!65slU8Qm)/1_0lG/@m7<Zn^!a[),e6D?K$@ZCu!F7`oi,+"QonWihZ_3^J(C$#?/b,09RTL70_p8+7-8KZVL/V#[
%QoK\\9g[rlH9#HT)RL7,+V<4V(r_&8j&+St9*;/eRBVYV/Ij"MADrIQ!L4-g9GWJ]KCEj:1OFG6j;q9;Nt>t^TF`i6\2T3MT!4R%
%Mno`I_#<acHKmkVK_0MT$r1a%qBD%?59n+1SRVm52?SjCZkS@ImDk)BHqm'_n'HM=(26KTV2V4#Zu[E=r!(&S5_EC"\HkD*1!KK,
%Rp)[c+\Eck\1ojeg7LEf!<<JaA&Q+-!tgJL!OXihkeXX6`t:F9Aq&*$1ucB&!*s&A8?k.YJ<Fpq&i/l?\35f*T#R>F-C@4kC`'4)
%/Yc[i:i%4ePW!c,j'WE(6Sq1hLGEP@L_4_PiU$F)EL_,6SigL'`ol!:aPt$U_N>G3)qakGF^b9i%=$%RQtZ;]<>M1s(*PFJ1cki=
%B"Q#D*:!)6W'8jlOuP>c.<)f?-B!iW(u50r*<t:s&np6jXW7o\64JJgS?0&Y#0pZ],>uQPC8-LY>pSq?60&Sr%/C=GN=O\\HVt3T
%9/1Jh[#?6AWLYB:JcL_Q8>GMsOBR5BBI$Zr$0D90!27E>UkCnMg'207JIe\p@5#EHhhU"_T!mWUk;1,7:*`K:[[qH],kNq=$MTB`
%4O]95R8Q2B$tC[SC=[Y2Zk4nHZ7^dZ&XaQu$j[E,A^c1ATHFmYqa*?%<bVVUGoSHP+>FQ=n'I<@^/F2]=J@OK3ME5$4R%LZ`S$G@
%;PP>!HO\ZEidlR:%)U:?(i'2m5r0l+Z8&SC&<dNK!+sE9cZ.kZlS_i.EU<G1&._9Z,#02k'da>4aIZ+c9QT\F!A.E1#!G6;$9dbn
%')<?7^fEe!RidW5$9SbulkOc8_UEB'oLmcelkdGYLtl`g$j)qu)RX&d4:[P@)8I:*1U(d/^e_>k3IlN4I43sg8=b;!!UO`DeJn`a
%)W5R/E=`2Qq*a`aOMQh]%5'uO\GjK3!aolXW13k=PLE8n_!S2h,=&#SWQ@e`eO(CG=9l[f,s%M0qukXmR?I=O!QI7&rIb1*>t4>t
%?ur/%i[9B[#%lsDA:QO'gk>T[*)CGRDUp@@e&Grq'^R0bSj\\\"l(b9SK"fG@.-W!7j5a>^A&!hi1ch6'-c+PlmG&-B>dSr\"RdU
%,4n;:7j1s)U1$P8!7qY5;ZJpg`$.tXYQBT549aBKA!6O",+'!D4GASI:Z<h=*i;,9:Eb<)jMb'=V#cdbV\!906qM5$'9&q8V#a5'
%I2$#h8RK+An.i0C7WB1F/42C:()410=b(\i,J+<abb@ti"ag^3>mOj-)K?R$2g6@_>mMK37JR=Z`IKJk?\$VI#&tI;'Dhdr/d*"$
%UA,*U7efua$76erm*qB@$h>-4Jh#D]J:/bIU6Wb!a!^LK4GK5MTD`>RgOWcQ:`]`*!=FB@#1t3<*di/,F6ATn$A6B\!<s`$ct19O
%0^2@c6[k/S.WQC>9J[.E1.5:\-^R,-5V<-=1(TMj&A_MRlnZM410@h:(t"3`QN=NUB3@J96)CCO9EH%TctA.E%iHL^!KMmBU[f:i
%`Q;bC]jm(-#1sQj*!Y%W#6[AS+dWIe**N%*_NU8G0gs_d9HHR`BaZ1ONr_0=Z@3s`J[pqKL<OcPB5sVEV%Um_#S?8[MUN+@FQhCl
%^b'G13t6/5!dPjF1uu)qW3Oge6E-IZ+::idK$s_p"94J3!"BbMjY^R6(qb)&n7JbH%<ut^Z.6[+L^%";]`oU&o&;Mp(p(CD)C"Nm
%o\qaDdWma3fP?#D-X>/-")`:+i\fdUS2;Oq+`i/U[F5,JP80trG.OM9]S8E(k#LM#_"e&m5CqFJ)&VutHOYi*[oKUTdCI`m2*bS&
%ZI])7p#<WGT>70FDdXsg<@d>JY9A2@]ZP06\Ng8&hiPnj<.4ojk2F6sJ3@MlLu/4&3\o#OIRE*T.e4P:W02-3lOqJ^Ol:mSLBOV7
%M<?S.!=sgAj+CXD7VC%UJ6dT_3"2B05T7$$gDJ*f%Z\Hbd+i9S@/sdkMW6D+ih4\Z_Z7%C5obZr@k8-P%KiX6Y8rBAU5im,@=[aM
%5obY'O8Ui!8;?=.!]c(sOPfo^Z/YgQoAg0=%aYd)IKL]%Xp4_3)<ZQ67eRelB/lr\4U9&AUNd9Zi8-lh3=M!`'[Ir##+L-+#G>X!
%g2k?b1MIQT@A"(ZkW7cG9-J'%@3DV8>mGV,Z%uWimXO=[,hVNIMXQ)N15bZ'Dos(kaDH>iMXup[&!Am_Yj%>JS=Kn8U`drMnu1U$
%H%<Sp'bauGKT"19!5M?'lbn&K0"4S;&$Tn+>&bSr/5s*Bf2[$PS;1WpV^Ha#0RV7[dGR/UQm+*J"PuL$e4B3Q&ih]54X;o#OS]%+
%8<+h&%mU^gMZ8dR+YH^Xi'.3R`ej]qoJ't.C')cncWuc\F`[B7l0A3/!B/0#(CK.>f4_;qSLhh>qSgJZnVle>YWPV9p+OG\jZOM(
%;_6;W+0cir<@[`D.@)p2^iWHqA?As54j9"bdGTLUoeZP-_m(-*WMasm1=,4T-_rjL>K28+A6+r+I)I+>3/f3h;b<@d<d,lk+$s?F
%<$;N';1]sm1f>+c<AC:nXF`7TD^_[E#h*L>,Rf0U-2f<,dOWq/)&-6Xe!q#F5J1fr[l@#?Ne[O9W>,!rN5e/n)1]K`dEn1QoE*.\
%a>i.4)RGT#2$NrsFAs')U/EF9X^+c+[(@f+e<ri]h9+IMQ@te/6lF-GabOQf)tkcEW73Io5h43dXI[cUZs#j*([rqt.[?]*<'K5t
%#s\c9-@V*Vj&bSNBjXS3\UhjhT;Y6%;em26s7)-jL4YEu"f%k,ImPQFXBU>-MslnHU+\-eMZX)fLT.F+hr$S=[[!,l+M##*8L*/3
%:4k)a=\GHBO&[4+gC$s2T8_Yg80RV$6'TkAj"CJMYI()o9kM&Y[5;;rk_.S<l7i'6#0DWM?Z6eb>X_>KlL-?7cW("'B!kF;ar@f*
%W%B#^s)+fo&.Km"-G`d+M+H/@-WHhV",U.TZ]6?MLm-Ek01hfX;(:^A_l'nIC,gDQocb0h^ENWcd(WK#YEY3]6M3;9PkGYaNo^8q
%=pQK,`1^7)O%%[%'BZDahUUM)aEuJ<N#JrNjf>">.6hmTGfu>IjHYmXa.`<S(.06Z`Ur=34J"XEI>H#Bp$)/Fc.2+GipQ/R#A3E-
%!0^86<P';[9$cFs&$1>++*V=3/aKFL@sJb:<6JA3Pl>3VIieN%_"&il\Zq0El<<ib5*']%LA1.f56bn[&a,.V#Vsd)4D8L!N(6!'
%'"jFp@1C,3:N_8<K+l3Jc:0']Sq2NTE0;4'3jZFUd(1>n;IXC0Q%lt#JJRVs<b,U17J;^SC;L0(\u3XWLM6<:=-$Qu)l+YI4l_\Z
%\/AOiCeFCVC%`<o%KIT3\oJY7)5LgiT=@(P77Bb.;\K?NQkOdd3%]^Xf@uH*6_H6H5SaVr_NcNF:2.W_#fPei30+0"*UuOt0_5)4
%Y\K;dVRWkm*OIt"I7)0eDBquadK7+6Ml=-$0]3<i4[9TuMI&]X0r>5\_t@*sEFH[D$Dk%7;CCb;JRZ58ok;,P.Ymsc16F?6Yu><S
%+3m%@\9R-ahF\qC9n=$<S4%s=Nd,aP03aL/ii$Rr)YQ3ZXGSgFA"a,9/sf&5-o&Rj6GOjEJ$>AS0SBXU"tg(soA-Vt)K6_!X$gh5
%LVD\u(e-rSOd=iQ9XA26HGr]f%CK8`@5-m[3spU+Y<_k?ZBOnfn/=Tc=6q%L#/()[Lr6#iTG6CiJQ>C1_rtK3@^+927MlP\`<_*)
%Y;Ae:VF6qQZS5B7$A7:]$UJ`oR?W.=b*t\NE^m#GK(4;[\#6lD2SEPa[#P:i;#r040IqH_Whul#.G9uLTe-h-1XJ7\Cr_(j(f0I[
%'Jk_R1>mBaa6C-:3YnU7"!5N$-&TYc@rn`m5c8f]V/^YsjUVl4Ek&i81U@d]kYN0BMfOPKaIf;gK.uJ[hdH,Q7Ck=p?p"uR@.P?=
%9M\#g)RT7$_\2CRbLHiTeME/TQ^H5iB0/K1-ZBXa,VfT"a[f'4eeNeJ#"MN`'G]YI'2fod<@jNC98NlDO[@P+Xh8.?IY2`V8jqV@
%Xif?7f*P:@j-HG@"e3g_K4$&s;'A9j&JYC]26o;5N5koe%WPaPK1';14s`73LQ=584rYqMN:e3m*4*P8C4U6ELajVcNTUd/=;Mui
%EBLXRYUJe@XC*3iQOZo9\:=u"EG6h>Gj+!%V.BYr]Atg1=PCPDm,Q"E^TH\(er9R7gqKbRF*_,pQZDP/>_g;L</h6G'C#l?L1%@t
%&2H3R36)Jdi0eU@Ce'+.=kmF&;$TCR0[#IWas)mS!VCVO-EQFjJ`jPGjU>0E3*:\N7PahU[`ETOEpdM]Y18''gC:<^(LUMed9oTN
%UEgrs=;.@4dC^Pt>-^1]7E3/BJn\U,EBMq^_Y5b2,%ht4PZHh(*s4t[UK.SYD'5Q>'`*WJNFu5hi$edBUFoptJLmDt;`1EW:MN-o
%/d1T%JY3d`.!p?d+MAN'a:RWTam2B$A(eSr>Zf<%T2Uq2c&,7jeWeT@-(CmV7=+g1E!)WX^.n]MJf,8BaU'3$+f]Ra3cT])Z.?Q9
%l-U.OW,s/&YhC"Mk2'OkJe/bR'])]/AV0,P)(\8lFU0Gs.',!0'NqL+/8R]^,c2'"0GHMl&;X`\*JJALod7Ti8.`>tH25gJ.k*Oq
%C1.*W&.%V:WHmU-Q<bXsh:II.>uPo.pd&F1SW@[,HH18:Ybk"QEZR4(2e$_@#0Bt0:k6M"63H.F:Ptm!=?qZe)Gmm$r2q0F*/)'m
%@$.4/#(t=/_;iBUDXYRNV-"H5N-6%&JL`O\`WO6h)cR1KB4[/5FIOYM\HK?aJqYXD-=5nUREA>[,a\W.9nk$WN@\fU`tU8H$')ms
%"1A;j303s6USNSTnBbZ,T]Cd")hEAKYW_JDj=2(Tj9;UJ&E=T]3XWcO'[B<B!>jq--+8"<XTes?W"tU%giMZ*-65rCJuprqJ?fii
%fVBWjq$h2hKMJ/gC(49.33o>)$3AM@/8<lA*3*VOp\N8o&I92k@Smi0_HImZZ*G-I<B^b*@Bb=qecM9.8'P3[pbiIpJR.BNYa-FO
%W3@&]M895A`*.m(-tY'8WqoT!(6gp"@4dGspVL)@jjK"u__V2#/uN]C37%hdFLV!pQOs=45r^nVSdpI\+F;]B@&1UT6D8B>(2[*.
%fu<Q[3N:3E#nB0Y\@!Lo2Xi.+,K_mRkuH/?5o^Y9BfejP'X8)S@;,iWNY_S-#Euus(]j[f&*2+UIdt)[rVUR&jDW?+l-+1cDBg)7
%Yihu-jeL;Xgn[WA/#7!?MS`<P:+RRr(HR!r"!<asgEf/MeMg?_!hn"7o$YT+A_2JDRcn5VhD]`W=kS4%2s3%mg$R,kig`Klc;Vpu
%go3;k-TBBl)alJl*'(\(iWLS`.0eQK"!S3/I1l@:$(X>;Ej<S%_4-Q2\oP<E*Cgq:#Uqr,`\ogIgf#Uc*>&?J+D_\Sd:6-H(L:TK
%7tA?&9eg<Y3D3)?&fh-f)m%E>dM,(45bna(<rfQ64CYlC)!i`VMRYtqaG;RhfT_tTi=VQ2ZW@]pRu/)BDU+&4!<[SbrGMca<_/Q`
%8[-;Y-TB%c)B4!7`o)51(`XPjD'e*Rmbd*Y7gMf]\G7W$<k#?CFRD@fJJ`L(+fpc(-OT_kcre0[rdG:ql1&p/\g]+b1CHL#E'.84
%4bo1*S/>0aX8*Bu71!Og!TjRp#.Fu(^sl/Q8VW$V*9ne:UoBtOP73#>IQ[9N9n>Q+K^`']W?7KFld6Q(W?2u$,L:nUba*@nLf6Mt
%:IigiSjG&s1FpmBo3.Z]"75+8!fPNP4sE0ERlt6%%.Y2`W`]%3,]!Off1=Ws4ORU_B@0fCl>beqN=Ku),6j4Ub<XegW`^4<*PbpY
%$QL$VFNJmK=P6dtJPl?BT&Nr#&9:<U3,"pt#BpC2&b;]a9c1tb:sjo*RBR\6)c8F:BZ/:"r&l!;0[aGe%*'B6lF\l:$A8F>flglo
%Bn@,f5/C?D7Vq`5bYD-N`?%5//NfCelReQT@^S(fW3b%V?a&!`?mo!VAS>D8[$JO2=/E<L7YA)aQjHc.[4!Q-Kgo!`")/C.!c/<+
%AJ++#%=2iqbZ5\RkCW&Y"PrBX6'LHgI'JtG9tp_:YoM88G_!Otd^V@$8;-RoMf!1r/W`W*0eJiO6m\)nG":O4&._:Z*RWhf.,:LU
%S;q,AOMf27NNI@d\QNZf,hS.N[ZXm"]NDtsb[rRR*Jq2!e!!n6d5Pqs/[@XJ)+Nt7i53mj4'mu#]?"*1n1BOt_!aMujA=&:jD(&I
%^Y*hHo>C`:@\Rqs8X[#dOn0$^bb6ng$lqri`BulVI9<71LKt6Aeaf2,_)I:a3&uVbCCgoFG0_K?DVnZnDcP7j?';kZ-"W=WQ]euo
%<4E\fd]b4`&kr/NL73oFj5B]9)KJgdmKGL(X"n.S2[h\K\ihCeSMf'F5eD?"G(QAZeE.<_$q64j=r=R,@%PT"irltV*0'3;S<B+M
%i'S_c+g!=\\dbTAX^l$(Z<He5@[Z3CQ_@Tbpb$.rhb$6OB&MQ5f/1Q=VmEp*R8-gSfbbHXB4:FpY8T15/YJ$k4il]T[o.fX]KfD>
%.@HH3Jpm,n?=+QXG)"GC607&A.?@i80$30hGu!u*g,S1=G[sm%a!E/mf^X/Ck38->IEKDJ!&A0Z%Z"]\N\QeF[\ZDm&S5CkT]2iq
%26C)5k8Z/Uce8rJ]Y''Vc2]cg.3Ddl<,-O]?r"B0"&A$#do)a>POfYtC?l4O1g!kN38@XCD\cV$g<r\[fp/@H,>\i6)#>)m.*P'+
%5o@@5dKWuHW+An:04csi"G]"66"#d)$H/-B:AVlemK04K@"WXM*d6p>G?EXmVGmd/+[pJ!5!r?jE*e+H)`Y3^g;"_-U,=d!MCk(8
%n9CE(]fWg+LV$;Q2SX78'd3oQ[[;WJk_WCt`29>4WsGH"\YN7h34c#A-`_3Z,dCUp,-C10jEM\6_DsIpNj1KB,uAgGX/W(X0#c>g
%3OP&KZm#LfA&NdmM'lu1YQ6Y(^]d2PrtFi"8@7d@Ghc<YCpACbZ]-s9!^l1%]B)KhH3tnbO0`u&VT6An+jaN9O>Z!U5F>%aitdf[
%F!P/1$uk5-1onZC^e/='f&i-n/REIS$LGSojCnR21piCai=RE@'*,K#fO>*E"NEt;GN:r1fG#G1Y$U/>S5`S!'*A"q/!#cL@Y?\-
%9shOVE`;K$2@RHY\<mERDo.%u@Z.TO5A3!F/FN$J,X]Au+DRT'<SgDVD%Vhq2HebZM0Wf&R$8W6)B@BHZptbDgEs+pQ<bYIno<N[
%.=5aZpH6iu2TF^u%0J/(";P!EUc&Dg17XEpjAJu61;.HRFM9F\2<[(]hk3VZ)t<35URU#/S2")pY=R/O0,CQgFQ1@/j,Q9c0uQUC
%FLl-iFp%>`BX0)%.'SN19CD=pU>Or(J'Ph.@g-q<Gci$F"M(U[h.f3O$3%bkq[`ta+p,$TY[HgC^H5dbVR#4\9!J>7b7(n'HtXkn
%`MP/CH)JSrZ=7o^n1nC)JE7&!B-QXbN!=@-mg-skBT4OqBoDT(1HX"h5tLu4V)KmPFL6;7$A2ZX,8*JUb7H!i,-=a3E+qrGY`U2s
%;G)q[W"E]5iA)[]"&A`F?"n.)Bce(4;)"3l;l%d1L_HLMnheD8S"Z(SLT%d4Y]2f8kl!ai@s1Ojr^=UT^;<fI$9RYpE:E+HAD$P9
%+[uHJ0al`;b`ja+'qs5lV\H,N5B'F$-:hglpYb.Fl#ktF@e<W6=8^4[a_A\n"qBQc-Z'`<Qlb(#r\pcbn,;CQ,qZLSJanF%S-\,(
%+M`pPh\2P=&,jq*S>Y><>=ODa>JSDJj+)23rE*gm2dW58Ydp8iJtuqL+MF&f)h[G]h%lAZ"?jXF3;3D+\0OK(<E_3W$tltofAbDj
%Bn@0Ah&a6G]M&(.ARMlK>>baL;S](7d^$<.3S8<7/$6W6JpCYA>[F78PL!XI_"D`<H(iY(?8/#&7mXbO?Q02J/9mg-V]^pEJ(js;
%QB7/bEt.jM9Q5Y@K>t/bfkMRm'Fb@^g-gAt)\T;CfFX0<^<mNJ0uo5$Y_"Tr0Q"Y5A]+VHBplbi-^V>:2bXi@9Zs:os-AB_GF:`8
%-<-EF9fGaR"^s#lg46/]l%Y%V#u&uX&>+c0QF)gN8ST$AT;!aN-;BRWFYcJA"BNn418`<a#b5e/8=[I`"pFUU9PC\p,U.G1`)>tY
%$sE.s"]D48V8ut7_q9#BPK$;.;G3X(V8*F4=h(=cepU]L1^%fV1,>+>kt@-p.9"EaoVK>1r`mIM4d3V0c'5pV=<T.Q@7k(dR?C$#
%;p&4BIYK%jVDLT]eBO6'/85rL/n37tWPT7B5V!h*a^C)A1NoedoPi))A6A$mg("^S'6-LoM8kBk5ccJGUqCH%,;?r98sm%pb,2a]
%_PRAb"#hGgAY3RRQSbF;V0*1=:N7(,Pr;1$\t-^8!YbL.N+mVcCoWsRCauYEN,oZ0m*cC9S4;.1b#kZmL*Et'1dT:6bnN&fBaB,9
%@aZ0/jKi^uS'-`]f+4d'iX8N^F@RRGE+tL5qf127]i^Ik_l]AEaUN(#q4%u\D9i<=o2=Xa/3%M_6U?(FpM*%%1b<QI3,pDAga+a\
%:I,A&Pe5j]JM`<[3\6%]5Jlt&L*np>[%M0tL1a/gdU9>r[`KXoHPi42!)(.]CW-C!6Y`iXfK)YA/Rp%%cm7Y[lGDI0>t\&[KL1'E
%>"OGL\pQG=9=W15_mXF`]:^7%s!#Y%Ti2%7R#ti@2YtIa;a<e!FGVVT6QWjt'os-_HX+CBQX5_)!&b8Ii+O@%<Pg191#Zpml^6)Z
%d9eR^L;'J"6^]*bcVQk$7!gg^N4?hY?k=A!.?0Te@1_XYjm]8#'QJ_IE>gr.5lnLRjO[]fL\570#bK7:/r*q,RMdH:G`E&*SujD,
%fFK"A,Ud(0j/=]JaLKS^W+:SqCik36I4>F4;;a82_hglX70kU;RYWQ8dLO8/k-!f2Do*+3oo`O`#tGGuZ9W@"j^O/nUsUUAGK(1E
%nd7a?n8/_iE/;Ha0bHu#$!5oV.uf'2GTMq?KB3XSW9rhg9K:Z83u6hV0oj5oL"2ch+;Db'*-HdnTiec#6\m"`Z%>mbVoC+j*E7r>
%EA!W(O+`SE-,YlgT<R23/1k9_<o(SsXGBYWX8pJ`W]-<'/+o<e.tGT6FU*h1m11gMo`n-\lAl_<,6*/ZlF(pjYpOiR!L!QpI?T"m
%R)h;0f[.,0O>YMs[V6T>`Yn#CXPdVm@j*DjH_VdQXpLkEkGh3^.Y]pF(_f;2EDhRiYQNlFhTc6Oq.L8UE&%SNRbNd5&.6-Pr6Z3c
%=MJ;:X8`fk4r6uM6W>.Nd>2#/<.2"M@0^'[pQ_b>+f]D-HaP/:?#BTN%aX@7*Ua#0L=D;t-8,oG5-"$C&YkaiVPP#M9*E.C6&U@F
%M$^&:@Y1Sb:]tg.'K.?aTg=c%%.fIi_mo\t<AS`&r>-<^k(E'UDJD1:Fh]oZiAnp'gSp'3mJ(7kph(",DnE"%E7Oo]b_G:_3H&&/
%%r0`NH<:`J(GP@?ZlW'?<XfMLLsj,8aB6HcWnL?s?uBrDQk^O=B-!sN6X-ospjA^qmc'O5YP8q#nq3Vhp,slfO'3%M\rUiUF_OqJ
%c35E#9be#p'k$T==+e>al0EU*NYd<+`"4pZCOcL1i!"/8k)Za.=YPF1!mldCG>tb<&V*W@`PpFCpng8Gf\rt`&qE_V:(b>WpspQL
%:<F,u:'?Kg2$L]OBF^41$U?(3DUMnn8>>9feK=332S8G.-&E98?B^aL`\Z<nho;8frTH6V.Z>`UW$mhJ[eL'HR8.i1Q+Qf&P>tuX
%&]9"+f\mu3)2CqJ4cBP4d#!;BIdA+.nRBjqgF25-#g=Ab7186qk9*e&>D8BFB]3e^!NqcU%G^bT5UQnl3.s;h/L]PnP6D,Gp6e08
%?+<AH=/7BRU?(Fm;V3``-39YOODQ\mGf#lG$QuC0:OJ;a(I5"q\'&&jEQuG=)#tX'id88feFoE=^^?NTY&O8mHg:l9q7$jn\u$<u
%VYB$BP?93uCnOF0&9^rZe6-VB+d.(Ol5YK/K=(Tb#ZEVImmIBc:<6*gC]k"IFAbE)`rK6j]m1JL4EFPMCjJmDWtC50Mk()NioQi4
%cmmF\@ooN;,oO(7$DX\hMk,EhL&h>[DH.7NKi:jBBArR-bJK>V\M$oQbr@;Ga@S.J6*39l)M(!2n,tBTHa>=N'nk@m)Gm)q;+gjr
%A^"*-m5qRKV"7RU(\bnhWF@=CWkM$],-Qt&@<.d7HJ,3RR6H6k>fg2!%X-Jk(h>+-:*;TQBs[-7\[n=GIoRBu8/m9:MA`5/@0+aZ
%VJ44+eJV4L[IaW!Mo#OeEtp\e^!nH6V%c)q9Ft=CF$\rWZ>4<3PuFdW/V#YbF"I'I;\`9D0=(#NRL?$d#ms=mIY_P6$XPT6Is-$g
%QVKHBG^Ypt$PS/db75^;khMYg]]ZaQn#A^Q9QEF@/K2L::1iUDPj1+T_sG;L!DP.IM^?S_R:A"mQF`FJV:4<g@"S:d?W04.+@>:'
%JA^e<1Gfs-K:rYmn.#Z4X==\sk1S;o$],I5NPt]B,(0^!:'N(r,$i'PH9;l`(+S:GM6,C72@mpf.Z.I6q"kp7a3_Vn!T*&qi"\&1
%Ng><5"X76'0]I6tfXdFYhY'c4/E&DsY8`,g30hM!_%s",#'O.09k-9hZZ9R6n/F#tJaKV;Bo@a&:Rnf2e+m;)(>+9ZF^&6(k?-Ht
%kY=fh$OgH8RW?DBJJGc$BaS1E>FGW6(%nCPf`+ZEi;6WF!cjp/.H'"YTUQ#+mr65O2$NHTFOCj_^gJ"%>@;WjQF=R8%^relCT_AE
%kdCiR;`9Nh@/6at&N;K"KY<NCdM\+4VY$W7iCCK>$>u!CPBUtmeOXleHTGC4m[(`=JW@&j36)3o(BHID)7hfTiD-DgiNI2E<l?Br
%\-)qPM&A%<f6WCcmHKE33+(s0Y_MPX&0VQdj$<ri!!aO2Kr8%g:>E/.+"j&hO`!mIn-4MHc<tIY,8>\Ma;f<H#1FgDVAQ*6h2=Z;
%OYK"lP/.JgGj:=R!=(A*YNZ',kf-K`!W-);'RCnKBS+$&.*`/c+NcYM4Zr'>ELIp[<A8`m7t-*-QlpX#J^X`.FDD6t,Xf:DKa8;#
%:@g/*!"X%NXVZT)h#g^Q,7SlL;PaW&=R,G-&stkkU;ICn"i4mod854'Us$&u2'2_uQV/K6F<%'.fh4^E2JBqK#CmKU_o979#"]5Y
%e%fufljXp'9]-N7&n!'o*s]d:S\b#c!Q3:C<i&%tI)-*sJSn;(k`:cE`0'-fW/d-O'T:bt$C\o]'oOcV7U]m?gX5W;TSU"l'8pgb
%J7#3?W3IYV37pP,4uAD$JW],a*,s\a/*+LP%LP5SkQRa'!Q!n4"dnL97Hd%7#FrWn)LB2=PGZ\/:1tIO4n*->L)tRX@%dfFV[s5!
%@(T1kci[#IU/TDi*QjJVci^!Z9ON1:O`'i6m4lrik"p[HH9djM-3n9>$Jn=pmsJ5l$$ZuZTb'<>/dN72UN4>k"X"S;eKo%,L<3Y?
%Z06.6=DV[VHVrOBEcOj6/l9USIVceE^0lRQeh]o[i,2C#k8<Ge:A=s=lj[jS!.Tp9FU]$d$@AHhnAJ/I=.h(\$,("hg"ljJ]uFOs
%%'K9"5\$6m.e!ETnCT@dJhJL%NHE3uZ^M.ZQ3n43R&/8li?'%oP9p>@dm=0W_$^ioKPuZsf5Ud&i0;\F#nc+bKqTXkS@(%1+bGJZ
%]9<dLn5r.J5eG%rKd]1hZpU2dBV]lA"LMTj#\`'/,/DjcDus3563K!4Hm(hP1K5&#d-qYlTM8ICJ2UV!KG`)(170i:63UJ/$)=@!
%gtEJM'b]>abuB4/JP=FlnAr7SJG3ur]X`K6GB*S#EW,=3cNoJQ]`-9+H2CGV7f%.Ep[J%<LWeM%p\F9\DuOd:0<6b;:]>aOH[GVg
%o&8JU^&%ZMe#V<ie*chZ(K\)44%TK#2u>Sfg]g-UmZ;0'KOslXSHG85qUb?,o2hh-\^g`H<hJPio=p)hDG`jkaYpjo^"d2q+VM!8
%@*.nco&m4JfDC?8dt`jNleIq6msR-KG-B1j><^a>;nr0Wrr9aps8VMZHM,t85F]A4TNbQn/gNg`m@RidbSh,e6)P&d=D/>,*72VQ
%7S&ZB.VT;d%$WU<l1b3gQVtZAe0_O/4XO,c66KVebt8(\=V>9Ls%'__dm9FPK:b#p?^:Xi6=258r?P[KeRGO8Y;b^hDK<<&KHckh
%n%);0Du=E92fCahqIFYmHM60mX+0s=iaMTIQ10gmJ)S/3G8]MeVJDCH'"6]Sh-<+.QP7nS^U`+dY!63/0&JmY<Muqo^UcM?I^f2r
%`F&XeEKd6aM3=1re1tB:>j(hZg[=Y'jtE6>ogFq#=]C7Hn$4/6FS5=p>Z*^bi'NH-hUbp/]Qpdk8QGAqIb=$?=.@[N-Z[d[S6'gW
%k$'5<]70D`JDBGUe+8LHb9tG:aKSc#2)H\V/p^j_HSR`j!R^WD.qg_=Z:_kF-[iQ=#($PU5FN<5p#,9+jtGCPJ-Ed80<Tf\PX`uk
%<RLi\\t/"u$_l>@%k37q_kE1:h8S&kpWq",8MSungYHqWEDjr&F8\!-Or)Hf.#B\EiLA#SMsDBkIrTnM]6dQjZV8iBGZ"1PMW1Jg
%8Q!h%KkVSXki27"k5,"$,V=j-li5Z:p%7(bo,('I@`FV\pNO6m%j5MK5o9'=1,^"l&^Mer:/;&[E;'(ol/h$u$;ful!.DQ;1\0k4
%q&oS,RZ_:t0tliTMlC>#4K!jYH3%QB%G9"J.@[b#gLRM.F0\U8MdS7RpA^Z<Zr)?/ER`7>Z>lrUA=Q+g4<sk_.\eHTfhJ(i-UK!D
%_Sn=RBGWkpAtu'O7?\AO:k[K:!.GI$5Xn!G9*H`m0TU\/[LGm`;?u<_(APf\?8j=MJhM`lF\S%]Kc'cZI"l>QGfL;(;fT'NNm'OX
%cj<A?#Z;D6'IGf-.8JrNm.CGV$&8B[Jh;:AfM,3.kEto\ZXpd+]inZWR!FGpcJ]`b6E3I'Ka&n\a/SU1B%38X3-FUhr=lq*Fu.YE
%.;"!dfqPCtcTTO@T,CgS_@f&fG7(1`mKt>:EN8s9(q$;0btJ1t>EAhH'nMdC@$eHm%(K^qQ^V1de!W1`R;?K2(@&7?iC*TVV7E"9
%Au+QEYRXhD_P:RJ(??U530aS-(PIXP.&s\<OAThiZXm<,Ca)hj5shh4-Zp3)[J3NiEsja\SXHAGDJ"lEKu)!/!IJl7%<`p*7:sE<
%2]KuF2lAEg`L,1TZ51F//BFgYc1MeNYbYGj:u-`!WnoRL,HIo#)/#EfY>tCgU,UWJ@8T0<G+51^IG<c7l>e2OF&Wr1SV`%73(7p9
%)0LIsiAm/5dn5B:=2V==d<J^*dbnj&LfW?[+R0^sXU7P@1!.R+h`m.d&uIIYC&=kR3gZ?#^g$?!aGu\0cGJM?flN&69^O5\=l>DG
%7&T;T0qIPNDRl0Vdp174Qr[pi%a#GQ_kN/r0B-,GW?%NeQ:d;])5'4T-W]/Eo_RY!_3]ZHlH>rf*F/[Br3'B6.TR&'onSubHZO8=
%qT[j\&$']XrR5qQFnuhFH*o*e)R=b\+cA6+(\\GdV.R/PJdFVQFia4Il1GQgDf.2$R/_rX\Y'7J:Z78uiQ^'QX53HdiT\6opT&3r
%QhT#Hpi^W]$S\K&5LB;Brr2!%S+GIqa8`^HjKDXOfD5#NV[qH(I?T*$m(RoU8It6>Y^_]XIY.,jWj?Us0$j!0f9F:X56#Js9_f%q
%H2-?A7peLVL[4hU^<cfUs8;QTF7@8ShmH%j5K3Fq9FL@e4mB+FY;dD0Eo4P.(T#FMc1UKBKXn`UqegWW*6Lgp:Oh5E]t(X:c\S$&
%Zn4)SleTIFfSHH[Vc3U`h>\]K@328`ZeBnKq?A>,So"Ci^%u)-d(fATfqJsJIqF^qk+03#J%3&cGr=:4NXrn75D;W7)"Y%h4dR2h
%k&Tu1Q?%I0W;QZ]9(1[:jVL#ts3+qkIsH&-?X4He\2&$IPk]QKHF^eiJ%7Ogq"?]gbR&c*%1K/Y_l4>G2!WiO`Og&\UG5B`T=7sq
%"['`K51QeXT$sJWIeM@FJCdi@Vjd5/B.9.=]/c;62W+W)D8r'7LMRQmm+spRFa*?c!]-EceND/2@.Zssp\O%Nh:Z[eo,_BKIble<
%%oPVN$<Oipe+7AbrE)2%+,S&<39TO]kAZb[N1'_Dqq_(eqlA9!]DJ)@pDcq3ME1I60rm(AOmSY4\#\O^#jK%Zh5t#>mI#0/X6OQp
%+qL&:C0Fp(U/)kSX)&uRgF&am03[;l\)ZcJ]DHMJ?_?1>m-ZM*'-gTo:6-1jh0!mUDr*^[hVI##^SRa/D[QO0rPNJIn9FK>_G)B,
%(QdnRmbuF8l.u1#m,mm$DIlmni]5$Z#Job$Beh"sl.m`9^*u5@AC?'[<N.&-:9X,):GY)'rK&PD3+(KKr9*L99raICR8gT91`_-`
%E;0<KonV@1+'(np(D!E^/hSduIOMnLL!Fu.jRi<)qpTc$eZ50DkrRA<j6H@12Da(c`RXk/e(R`!-1B!$EdN+]4t5XZo_uH/g@r'8
%&!KtjQP]CRFV*U)gP[p&LEW'$G=@`+I_.Xcs):oHC=fJN3>(GmlW8"_1n@oYgu`_:A,S:ZoXimB`[FiaBQDm:`LhRn4+#%3o]Gf:
%o_NAb1/5&b0tFs,hQ?2fmV]b&!Mk2hnO)`ra,@VG(:a0hGBXEnVT%K>*HQCFGJ6/2pY>'*05ho#cUR[-oh@#UF`EDJ\[fcUOsr#,
%PriI`"Pba5^X`O8>0C=TO(^H-"dkT:rUW5cm5GLA[:5o\^UZEh^At],]fp('2c2bu_P0^8d'l'GUJ*(?dnHk`*kcmu#S#p1^Z+[0
%Xa/kc!s3"^-ES]dZ\_,m5Eo?9lY1B&_0dI#T2u-\oDc=GZ[QucE-2L-4roSoWR!3cen6qnR;!a.`S<\LZ7u"l#`)s/Seb8^SZcu"
%J0_$g+HR8Nbq/AOc/!lXRVS?!,tXFle=>'XEP+EI?%;aqFPlQ-mIoAdGO'((A1QScC>-n[d8\iSMp%M'1eX:Lki(Me'&kCs!g8rC
%I.nC9?MUXK&\ZGad`(n6RjXBTW?!on,fLqb%0e]X,pan^"PTF(]R@E+bW`hK'0k:-5!/.;ok^7_RN)qu;>)?O3kbFY^;]pdM$qn\
%8?8tD7V[qU;P1V8ITW4LhVPrZ\UI4KDsu:3mUYRsJ%U^.f3&KuLj5JS:+ZdCnuoOg];[PO/\%&9h/h(@:<-P9)6"]L8&PB+'(=-7
%mTWgO9,,EW@KkQEn#uQRC+UdLg!pVj4ef`,_OH=!GB])Zr:Z/Y`;XKpbrI@$1Z'%]a>l8O;@9XNG>B\O.J1a@mVUN%kGpO+X:F\O
%^'AJ@ePsh=Xdu6k*BHJpIj0lg+pB,%q?2jn:)MS$PSQcfX./]NOiChoh:%!D:;[0dl1_'dLDY%\lcF70$oF44p@@R*7i2lfS6b#:
%7`h1_+ZhI=YjU'.pCNY[6lORP:Q5p0U(*Gc-ABula^U_9pMZj-DHThB6GWDlWpIt6(eKc8\_b$CUYba+[2W*.o`HgT5Eb0WJ:]p!
%Pa=HQeEaTAkI\@^r?M1&QF'N>7;9mAa_Ge[.kRdDCe$XgF)PsB*\e0Z_>PTQ`rtSoT4N1Ani\V9Um9hET09%O0[].X[5c$aUj>YV
%At<5<nrl;@?a!Q2Z?qeKOOJud*<5ITYQ*^b=9&$HX7,GI#,0>WWOAC(Xs4n.fchs<<ba/Z@\G`IQTMSJX(/Ggr;FO0$k[02bE0&8
%.\u3;[1=<MH@$-d\\*AL$Fc(b`fQ@0UEh\6^7jiO.\!Zb)LErF0u`&bTgr$26S*r)6RAS"Qsok]^21(1miF8VC$_<7>BJKBGP;pB
%Y+Mr>+X-Yf4Ic:[6H,UYVE;I=Io/oRi>`_/@N7r8'mQI"VD/kBnpXrG5Kk[mP%$0]o7ZkMhbF/Q#^;g,B44>Ss4tY2p11?KZ0iaf
%>onC]mWVLt,M!m2";*hGfI[^+T5WTa2EPQ/N;_VtNC=1oP5/qEPUuL[L,S8a<tI.nF-nH>nDs4sh-E%:5rOBA37.hgpVtkW*l'.A
%@*;tR]J@6.S\TepT-)iO/?BB^n[F:aY:/cs3A"+%s!FYhT7/@/Iadtj"#t\f0ASk,n)3[p361%KnB^9hB(;:?';M9rX3^::E!*#<
%:4R;Pbm=@jhUhf^j)*")n31N$nh7aQE#=N<_&ZSX%Q[HP30+JC>g"6#LPk15M68\\OL.bH7"chq\nIRS`X''*NW=aeCBGbYJ8bim
%O-^P/TZP/t`$L.\)WA`j)*`G!oPgU/!F[!fBMgN"GbT]m%^9LG,e/1^/qKImaf[4#2;SDZg*`(@12njLb1J5'$V4I0m1`CG@"<=4
%^"EK-f:tod+<[0X1JE@=h/QE0%!(Ygomi'R;rc:/PbO4p:'Kdg_i;N0hUo#[T+iu3i']([+t%WFKjB9!I&NX*=+Ik@CZ[r&W5?/4
%;fI7#FcpOPF+AV&rM2LYW;=g5E&LZtL?Zpjn(4>deM,@eiHbj%EJ.hE;M2?,FGCW>7c2n8:lA!/YRYU`<X-,-?iV!&@'=MGLd=aj
%^km.Ccg]OOQ]%WqoP4t-CB8+%F8V.ZZ6UpHQFI4^>[Sot(:.s,U+'>ii;/*llkp"j'FQUIHFQj7+D<ICJJ^?^c]F;$TGc=3KG;_8
%ZRD6Pq]'e&9O2MI[iHH)WAT3W@iZ4tZ3l6eC]`p[/<%L)>$r1gLE^RQLlI8:$j_`04f8K=Z-PH?`&"r#2+$2H7fq'KJ3^4o^o[j[
%$P@8L1natRQ_hnD=Io[rW7q?C1peBC09?68P)$Xh909;`%acl2^l4[9E<:6$l5$ZI-o<J0j-W[7f1Hme?)m]'&^'Ka]hc^G=]7aU
%8C@k7Ua[GF8Soh9G@h4H1`NF["7lj$Yn,VLG[_aS.U.J^82fBpmOJK&\i2'>dDIgt^>cGK1XPh;s4G#?+ZKRN(06bl1mbF<%5<ee
%b$L^\7F3#n(g5`PW/#^g$7I-1iI:O;2!Hd:3\t5ZE6C`ZagcW<a[!T^L6PLn=h#S`g^Ad6$<(bl*mOfjk-PmqMNF@P&BY2[=?o\;
%*q]c>Y0m>>Yn`[^`Z]%-*$U_,#A#JPKjLV4,*;&:8_nof@'aBhkXcTL:t$"<+nq=WisZ=bU]I?8J.#3W#Y2815eA)rC*^kafFd`m
%S5'FST)g?"!Z<sSNBqj.V4Pb6B0a-;0XDdA*O'"U_Km&:'kdT!,>V?J-JX]a&QGieH5D-OWDcFL$lDfO)it(U+=I^X<mV]r_8,<1
%3h6=DBaTO$2H_!sUe_bWdO2UBZa_>!!h*H>arO:IDgJYgFkJ)<,#D@nQ>5@#Ju_IH"L\JY:iE55Ii6>\Fk_4%BekB6gNo0P#%P/c
%1JQVimFMKpUS.`/_)MPNb]7)mHdFC@h@XF(q,AK$&,iT9cgY`h!Cp*Ea/4MKmh*o8;C4#j`S/4,Q'$`Y9n3X-E/nB.!T3N8KVt^-
%A)4CH0J?T@ep=cX$4JWH&EQ\?.r8To38>2RGVoL+ll-CdRfWX>WGM5"8sllT*_s7`jLZMl:g)DGbK;aI;Ba`#EX`:L4cPE0!-:qp
%""Nn?>#h2k<iot\3+^Psl8YR)@aF<8KIq0/a9jt[in\bb#'WCnOW'ir$HH'H0Ydj5#YN)JDK50o*PHS1`3b<;7s-RHi\PU`c3b)@
%ENHim[a[/^KtDZr4#j4g9Z.'bXKr/Xg^CnS!M\\GOB#0o_*D&1-\ukE*f`YceLh#57XUYb9H4%$!L4fS5d2kRAKV[,aXi"e,HKJ\
%d'eINd;fFf+1]#b%V./a1MR%4s&kOO>7DL9R;<Y0lNWSj)!4HlC=U_Lq5RAA;Ljbn:Pl8c5:[X3bWE(8JfOqI#:K"M\+et8jfC@S
%*\q5-UKaaD#_4(o3(_^,8#=2]KaGirIZUW67,obiDj?=#'W<jT\P.W@On=gE!'u%+muS-i_dL"7h8m"`0*,M4lnTG#Rri*a!kk+F
%">]2O^bNdcS7'nL"A']'<?32H+KLMO@;A#Q]"laF(^)JAn@!q9!7nEXO`YkRKfe3)1o:HYnaaAYS->9;&uMud\ptc*eY5;MXM)R>
%00fVpTc6<N98^1TYQ>^77<&?b*LI0p*F/;nS7BX!cjWr4f8T#6NjNo!]%.TM%hOmA)TJpF,m#t$,-Wd<RSq+0B[VdKTRbQJ:tZY9
%F)qAQlkG4HgBoXM1#$87-UncSCa<3me5Usf]dK,1!j^A.AmY\$`9e!F%1DfT1WXna73'TU^smsEQNeRF<:;Lh(d\k\U-Mf?VhuIE
%XKdqPJVL$)A7d?s^G-/\ZN=mek[>4'IOs8;e8XRNV_,C5=U=E2>GT[SmI?QXEqV"[djb/AOmShGTVh[pP8b"QfRse`*+3GY"cf4;
%k?0Re%Po5$ThH058`48U5e/[&$Z'a`j>@]%P"1@Zg*D=A&*Oui)pl'KgGqQ($0[?1ROm7.U!l$3*!'0[jcO<=kpHj_Hm,F1POp@-
%D76+W,ja2'YRgiVR:.QR7L'GnmDs?W5.\"NYWN:PIeY6qD@b$3ioRqgR=KUUH%WFY&2*YB8#i<(;)tuB0]K/l[+0G1FB=hc:2)iV
%9&7gmcZ[`-N!4?1Bc&8VdIVI!++#%siHc";"h7p7JBhiRAk_&<l/56X0?+l)4DRdm6+@^R$94%K:dq\NZ\LiDWdD6CZ[fKJ7Nh2@
%Tk2202p%3%V6S_E]Te&jIY@BC(^S=G>VdE&N]<B&a$[YJ[nX.LXoTbcHZV6W<c%7Ro-?>Cf2JO!SkIQsmhduA";;almq`/u&\>Ys
%WCc8u@NU!XL_I9%jP^.T6UPPk)ObQZd`D?f8gpB\[CQ^*PQq;^J3Dq.i<frlLSgEh_qH_<^19T9\nH'C:k9u-i/mrQ`kJ9LZQr-1
%(Y!rU9n?p(6bFYhEi'\i^]eEq+mh[;<V-]AG)PWT6N:A#k2u1n2]K-IZlAP+G_\N-4Tlt.I7V]A!?jIV(-08O>iJ]n3b#Rce8_+Y
%QT3O#`U^O]dA^)@EG@-@]K_agO8Q\;?:mW(o/--iMn`WWEI#!<kEOWfbB&<V*l\j5iI.J=n2T]WocJe+jgi0TH+)bQZYOP)nN!c$
%:]'S/Xt-qH'\-"Dnm%/90@((KQR=so@lZ3g[T()N*r30.B_R*pD-nAkc3JZ&SpTgbbB&=!36cr>pXhKLNr46]cQfi<2;3LjUV7\'
%`s3E8oips,d=Dn7;NFD`(G`Id/RHIOZ?YtlM!9*8kF(TD*aT.%DWmFnBb(.,8+#+[AUW\DGMe<-/sgB=XF^9YgksE$imMD$+";Yu
%7dUXn,'&jUjT&5R5@Hkh4UZLF^!VU:h2?qlLBj/qq<8(.bKlXjZKsHBRgT@#YZkBP*O-Q8h)TgTKN2/Hn7,D"1O5Ft@/>eR<">Df
%0BYS\pno3nhT,0um4iNkB(n07ULA^hOgMD[6Eq5?HZ%VU-T":1^.nfS]Xq(L:hhdT9kQ[+8fH$1Y(blnT75;RO(6_,qU4u_,J:sZ
%dPV(RaL@k_!_`NEjW_=>.BB^9](WAeLI9n"e'DO$4o"ij=MBD;ML`r7*"3?@\f8MkQ',3+nD*O.Xss<6"S%d\DI:2WdC6Y/S<pZE
%n;pYoGse4Thg%Q.=#knn?TTBZor<>GYC<mbI%@2,ke[GOXW0:BGH2<GH!N3F4F_]Xs#XW*b>JgJGf>+da6FAYF#5-W6^$7)%^Dp1
%5YC8n(NfUC^SNM!:bhF\'R"LteHONL>'2\U\;XSR*<q^(UeODA\j!rc5g+o3PaoDO.bBQX5)foeL?<BEK"+lfi#\lJPTPM?kca89
%!jBl2U]3^.X.O/-C0\ud,qu1IS6ehL#*7oLg-<U.!l04B1hTtl'O+L"B9q_']GCR>_s3q&`TG7md*;eK+hjCk/V"9O$NTm]'\^(t
%d*Sk7I=7iYhJk(H*4A"8$O)jR#:eJ7!#ms7^^9F[>#"f9G`;U(rZgp&CENHr@6^:]KLZREV%>7q.teS9q7.3Q4>5Q7+RE^[Q?sE`
%<C`\R_%U#Khu^AOLbE#UT=#o'QTfZf@HiF5Nbp4X:6h-kTatU<<XIAU#W#0XQf4,=bGB2/K_%j_#k][6gs!Ae_VLeN,=Ham(oKiZ
%?]3l>s7k-oih?9u>(^TQ6$DV24,&GZ\=cbFgu-Td1Z.Tj>Lf$_R0/RXjt"*m#NF+(&n\Xta/KYGA7"!9XUtVn-huZYo%FFEn1hkr
%#G)jm#+%fHUQH>#U,SQ(Q,9gMNS]p"nl;h43gV:KH_h\hiKrZt<X;!.i'=gNp%o&e)\W_r^/&^g:?1`.?T`NdkQH&]_spg7I;XUW
%F]>YKi&:&W9ciXV4nDJ*&GcVBI]2d:0%-eBr7Zbp<E3>_P=^s@^P2o*$Yt1@U!K?kefEk4NqollqtdjHFfHPuf%2T8#W]6GY>/Bp
%WL"+*)g&1R"<1mc%(^\uYtFE6Y:\rXL(2!]9.JZl[CtGji#h9*[I,HP3jsP*h:GG,&-)=#kM(L]LN!4k^\M@:s%^9(LK&4sdjET6
%'H]n_WSg-Skm/Ok.RiaX_LW.*BHBrMFj?1*M^CEKOCs1f#$0U%'-+E*Aa9)1b/:AUjPfVce\PYrKB@m1$YV0/BHBQLGbbspmE>]D
%g'sXZ%F(!a34[k4UA?`>#ls!Q(FS(!`:Lct&o2Y%hA3nQ_ji*7Yn[cX#4hr":C><j5P,K5.#2s2&`F5BF!F6_Da..?K4aEi*TBFd
%11fhlQ#E@^045kU-`T'ZU^%C]7mLuDok_`<nq68X>PtH9Rs4Pj>-Gu6>[LUn"Hp/qH+Gkn;!)UMLTl\5JB*11\++9ZYEKN'fUP35
%Tn"2i2`8p_WT6h;geZ-f-@=QVO9Q]3F"/9eFZ)WueXe9))IKJIQ&4'<80(gs[/',bXL4*ZLS#>@oZN:RcH0LgqSdSRYklqRRX.Q1
%8Kr-SOBG$A!%8<*JC;6u`f%e^BE8lg]f=S?]4tYaM>%;,E9=;QZ<RL+pD/k4?Oge:#!:oLI_7qW>l>oHMg5,?+qO`'+O!c9T%R*$
%"lUj:i\qJeD=LWO-ns;W1f+bKeqXSS$u=/Y+b9^tT7U7%Fc8EG![32!_13n;M9(kUn<)O`@("Bb!R"DBj6""D/-Ho^SOh/K(j&8G
%';5pP/p]gb3d3oOodY_EI"Qhkih9=<PrgqK$*3U!=\/XDXP!-[BRkdWZe@LQB4jaPeXN&t_D/8Wa9eYjUDm1(+t1kDmZ=FQHI@jp
%OOCD>q<Y2O0it!L_[pkYk,&hm$tnXVJYT7+6X*<+H#5-VRfs/j%V\4r-iYZ/&e;c7n-$Ch.c(J:s6>9Jj)D"]6gNXs7@!_,cZN#A
%q[[#6-hQ=Sncc!AH%`dLL5.R9E.jsN5.b\'2,_Z4'gmT3#W#M9G$W+[=-F*1,KK"MGkerI%o.iMaN2VX8+7LERpGu1=Go#Q$7(j'
%Y]=TB%DO$E6T!Ne"a44*M:+/fE5cQ9.h&eELm*I0YpVVWo?[K]Wq;EKBPQ`sXdbZ,0duViBF#$]XP2jjODSpCPbNU!8XbguLT@IK
%RS136MZY:i]O;_4>_a*pZ[S,D%\BT]D+#hPDaYV6&m.7hiRML_/V2he?Vhdjb2$Ib6'\!kKli[NF;T\KQqO--a+ke'C5^)ZJ`p+@
%H&$l,SOap/8i7.+Niifi;X3FB"/A<*H$(0"(lk[BcH@A!?s(qlA$kC$hsXie/p[W0.3T]GNl[uG&DY`(;dW'Nq?1RdYi'6fCgXFA
%M7pgs;3HLUP5pT;?g]=t>;SqNanA_215el!BPUrkaICr)#M^K^6)&l1l+;LYIDVPDaWA]_"=]MM\hiGXBH-b(])*J[E>D27U^)7R
%]3UL4HWFDp4hKMeompo`ar",(qhE/&H*'LUpJ>gUZUsD&=nB/@Zh7>=Sad'6M;0/s./364*B_m^pA'c>e_*tsVC=@,UVV+O32Bkk
%H?mhGo<'s-^td%1%%<Mg[8Q?#CEfoVdRcBprtJcp))':t"_;3u5`Z2@!3;n9If)M:I3F8']T<VC2Q>gQYoX"`D>c08,%@K(jCjfK
%Of7k*JdpPA_qlP2`1YVdbKYSoC41ZZ,if?MJWR:Z%r_s6m.dt"9u8UGK]*X;L>fp!&l*%;#!K+K*C:>%I`Qr\NLJ@T6Lm]rr=;']
%nIRTs-7Wl&jIlI=.B9&;P[kf_P)1F&X'@tbKL$q#!O>Heb?,!:P1pZm/JJcs2;>M`-Em7/31[&m,Jh*3hCJL*W_GG>K#\\F0++LQ
%3tCL7k"m@^qms!_ac+B%#nXF`VN?O:%0AQ+.0ZVa>1.*H6jG\I!>C0G>Kh,pfMAFM7Ma8+HYSNZqQu;+3:BkmjH]"r:,MD_"WHQ-
%pNQpQc3'N%Q$9!YX>;T^k5C[&W-r-Hrl&%g'm#qM$&7p@P0">=f(hA3&TYnt=WD_"^JKa9dOHL'V[\Ig*9Z6;$S$LUAOJ'%We<>/
%B%C;@P=0QW4e'u7%W5a6-Y8X>o_n%U8+-V%Kmh/L<CnA4YlLg!aQ_\,+f\sa.es'0/H2>*qeV1O/u]aoIDCos\r#S.!b+HCcoeRU
%<HF,>KWp6,_E]1-5]_0C\&0Wl,D-K2#0WdJ./LeKF:h/7S?Q!dMqVKp)Jb+-F"ZPD.bF9U[@eD&Yb>SaIoTdI8^%T415-nj4l%#C
%_1n:YeKl!LaMo'^jP?gK]192]&(O6M^9<Qi_Zq<FfK!apVHd&Bc01H;1%=5.S\pppPO4[()NC2:n''Nip6?,'2FF6QM;&sN5=^as
%\T)$D,<b'8a']No7Qg2#>_jgTBi'M$$\7@>UTQK)6*qn89N'!\S,M+^BC4shbV4bXOdY[bVc=`l`-8b)BQgp.$0A'XX3B+p9#?2T
%:D#4r2ANiWIu4R=NoVpTCFa^".g:Y$nINi>#oXRq$^XAjMU>-9B^VY+%7>1U@nilnMZ)Wd_NJrE._8ZAas!?88-u7UCG#6.0e"4t
%o@%T1H#oCITJ[B30`(&(]-^f[`c7XK(`'V\eG3mfLO@B1m+i)@\dheHR'C#[k"_n]h*&K/m0%DrS\!MlKnDCn=[;FM&l$)aiZm07
%YOg'^/cN54*8sR.jh=6I:n_TQXck]\lVmZsYk)He0%*mLFP/n0Z&cEc/>7DrUkhdkTpuoJb)Pbc(b`r9p08QoY)@CRM,q`n>VW/'
%EKN^Y:ule+V!.:]idHq5!&"*glk_+fWTeBW(F`hQ@XP>,5#j;*gTL,JqF_^0E_hY]\4BK<G56-?:,#'Fr>n(W_p@oX1h4pYOlA<F
%b?U61NUluO206f,MD"'Gm[Njl'"MmXkThb:QAQNd-+9*]_\UL-WE@M]WAm1H.e&9%F5F?)`:T*!jZ!\aEUMW5o=)V6J]RC/CP*$1
%&]V7ADF4SK:8eg]<6UD`?L+X"G?=MZ'6(M6qX(Rf`*fJ&D5]_h-*894">RZ-([5A,R%9]beS3<rLtREiU#L`kU#H-u:]VtEgAs'/
%!&?@V@ApsQ4Atc^W0j+_O%.e2'am#2'dm[LMM[^.E?*ra.\<!o'Os9%IFLd1X)Jn*0HC)hb>9q0Vf^O?BW-_i'^'&+fZ7L"f\eMa
%6kG!ClX\!:UHj.ml6nZ/(IQglkC)#4&C"CSn$nqJbOYE@K:(T%.c2kn)aMEJ6er_;b6R)sBI;<U0;B*[0tCHdW9b+aB)fa1%`u01
%"NOG8"Ja2Wh^c]uj1.kROeJ8*j9gf47T2p@Krm9E%R"XM?>`MZefE6X=b4r:Og9fTmUlUR7eS?!\J>`8=WV@#AXk0Agg+(GiZcm`
%\YuNQ]td7F6&FD^CMnth9SqJ;5a%LU38''pbgJB<Crk+ibNN<Kl@oe@%0TUu5C\-9'Fl7>>2R_lTe#MH0aJ2]?QB5UK7_Y,IG9uM
%9^6HZ=XPI!gW+2&h&jUF59Di&6\5gUl85pd:6pui(<t5-M2%p&8Fl[pANqFXX\PY,>%C.6Z5(X6/W^[UZKua%<qB.Q2?HCD)6XVE
%>@bl,[*UW(Qtubm5KUB4dIlHK>Dq,Nd)QUr1T%QqTD0e:"b=N=nn>-En&ome@K;b0(,h`94Y0SYq?K#_(iS&;Tj+E6"$bQ+'L_kn
%=bMfU<J5*O;Gf6G]^ADBFJg>t/R3]G#0,'V$`q?7gTE8!;GJ*ZSDPa7,G8SNj:KN:7/:l6`Y_0KA%<M:6aa='`t4UQqGhF9UK6-Y
%m2A?k0I2VGo-(_8mCk<(U(rl:br<Xs$o`\.]HU]E$1c8"7]<fF3G+th'):6B#1,9b<A(`=k2"(h0P\1iA*fQZnD-*Z]$1&WSRWMr
%bgBZs#TsMc5&M9h%l;ELjku2:l-MOp.RaZBEfMlK\&sBjc7r(2#r]k:C]Y;urls]HehR%!E/jtcD8`Ip>e'4<kXk*H:rL<J1Z\jK
%TB4K!CX+Y"]kd8a3<j/Yna4UV<Ll4YDU;26G\YnmQ_,Iib2\Dl3:"rH/2P_-/8,a<bO>[m]I6'I'1;m"?Beq[19B+0LF&-<mbMW4
%g,>b!1MZDZc>H*qr3?ue``IOE(Zj_(T./BC6T\t.*B6SeVG67ZcFh?;e'@nM*]JZkqf6)^5HeOnq6.,4:_6Y4_002k"%5jd%3Ug^
%(g*fFY,Pg,D`9La/O?q6NTfPg;ccp,mEO)E;Qu6QhJA6`?]fX^\9tBBANpSC,M@P3S6(*t@Igm;++_6+P3`2"kHurfbk#j@"Zr_l
%3Km18,,q,Z@BSFjLd/\6dXgFZ=#j^ja4LK/V+,^DN%rd+S`LDuW&6C_2-X&De[:.gb@JSS)]c+=;p2p_?l-S2j(u!$?2#*WqaH9f
%&Yu6I<qWR1#ror',/c$E\:32=WX<Qu6IWM:9\BG5$%8oMWi:=Tq1LQ.lRKA)<fMq0V6?M8I/@.iVB9D@Ul'*:<",I*0[CAaZeJ(C
%+=+tY\W*%>aEG*@(+dJR,)6c3p,r3P:efV&F@@/0IYLD=_?"5(5L6@0H\U1.@51eEAntjlfDn-SkiXKcjFI!7R&QKc6iNTG$fR\:
%]IXX@:\H^7O3%9I6?2',9ja*rV3mZl6B?#A*pX1WRoU8r7rI\;RhUsFRu\gcrT>?#Rdr?(E]E]d*H5VF\Y/YPmCY^NaJ,+6o@RG2
%.,_gq?i`V^nC[bu>?hStCuq+abr>q8o=rNb,(JBfWaI-LdsCp8OOS=I_hM2sX'#W:bD$=%ENp+J8*'NWY.KAQf8un4+$tukW_\oc
%5HGFd+X4p'DJ0u!@0TA:2]t-FAqESIbE$hkPq[`j3uBF(%;_J>1RnG".=^$"2K[T#0$q$B^C]KO2qniejXo?h0`D%\8L%Z`+,%G]
%W;UGM+$^1!fZ#"`Ao:bk++3b'])?dom]LHUEM(E;V"X14rie%Mb&Mm]YP-"I+51l,l&tp5e<?71Mi`)6B%a:N(Za/>)l3.^d#dS7
%X?VAKLNVVfa2Q+&DYueuU9@-,Il;<aIkK(nL]/\B_6HRaZ:/#f3G^p3QU<IUGRiaE8&Ki6NB^*q&;i&=1]@B[O:XAM*6:&;*2"7#
%n:dH0>J5H,g_O2(NP**&(sVV@Gqj/iSIb:qHZ#Z5bMsTmcp8,'EgFN0?tob)@G?lka4rVE*%Miff_F<f-GUdRYedqY?f`i9eu#Db
%1hAL\O(Rehrgn*BBlc.g(gq7W$b2G?:;OBV"[)AKfrDE.=7_:XiCCE[F1GOC9V0pGLmAn=S6[Hr-s@&Og*s5AF1.fZ0CBMEqP<4u
%n^E5S-$/,BBB^>-:?=#ml`oj0X4Rk`CH\\mO]5^R'K?,iY2b<.PcA=3%7qAo&=)TW:gV>YC<\i9R[s8:YAt.Pg]6?LEscS&V!.'D
%bpOSla0;a"5=8C#!KA)M)/;%"Xlg`D67L&CjdA9Ig0$LN'X)6h(``IXAR1]Dot:8";"QMRoNmr<@E;+BD9W4+$&(n+XW#Z'TA2NE
%&cd:rBL2-bY!(@Q(4tja<K4HF:5AcA7_d-kVN__f$F!hj)[o1&Wgq`1*W+!^@X7M-QcUbkaoX0$-PM&akVa=)qOp7mlh"<d36Xr2
%m,2KeO@L):<,D_g;c'<u2Q>TX+jq[1=oMmk13)Jl1]'i>r7DLa.XY`-.C,"'O\MDq_]TGTB+$^b:[!t+NNNIY!+77(N>!"cKW+$.
%jhR02"]a\&0lL8qW652b@o$>M-'arDQ/r%=?c_>Lb+`TD_JpU^'==EpUDsagE>6;h*9qu#pGVqG=^W\%r"o/QWP7YbaWte5E<jI1
%G?A?sT2W-$6<fVpp"%cpl=j1]nT\PZaHAVd&f6OO#'GDtf6](SU^=GMs!hYsJaQ6:7L'W+?#)_K/72-#QXn^INt#8*R14b&kH$pp
%*@$.q-_04&MXK`uK#17oEInU`<">5ZLM,)9<&gS[RbIWAZ&WiQ^)Gdp-WpOcD-ZmC1'tBm/!n6Ggpf@!;Y\E>s1ERUe6ANHKej=b
%UYq8OXD(&nYWk"=oO9g'km13LSAi'pA%B\2LAl?7&fQQKdM1M<")Ne..U1.(aTqtsS9>eKSE3hcb#q-t2V,*L0n-`n26AB*qD?bG
%o6;+0NA>!<HfUjQHa-`+m_*2pE>^E50f&eaJ*j\pTN#tRJ_OoXX9`90/n7TXHV<@XN&?,`NMd?m<C;*N`6dN),4R/W,ai"NXm%HH
%SCX,^lbok^%E=0iZ"@Ff<eFEBKYoKRj(Sge%U0AhXgE:4"m7F@%A4;O;pE1FV$=]"E]bp-aHA?"].Gn-m@ML$DKe^-RWg^:*Ros$
%jpj]bEs"GI`#/tS/<jDe5J]AIneQShrSiAtRm)DY6<!2G>MKfmS*Z2*80P>gFNb6P4@/AN7fd:c7Rt"75nl%;N/tiiPt0mK>L%b^
%X>eEpZ1LSu>F^a`M4,.P@seu<eIm3K>GfNkIdWVYgp-TrfO/l(LkMaT8?>5<pu%q*$Vq5r20KNQC\\#q(-K)%./\$+m57Dadc\>1
%:#+m+TZ_ETk&2Uhji[]cKs-f]pjd05K1'd`!,[*W51![QbEo3@9kc$r#;&"Z&\o8k`QYT$2SN]u1cLYI;`-0$1ei?l29kiH.oL`:
%6OA%]8!AQ*14?BZ*sS07N@WVPMePISpsA(R5sp>O4%uelYj:9Bp_JP33%X/-*\[k_RWZ66:^T8@(5R5_BaRZG5+$WZX38l<W[s&.
%Ze0`4o&5F`I%0r3-R1fFI=b*Jh<!uhKPfkPqmPk=P94Z.).'>3?kjC/$HV#]e<%gjDR"c!dgO(JSJ"s:?)F!95-9HQB)%nuLHDEM
%;rhD1=Zj`X*[^%3)IroK3Y,2'450Os&?!g;pXt=%Ae'^PXEckWK!@P<Am"Hp9Up092qmdYh3H[=<!-oZ%XM"4Op0N-:SlJTqju@s
%X^K4D>/<5h3=nGCP'k>oTKtkJk!gf6/U:m]=cT`pCO*0\[N/am<.9Ytp:XA*-2>SN.P$ek*ajiq>ZIm@"9luEmnX*IKFVU@])pn)
%'h"$$7903ragRZY!LY6,^nr?H<@N,!<7U?oe614.Uu]qWL0/RjqRlZbEb4RT3Rc]lU"R1#<`O]:c:i](#pOQ!Y4c<\_Wmff`[$\O
%l3P2EP1".(mK)/k:3oXXi;h9X:UTXP7-W5:HZ:NOqTul?6kAV305"?;qV[a9C4mT3>ilDcjt:(2a0I*@bY34NR9>EWdoPXQ`aisW
%\[6:o5ec6_.$3N/%gN["V;+W;`Bl%S%)d%?`>/S_N`=I2;B2qmFA_>_0l6=;rHt"=&T:[h_;P6/@#s-CN4L_U'(nA92+tk>[/\nO
%0AMW0@6e$@1S<&)_oum;jg]>3%Aur890C5<Ak&3*=nM2D213U.lF(Rqg<1o&2X+_%AAci@B5b,E%82f&>AUXP>W3jQo8LC2[#WWL
%UbRG"h0;hD#V:J^9OuCQ+$R^\H]R5"eV[Lo&i0+4K2>FP+I,e_'qEmG=b6C0Cqbl5&X.h7nL6W1]@7`RW=DlO-m7a*<AVX&UE+UL
%EWRdaVojW[9iJe&pa@p3VN/b1QkFro#VK)SMcbKnTQriQ]nH%*OE>cOFTkUIcsD6I:$0D8B/[C>q?n:+5dBnDXc*\<1NC_bpFJhm
%2iG20LSW9_CRRe&"<Y(hi#Tf'!]3e/01\)G<lOUFh6G.'>XK:ka+:fFE^`uNJb'/l<mHo%a?4$Z9LK/F;Oo0`bm?cNR\uNN71,Q]
%.Ud\k]p*CX#+r?C9atNC#25G08ILE<[+H2ghXZ(P%t<IcV=7a/qA,sQj2KK!(R`Um00_L6Y&&[:ac)^g)OVl7YliEGGm#_8`<g^o
%U=qA;.u.7SeUl"8/d+:>'W%[q+c$][B[S;GBUSfmOe?`ak:W@Y@Xb$te=-s)+#'2OPN.K>T\OcFE)@,]nWVY4ZG'el:W?kaHF3na
%1r[)K9eNB>B2*q>8,q>CG00R+2e.^_/$luT_?<iOh&nHufI\dn/d9tHHP\(2K;Mc.QrAHDp]k[<'58h)Q3:HD9Mu7oH;mb-]NM2a
%;LIK16i\dicO,;^9EQh]Xn(9Zo4UNfD1de$1q%i6UI(`?mfqF//Od%)FH@:/qsr8O(eq?EN`I9OfP,$2?R5KuX7K6+I>l\)lD]U5
%fge>s;elF:LUV'H#/4!Q:\K&)O9nBZ=4YOkZIc7LI9@G5&(`m`jZW;-]k>QFc>EC6(NfN1:JecLHsnE.L4&I6=e4sh&HFE2D#<(1
%Q6NngmnE-3joP4ij"7][\_`H20ZYm4?$Q$aMkrE_X4ulaTAX[kR69rkW><[TNWo]-gthRnrV=B;WotbIm<Lpija"U+o=P1b]%`g#
%5SeHc\DAqk,.bqgSti6.bO`H0e+8$?Ad2j8G.]s&R+5@n_9tdtVFtes-9P'U,0r?J3f2b#4RYhXd.<YIJgV]JCWl=`Oi-e)_<#s_
%BhK*#QH8UDH4&mTh,r,pc9jWWdXnso*RWka2@2Goj1RY5Y'8rTkjI8L:)KQsoIXQUY*`_'a3-3!@.gJg*a0hF+Skj`2c\2b#,<f,
%B?*RN"6^/3Oi!K=5gaA0j9%_;ri_IW!X:oeH?Seq5g-]nH/Y,[j?mlth==eoWSg<^SYni4N;8cK7o8FTP=JN:6:uE9mMh5d@ORGg
%\]lpVf>)@Wp*9?@T_\MJKnEk>BI^N4,#PLQpq=%$-KO14'k_d_Yu(.q30>O9Xk*_.d<U:SOk*FX4+h.l)D?o7ZW2.!fp!n\)]88%
%8;Q%S-Uj"pZ,]4ZQ1K0$_"EPG4K"(n"aMHaChT1(f@&RW1.OR22nDeJ^Z\b`4kAgl%9*N`A$,8ah<2b!8MghtHVh%%2$ZVFT[dQm
%f6Q^>We&84'NI`8piB_I\@OJ=@<(_B8V-.B;GkO)DP!h\E1iY,NFTbOHSo\9VB>7NPr!cF#S*^C!>2M^1$X9Pq/Y%/rC'["Tr;uL
%[]"5Nk>\k]P@nOkL./L$8fdJ73;mnqlFn6!kHuACA])4Ble%Kmne=BbPQ0jU&K_'-dafgtfH)k:0R8t_3_p&J_1Q7];Y[WV)s0g_
%U*Q1o+rK]A="hI_!?&9dg_\dT&NkR1"#KjD7.rC6TCZiLf[h](UM>C$1Xag^!oo7AG=Vd$e]\sQ;"<[K='a*+_&=EU(8LA2A]S45
%HUR/#N;tt-RqYGa3p$n"451/O<iPVF!>??O1e\mr\+^^iS6WOt<0(+UC[loWfc_S>47-@D0G'/C>n<"D)592tWa7%(KS:e1-0*iU
%9NbBP,0TW"ePjFZY]Q!%4dgf.$m+.MnLSZAMHBJfRO=DB&No>!_Xe_f=Q":K[:Dh(5&sD=I>2E>Q!ScDa$g4t'kJTORY)]9(1bp2
%MONa+D`TWEJ/fGM`isGWDB-?nN[t9"#sh'"G4-T4"-&FBO<9ag7>WYqPRGX7GKT@SF*TFEpKkQlHLdHB_jo!G;<qq\NI7.%S<hS,
%S^qV-V)]cb->CEoH5]U_ZOuG:8b*@,G"bNM[&r#D=TpEn2Bm$cY8d>F*FhLMUKg934E1eRYdL1BR_?OKc,Q71eIu%fAmK?DC!DZU
%[b]MN4A4Q&jTbK8^0>G>Uj/lZ-2h-@O`0)+7c=qr7+Q0B%m,&V=gO5RT]F:b*NSdPQ8s:ZLHU!:bFfkEL>UE35+:f\SrLaTECnK4
%PcfmQOZe%EMo2-G5^#pO,C;=XeVt'Lm+E==m+Dd%p1sl>LO?'A?O$:BcXqiTGYqebd#'60nf!5hN:oX:>j*pC3.tm<0ZR'uj`1nC
%?'JDU:O>rF6hgAfKAAT)g11*`L)<\.CM8S73'Q*p_Dn#dSVOJn<KXGA;dMiA"!H]u]HU8)FV.JW;,2[LC./m'XW3R,]Q9U66>Db:
%:n<ZO.'K>U&a,h"L:W4BU:^\DDsQ+)jV9H>\kd0??3A7RmA.C(Lq6KVMTQj+ATYX7YJJJP=1R2B7<uidj:t?@/T4A_VS$C;N4$2E
%YF+KRh/_HhH%@&r="Lj"0#fE7Y1VpVGQg&@g9H=7J;aC8jV/P51qbVMOYNQ@D;JqdoCkWl3Z,%$f'jL72%386YR%F_ZAp@G=]$uH
%gfFC/@7IJAO"S"<GXX!;ZKNpXl^.QrhIIe>H&T0NA*ejk.>\-pb?B]s,[;]tLb_Po-X2D$lQ#"og5ssZW\ls,kh<!SCAlES,'i<S
%D7$,!#th%>Srk_C6851J;9l2pSbleA;UPY(gpFm#&V(SH&M4$gW]'G*TF)QZ'i7c=2Z$WBp7=<HS*Z3Waj;?:RB[24>oa\7:\+Z0
%cK<"Q(8G6gd;W8X4q-0p)=05]:mh9DCQ4a4JB1r]9L;ZF'UcXU9!]<sR]'^VV$T0FbAp4]Fc>6BE_6F5,+>'$q>rgXo_"-dY/jbQ
%J6U>7%EQtU*]^(-"=uXQ=`/*\H#o?O)N_XmIO(2u7uQ9Ng"B_@Yn(a!,3J,P,p`u7kksa_M_$>+]TB@"I2siG!6tbJmif2]ZgLHH
%A>nNB/Uc@@8^A8nBY,h;ZB4iVh?=VsJue/<Rfu#$a[LU4i#;gPqr1U<8QBUpEIMNP!G!JOlE!YPJNB8flDs/f7l^]2H,uPZo6B%U
%;'a*ljU3;%VeF6N5e!ZIJQSEjcGHK^h4B4S=*f`)#=U:XZd,?1N%qI&aP.--]-`]@>nGEJFig62ZPcFXn@WBkAgMpXAm3!+\7((\
%AK[aoKOAJ/;L<^r`Kje5SkQepc4Dk=^Tr.G^7;DgIR!i-Vk="R?gIaeQTtMrO'hqUDnl>2%mU$jo7-c4O2(X[hgbV!5Q1<Q:Oi<.
%YQ+L/Dnl;Ic[YcFYCHH:J'G`Uqr@.[rUk)Yq>Id@J,Qjkr#[&fMAQ<gkC<;'s7*#e#N3Zt2Z~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 74090 38155 a
 currentpoint grestore moveto
 74090 38155 a 0 TeXcolorgray
0 TeXcolorgray 87289 18257 a Fk(Anal)-381 b(ysis)2159
b(of)f(Optical)i(A)-167 b(ctivity)2160 b(in)e(Terms)g(of)g(Bond)g(and)g
(Lone-P)-500 b(airs:)84889 24226 y(The)2158 b(Ex)-127
b(ceptionall)-381 b(y)2161 b(Lar)-127 b(ge)2158 b(Optical)h(R)-167
b(ot)-381 b(a)g(tion)2162 b(of)c(Norborneneone[1])132428
30782 y Fj(Barry)1196 b(Mo)104 b(ore)1197 b(I)104 b(I,)1198
b(Monik)-207 b(a)1197 b(Srebro,)g(and)h(Jo)104 b(c)-104
b(hen)1197 b(Autsc)-104 b(h)g(bac)g(h)119904 36781 y(Univ)g(ersit)g(y)
1197 b(at)f(Bu\013alo,)i(State)f(Univ)-104 b(ersit)g(y)1197
b(of)g(New)g(Y)-311 b(ork,)1196 b(Bu\013alo,)i(NY,)f(14260)p
0 TeXcolorgray 0 TeXcolorgray 300008 39857 a
 gsave currentpoint currentpoint translate 0 neg rotate neg exch neg
exch translate
 300008 39857
a @beginspecial 0 @llx 0 @lly 145 @urx 85 @ury 4252 @rwi
@setspecial
%%BeginDocument: figures/ro.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UB Reaching Others_inset_block.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Stegner, Timothy
%%CreationDate: 8/25/09
%%BoundingBox: 0 0 145 85
%%HiResBoundingBox: 0 0 144.0015 84.1514
%%CropBox: 0 0 144.0015 84.1514
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">ROinsetblock_ver1</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-14T11:20:25-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-08-25T14:03:53-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-08-25T14:03:53-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>152</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A77DAsi++FCr9S9v14pd9&#xA;S9v14q76l7frxV31L2/XirvqXt+vFXfUvb9eKu+pe368Vd9S9v14q76l7frxV31L2/XirvqXt+vF&#xA;XfUvb9eKu+pe368Vd9S9v14q76l7frxV31L2/XirvqXt+vFXfUvb9eKu+pe368Vd9S9v14q76l7f&#xA;rxV31L2/XirvqXt+vFXfUvb9eKu+pe368Vd9S9v14q76l7frxV31L2/XirvqXt+vFXfUvb9eKqE8&#xA;SoNuuKFez6DFU4ghEg98CVX6nirvqeKu+p4q76nirvqeKu+p4q76nirvqeKu+p4q76nirvqeKu+p&#xA;4q76nirvqeKu+p4q76nirvqeKu+p4q76nirvqeKu+p4q76nirvqeKu+p4q76nirvqeKu+p4q76ni&#xA;qhPGEBpiqTXnfChfZ9BiqeWfb/PtgSi8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdiqBu++KpHed8KF9n0GKp5Z9v8+2BKLxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoG774qkd53woX2fQYqnln2/wA+2BKL&#xA;xV2KuxVCatq+m6Rp02o6lOttZW4BmnevFQzBRWgJ6sBk8eOU5cMRZLGcxEWeTGP+Vx/ll/1MFv8A&#xA;dJ/zTmX/ACbn/mlo/O4f5wTnQPOflTzCXXRdUt72SMVeKNx6gXpyMZo9PelMozabJj+qJDZjzQn9&#xA;JBd5i85eWPLf1f8ATmoR2P1vn9X9QMefp8edOIPTmMcOmyZb4BdLkzQh9Rq0m/5XH+WX/UwW/wB0&#xA;n/NOX/ybn/mlr/O4f5wTPy/5+8n+Ybx7LRdUivbqOMzPFGHqI1ZVLfEo7uBlObSZcYucaDPHqITN&#xA;RIJT5mVVLMQqqKsx2AA7nMduSPy9568peYriW20XU4r2eFPUljj5BglacqMBtU5kZtLkxi5imrHn&#xA;hP6Tae5jtqReYvPXlDy4yprWqwWcrCqwMxaUg9/TQM9PemZGHS5Mn0RJasmeEPqIC3y7598neY5D&#xA;FourQXc4qTbhiktB1IjkCuR70xzaTLj+qJCMeohP6SCivMPmny/5dt4rnW71LGCZ/TieTlRnpWg4&#xA;g9hkcOCeQ1AWyyZYwFyNInR9Z0zWdNh1LS7hbqxn5ejOleLcGKNSoB2ZSMhkxyhLhkKLKExIWDYS&#xA;nWfzD8l6LqR0zVNWhtb4BSYHD8qPuvRSN8ux6PLOPFGNhrnqMcTRNFG+YfNPl/y7bxXOt3qWMEz+&#xA;nE8nKjPStBxB7DIYcE8hqAtlkyxgLkabi8z6BNoB8wR3qNowjaU3o5cOCEqzdK7FT2wHBMT4K9Xc&#xA;kZY8PFfpUvLvnPyv5jM40TUYr5rbj66xk1UPXiSGANDQ5LNpsmKuMVbHHmhP6TaI17zHonl+yF9r&#xA;N2llaM4iE0laF2BIX4QeynI4sM8hqIsssmSMBcjQb0LzBo2vWP1/SLpLyzLtH60dacl6jcDpXBlw&#xA;yxmpCisMkZi4mwgvMXnnyj5cKrrWqwWcrjksLMWlKn9r00DPT3plmHS5Mv0RJY5M8IfUQFvl3z/5&#xA;N8xymHRtWgu5wK+gCUlIHUiOQI5Ap1AxzaTLjFyiQEY9Rjn9JBT/ADHbnYq7FXYqgbvviqR3nfCh&#xA;fZ9BiqeWfb/PtgSi8VdirsVYN+d//krNe/4xw/8AURHmf2X/AIxH4/cXE139zL3PDfyf/KbSfPNj&#xA;qVxfXtxaNZSxxoIAhDB1J35A+Gb7tHtCWAgAA26fQ6KOaJJJ2S/8wfKV3+WHnKxOkak8kgjW8s7g&#xA;gJKh5shVwNiPh+RBpTLdJqBqsR4h5Fr1OE6bIDE+bM/+clb43+leSr4rwN3BdT8N/h9RLVqb+Fcw&#xA;exY8Msg7iP8AfOV2sbED7/0K3k7/AJx48va75W0vWJ9Uu4Zr+3SeSJBFxUsKkCq1pg1PbE8eSURE&#xA;bFng7LhOAkSdw9A/L38mdG8k61Nqtlf3F1LPbNatHMEChXkSTkOIBrWIZrdZ2lLPHhIA3tzNNoY4&#xA;ZcQJ5K352+Z/0B+XuoNG/G71ECwtqdazgiQ/REH+nB2Zg8TMO6O/4+LLX5uDET1Oz50/KTzHJ5Z8&#xA;+aTfTExWV4fq1yzVCtBO3p8691SRQ3+xzpe0MPi4ZAcxv8Q6HQ5fDygnkdvx8X1j5u1ptD8r6rq6&#xA;gNJY2ss0SnoZFQlAfYtTOQ0+LxMkY95emzT4IGXcHzF+V/kC4/MzzDqd7rWoTCC24S39wpDTySTl&#xA;uCqXDBfsNvxNKUpnU67VjSwAiNzy7tnntJpjqJkyKceePyP8zeV9bsr3yWLzUYP72KZADcW80ZBH&#xA;JkCA1rVSFHcfOnS9qY8sCMtR+4tufs+eOQOKz+hP/wA/b3Ur38t/K91qlu1pqUsym8t3HEpN6DB9&#xA;uw5bj2zH7JjGOeYibj0+bf2mScMSRRv9DPfyG/8AJUaH/wBHX/UZNmv7V/xiXw+4OZ2d/cR+P3l4&#xA;p+fn/k2Jf+Mdp/xEZvOyf8X+bqu0f78fB6D/AM5R/wDKL6P/AMxzf8mWzXdhf3kvc5na/wDdj3q2&#xA;i/8ArM0n/bOu/wDk/Jkcn+P/AOcPuZw/xT/NLwr8vvOl75P8zW2sW9XhH7q9twaCWBiOafPbkvuB&#xA;m/1emGbGYn4e90ml1BxTEunV7v8A85C6jZan+Vun6hYyiezur23lglXoyNDKQf7M0HZEDHUGJ5gH&#xA;7w7vtKQlgsciQo/k3rR0T8kdT1dVDPYvezxoa0Z0QFFNOxagyXaWLxNVGPfSNDPg0xl3W8z/ACw8&#xA;g3P5meYtTvNa1CZYLfhNf3CUaeSSdm4qpYFV2Rt6GlKUzZ67VjSwAiOfL4Ot0mnOomTIpv5//JDX&#xA;/KuqWF95N+vanCxLo0SF7m2ljIKlmiVRRq/CeI6HKdJ2nDLEjLwx+4t2o7PljkDjs/ofQnk/UdV1&#xA;Hyxpt5q9q9nqksK/XbeVTGwlX4XPAgcQxXkB4HOc1MIxyERNxvZ3mGUjAGQopxlLY7FXYqgbvviq&#xA;R3nfChfZ9BiqeWfb/PtgSi8VdirsVYN+d/8A5KzXv+McP/URHmf2X/jEfj9xcTXf3Mvc+cPI8X5n&#xA;Jo+qX/lGW4i06yHq6m9vNHHTghapRmV3ooP2Qc6bVHBxRGSuI8tnQ6bx+EnHyHPkjvy78uXX5led&#xA;SvmDWHdooxPcGZ2e4mijIBjiJ2FK/QNwDleszDTYvRH9QZ6XEdRk9ZZ1/wA5TRRxR+VIolCRxrfK&#xA;iKKAKBbAAD2zA7CN8fw/S5fbH8Hx/QxPy/8All+cWo6JZX2lXciadcRLJaKL4xgRkfCOHIcflmZm&#xA;12mjIiQ9Q/ouPi0molEGJ2972v8AJryx5x8v6Nf2/miZprqa5EluXnNxSPgB9olqbjpmi7Sz4skg&#xA;cfKu6nbaLFkhEiZs373lX/OSnmVtR82WXl6B6xaXEGmFaD6xc0bc1p8MfDr0qc2/YuHhxmZ/i+4O&#xA;t7Vy8UxAdPvKG/OfQfLFl5b8rvompWd7NpkH6NvBbXEUrNsZVk4qS1DIZST/AJQyXZuXJKc+MEcR&#xA;sWPx5I7QxQEI8JHp2eial5lbzR/zj1eakWMl39REN7vyb1rd1WRm/wBbjz+RzWww+FrRHpe3xc+W&#xA;XxNKZf0Uh/5xWZfq3mVa/EHsyR7ETU/VmR29zh8f0OP2OdpfB7znPu5eLf8AOUf/ACi+j/8AMc3/&#xA;ACZbN52F/eS9zqe1/wC7HveaeUfy5/NjWPL1pqOg3Ukekz+p9WRb0wgcJWR/3fIU+NWzaajWaeEz&#xA;GY9XucDBpc8oAxPp97GvNGh+Y9E80JYeYpGl1NDCzs0pnPFqFfjJPbMnBlhPHcPp+TRlxzhkAmbO&#xA;z3D/AJyj/wCUX0f/AJjm/wCTLZouwv7yXudt2v8A3Y96tov/AKzNJ/2zrv8A5PyZHJ/j/wDnD7mc&#xA;P8U/zS8k/L38vj5v8reaWtF5axpf1O4sANzICLj1Yf8AnoFFP8oDNxq9X4OSF/TK7+zd1Wl03iwn&#xA;X1Cq+1Jv8Z3zeRJPJ90Ge3hvY7yyY9YqLIssdD2YvyHga+OX/lh43ijnVFr/ADB8I4z37PW/In/r&#xA;OPmD5Xv/ABFc0+q/x2Hwdpp/8Ul7pLv+cVSnoeZVH2w1mWNOxE9N/oODt7nD4/oY9j1Uvgw/zF5r&#xA;/Pvy5BFca3fXdjDO5jiaT6ueTAVIHEMemZuHT6TIagAfm42XNqsYuRr5Pffyn1fUtY/L3R9S1Kdr&#xA;m+uElM07UBYrO6itAB0UZz3aGOMM0oxFAfqd1pJmWKJPNluYbkuxV2KoG774qkd53woX2fQYqnln&#xA;2/z7YEovFXYq7FWDfnf/AOSs17/jHD/1ER5n9l/4xH4/cXE139zL3MG/5xbUNouvqwqpuIQQehHp&#xA;tmf279UfcXD7I+iXveeecNMvvyw/NRLzTlK2sUwvtOFSFe2kJDwk+AHKI+2+bLTzGq09S58j7+/9&#xA;LgZ4HT57HLmPd3Mr/wCcktWsdY0rybqlhJ6tneR3s0L9+LC2ND4EdCOxzD7FxmEskTzFfpcntWYk&#xA;IEcjf6Em8t/85Ea/oWg2OjwaVaTQ2EKwJK7ScmCilTQ0y/N2PDJMyMju14u1JQiI8PJ6D+Wn56X/&#xA;AJn1XUoNWsreysdN06bUZZ4S7MFgeMNsxO3Fyc12t7LGKIMSSZSA+bm6TtA5JEEUALeSeUPK9/8A&#xA;ml581J7i5NmLj1r+7uAvqcAzgIiqStd3CjfoM3GozjS4RQuqDrMGE6nKSdurO9W/5xfFrpd5c2mu&#xA;vdXUEMkkFsbUL6jopZU5CVqciKdM1+Pty5AGNC+/9jmT7IABIlulv/OP+oQarYeYvId9JxttXtpJ&#xA;bY9eLlPSlKg/tcSjD/Vy3taBgYZhziWvsyYkJYj1DHdK1Pzx+Tvmi6ins1dZ19ORJQ/1e5jU1SSK&#xA;QcenbwqQRXMnJDFrcYo/rDRCeTSTNjY/a7XNe87/AJweY7O1t7JVS3BSCCEN6ECyEepLNIa9eIqf&#xA;YACuOLFi0cCSef2rkyZNVMADkzr8/tDt9B/Ljyvo1ueUVhOsIfoWKwNycj/KarZgdk5Tkzzkev63&#xA;N7SxiGGMR0P6Ge/kN/5KjQ/+jr/qMmzX9q/4xL4fcHM7O/uI/H7y8U/Pz/ybEv8AxjtP+IjN52T/&#xA;AIv83Vdo/wB+Pg9B/wCco/8AlF9H/wCY5v8Aky2a7sL+8l7nM7X/ALse9W0X/wBZmk/7Z13/AMn5&#xA;Mjk/x/8Azh9zOH+Kf5pST/nFT/pqP+jD/sZy/t7+D/O/Q4/Y/wDH8P0pF/zkL+XX6G1keZtOippm&#xA;qORdoo2hujuT7LLu3+tX2zI7I1nHHw5fVH7v2NXael4ZcY5Hn72d/kbpEGs/k7e6TcGkN/LeW7tS&#xA;pUSoF5AHutajMDtTIYakSHSi5vZ8BLT8J628q0rUvPH5O+aLqOayV0uF9KRZQ/1e5jU1SSKRabjt&#xA;4VIIzbZIYtbjFH9YdbCWTSTNjY/a35h8zeevzd1qysbXT19O2JENvbhvSi9QgNLPK1adBuaDwFcc&#xA;ODFo4kk8/wAbLly5NVIADb8c3075R8vxeXfLOm6JE3MWMCxvIOjP1kb/AGTknOV1GbxMhn3l6HDj&#xA;4ICPcm+UtjsVdiqBu++KpHed8KF9n0GKp5Z9v8+2BKLxV2KuxVbLFFLGY5UWSNvtIwBB+YOEGuSr&#xA;ILW1twRbwpCG3YRqFr86AYmRPNADU9nZ3BBuII5iv2TIitSvhUHCJEcipAUbiDRlWOG4jt1VAfSj&#xA;kCAKCd+IPSuInLvWgo+h5a/33ZfdFh8SXeV4QujGgRcvTFonNSj8fTFVPVTTqDgM5HqtBfBJoluS&#xA;bdraEt9oxmNa08aUxMieZUAK36QsP+WmL/g1/rkUoeI6FDJ6kP1WOT+dPTVt+u4yRnI8yigqzXOl&#xA;TRmOaWCWM9UdkYbexwAkcktQ3OkwJ6cMsESdeCMiip9hiSTzQGp59HuFCzyW8yg1CyFGAPjviJEc&#xA;lIXRXWlwxiOGaCONfsojIqiprsAcSSeaVKU6FNJ6k31WST+d/TZtum5wichyKKC+efR7hQs8lvMo&#xA;NQshRgD474BIjkpDhPpAg9ASW4goR6QKcKHqOPTGzdrTVvJotvy+rvbQ8qcvTMa1p0rSnjhMieag&#xA;AK5NleRshMdzHtyX4XX2qN8AJHJK+GCCBPThjWJOvBFCip9hiSTzUB00EM0ZjmjWWM9UcBht7HEE&#xA;jktOgt7eBOEESRJWvFFCivjQYkk81AX4FdirsVdiqBu++KpHed8KF9n0GKp5Z9v8+2BKLxV2KuxV&#xA;B3Wj6VdLxuLSKQE8qlQDXxqN8VQcnk7yvLT1NNhenTktaffjaoKT8tvI0lPU0iF6dORc/rbDaqD/&#xA;AJU/l87cjo0QP+S8qj7g4GNqpv8AlF+XTih0dRT+Wa4X9UgwWqz/AJU5+XH/AFaP+ni6/wCquNq7&#xA;/lTn5cf9Wj/p4uv+quNq7/lTn5cf9Wj/AKeLr/qrjau/5U5+XH/Vo/6eLr/qrjau/wCVOflx/wBW&#xA;j/p4uv8Aqrjau/5U5+XH/Vo/6eLr/qrjau/5U5+XH/Vo/wCni6/6q42rv+VOflx/1aP+ni6/6q42&#xA;rv8AlTn5cf8AVo/6eLr/AKq42rv+VOflx/1aP+ni6/6q42rv+VOflx/1aP8Ap4uv+quNq7/lTn5c&#xA;f9Wj/p4uv+quNq7/AJU5+XH/AFaP+ni6/wCquNquj/KD8u43DppNGXcH6xdf9VcbVFJ+WfkhWDDT&#xA;BUeM05H3GQjDaoyLyV5YiIKWK7CgBeQinyLEYLVGW2g6PbEmG0jWvUUqPuNRiqPVQoCqKKNgB0Ax&#xA;V2KuxVA3ffFUjvO+FC+z6DFU8s+3+fbAlF4q7FXYqoX99a2FjcX13IIrW1jeaeQ7hUjUsx28AMlC&#xA;JkQBzKJSAFl8ped/zg85+cdVNlpctxZabLJ6VlptmWEsvI0X1DH8cjN/L08B3zrtL2diwxuVGXUl&#xA;5rUa7JllUbA7gk17o35o+VI49WuYtT0qNmBF2HkQBm6B2U7E+Ddcujk0+X0jhl5NcoZ8XqPEHt/5&#xA;I/nBd+aHfQdeZTrMMZktrtQE+sRr9sMooBIvX4RuO22+i7T7OGL1w+n7nb9n645fTL6vveV6n5V/&#xA;OptSu2httZMTTSGMrJNx4lzSnxdKZtoZ9LwjeH2OvyYdTxGuKr72I3Ou+c7W9lsbjU7+K7gkaGaF&#xA;riYMsiNxZSOXUMKZmRxYiLAjXucM5coNEyv3sl/wl+eH/LLrX/I2b/mrMb8xpe+H2OT4Gq/pfN6L&#xA;/wA5FanrGnaL5VFtd3FpM6zi49KV42Zljh+2VIrQk9c1nY8IynOwDy/S5/ak5RjGiQyX/nHS/vr7&#xA;yFPNe3Mt1MNQmUSTO0jcRHEQKsSab5jdswEcwAFen9bf2ZIyxWTe6N/Pu9vLP8t7yeznktpxPbgS&#xA;wuyMAZBUclIOV9kxEs4BF7Fn2jIjCSNuX3sG/wCcZtX1a/1TXVvr2e7VIICizyvIFJd6kciaZn9t&#xA;44xjGgBuXC7JySkZWSeSRf8AOQuu63ZfmD6NnqFzbQ/UoG9KGaSNakvU8VIGZHZGKMsNkA7lp7Ty&#xA;yjloEjZiunaJ+cOpWUN9YJrFzZzjlDPHLMVYVpUHl7Zlzy6aJo8APwceOPUyFjir3on/AAl+eH/L&#xA;LrX/ACNm/wCasj+Y0vfD7GXgar+l83v/AJ+l1Gy/Jy9kMksGoQ6dAJJAzLKsg9MN8QNa1rXOd0gj&#xA;LVDu4i7vUkjCe+nzHo17+YGt3n1LSb3Ur274mT0Yp5mbitKmnLtXOpyRwwFyEQPc87jnmmaiZE+9&#xA;MdStfzf8vwrqF+2tWEKMALppbgIpOwq4agr75XCWmyHhHAfk2TGogLPEPi9f/Iz84NT8w3beXPMM&#xA;gm1BYjJYXvEK0qx/bjk47Fwu4am4Brv103anZ0cY44cuodn2frjkPBLmm/53/mpd+T7K303SOI1r&#xA;UFZ1nYBhBCDx5hTUFmaoWu2xynsvQDMTKX0j7W3tDWHEAI/UXg9jo/5q+c1fUrdNR1WPlxN08rcO&#xA;S/sqzsq/D4L0zfyyafD6TwxdPGGoy+ocR+KZaDqH5z+V/MdppVquopf3DVg0y5DyQzDfkQjkoV68&#xA;nU7eIyvLDS5YGR4a7w2Y5anHMR3vuL6xsWvGsrdr1EjvWjQ3McRLRrKVHMIxoSoatDnITqzXJ6SN&#xA;1vzVsil2KuxVA3ffFUjvO+FC+z6DFU8s+3+fbAlF4q7FXYqwb877h7f8rNekQkFo4YyR4S3EcZ/B&#xA;sz+yxeoj8fuLh6+VYZPGP+cZ9Ptrnz7c3MyB3srCSS3qPsyPJHHyH+wZh9ObvtuZGEAdZOp7JgDk&#xA;J7g+jfNFhbah5b1SyuUDwXFrMjqwr1Q0O/cHce+c1gmY5Ikd4d/kiJRIPc+Sfycu5LX8zdAkj6tc&#xA;GI0/lmjaNvwbOw7RjeCXueY0BrNF9k5xT1T4p87f+TJ17/ts3f8A1FPnc6b+4j/UH3PJZv78/wBY&#xA;/e+1s4Z614P/AM5U/wC8nlv/AIyXf/EYc6DsHnP4fpdP2x9MfehvyO/M7yP5Y8mzadrmpfVLxr2W&#xA;ZYvQuJf3bRxqDyijdeqnvku1NDly5eKAsV3hhoNZix46kaN+aL/OX81fIPmLyJdaXo2qfWr6SaF0&#xA;h9C4jqqSBmPKSNF2HvkOzdBmx5hKUaG/UfrZa7W4p4jGJs+4pZ/ziz/x1tf/AOMEH/E3y3t36Y+8&#xA;sOx+cvh+lIP+ckf/ACY//RjB+t8yexv7j4lo7W/vfg9D/LX84fy50byLo+l6lq/oX1rCUnh+r3T8&#xA;W5sackiZTsexzW63s7PPNKUY7HzH63O02uwxxxBO4HcWZ6N+cH5da1qlvpemat9YvrpuEEP1e6Tk&#xA;wBanJ4lUbDucwcnZ2eETKUdh5j9bl49binLhidz5F35x/wDksvMH/MOP+Ti4ezf7+PvTrf7mXufP&#xA;/wCQGraXpfn761qd5BY231OZPXuZEhj5EpQcnKippnQ9rY5Tw1EEmxydH2ZOMctyNbPcPzA/M38v&#xA;ofKWqQnV7PUpLu2mghs7WWO5Z3kQqoIjL8RU9WzQ6TRZjkieExo8zs7jUavEIHcHblzeC/kRY3d1&#xA;+aGkPb8gtr6007qD8MYhdTX2YsF+nOh7VkBp5X1r73SdmxJzCujJv+cobK5Tzhpd8yEWs2niCOTs&#xA;ZIZ5GdfoEy/fmL2HIeFIdeL9AcjteJ4welJ9+VH54+TtI8p2Gha36thcWAaP10iMkLqzlg37vk4b&#xA;4vi+H375j6/svLPIZw3Bb9H2hjjARlsQ9W8v+f8AyR5jnCaRqttdXQB4QkmOah68Y5Ajkbb0GajN&#xA;pMuMeqJAdlj1GOf0kFkWYze7FXYq7FUDd98VSO874UL7PoMVTyz7f59sCUXirsVdirAvz2Rn/KnX&#xA;QvUC2P0Ldwk/gM2HZR/wiPx+4uF2gLwS+H3vI/8AnF9lHnXU0r8R01yB7CeGv683Hbn90P636C6z&#xA;sg+s+59G606po9+7Hiq28pYnoAEOc1i+oe930uRfHv5So7/mT5eCipF4jU9lBJ/AZ2naB/cT9zy2&#xA;h/vovs7OIerfFPnb/wAmTr3/AG2bv/qKfO5039xH+oPueSzf35/rH732tnDPWvB/+cqf95PLf/GS&#xA;7/4jDnQdg85/D9Lp+2Ppj72G/ln+SH+N/L0msfpr9H8Ll7b0Pq3rV4KjcuXrRdefSmZut7T8CfDw&#xA;3tfP9jh6Xs/xYcXFXw/ar/mH+Q3+DvLE2ufpz696Mkcf1f6r6NfUYLXn60nSvhkdH2r42Tg4a+P7&#xA;GWp7N8KBlxX8P2p1/wA4s/8AHW1//jBB/wATfKO3fpj7y3dj85fD9KQf85I/+TH/AOjGD9b5k9jf&#xA;3HxLR2t/e/BMfJv/ADjt/iTyxp+uf4g+qfXozJ9X+p+pwoxWnP10r08Mq1PbHhZDDhuvP9jPD2Xx&#xA;wEuKr8v2sz8mf847/wCGvM+n65/iD639RkMn1f6n6fOqlac/Xen2vDMHU9seLjMOGr8/2OXp+zPD&#xA;mJcV15ftZl+cf/ksvMH/ADDj/k4uYfZv9/H3uZrf7mXufLPkHyTeecte/Q9pcR2s3ovP6soYrRCA&#xA;R8NT+1nV6vUjDDiIt5vS6c5pcINKfnjyZqfk/wAwS6NqDLJIiJLFPGCEkjcbMvIA7Gqn3GHS6mOa&#xA;HFFjqdOcUuEvpX8i9C8oWnky21TQkZ7q/QDUbiYq0wmTaSKoA4or14inShzmO1MuU5TGfIcv1vQ9&#xA;n48Yxgw682X+afKWg+adKbTNZthcW5PKNgeMkbjYPG43U/5nMLBqJ4pcUTu5OXDHJGpDZ5Fqf/OL&#xA;Onu8jaZr8sKVJjiuYFlPsC6PF9/HNzDt0/xR+RdZPseP8MnkXnjyRrvkLzBDZ3U6tMVW5sr22Zlq&#xA;AxAYVoysrLm50uqhqIWB5EF1eo08sEqv3F9Wflp5iufMXkXR9YujW6uIStww25SQu0Lt/smjJzkd&#xA;bhGPNKI5D+16TS5fExiRZNmK5DsVdiqBu++KpHed8KF9n0GKp5Z9v8+2BKLxV2KuxVK/NOgweYPL&#xA;uo6LM3BL6B4hJ14sR8D0/wAlqHLsGU45iQ6Fry4xOJier5CtLnzb+WvnMSGIW2q2BKvFKC0U0Tih&#xA;G1OUbjoQfuOdjKOPU4u+JeXicmnyeYZh5x/5yJ8wa/oMukWmnxaYt3GYb24WRpXZG2dY6qgQMNj9&#xA;o++Yem7HhjnxE8VcnKz9qSnHhAq0x/5x08gajca6nm28iaLTrNHWwZxT1ppFMZZa9VRS2/8ANT3y&#xA;rtjVxEPDH1Hn5NnZemPF4h5dH0hnMu+fFPnb/wAmTr3/AG2bv/qKfO5039xH+oPueSzf35/rH732&#xA;tnDPWvB/+cqf95PLf/GS7/4jDnQdg85/D9Lp+2Ppj72Qf840f+S9n/7aM3/JqLMbtv8Avh/VH6W7&#xA;sr+6+KO/5yG/8lje/wDGe2/5OjIdj/349xZ9pf3J+H3sA/5xZ/462v8A/GCD/ib5sO3fpj7y4XY/&#xA;OXw/SkH/ADkj/wCTH/6MYP1vmT2N/cfEtHa3978ER5S/5yF1Hy55csdEi0aG4jsY/TWZpmUt8Rap&#xA;AU065DUdkRyzMzKrZYe1DCAjw8vNN/8AoabVv+rBB/yPf/mjKf5Cj/OPybf5YP8AN+39j0z8zr03&#xA;35PapesvBrqwimKA1CmQo1K+1c1ehjw6kDukXY6s3gkfJ4p/zjd/5Mf/AKMZ/wBaZve2f7j4h0/Z&#xA;P978Hpn/ADkZ5LOr+V49etU5XuiktMAN2tZKep/yLYBvYcs1XY2p4MnAeUvvdh2ng44cQ5x+5gX/&#xA;ADjj54Gl6/N5bvJONlq5DWnI7LdqKAe3qpt8wozYds6XjhxjnH7v2OF2VqOGXAeR+9P/AM8fzP8A&#xA;PeheZLbTtLjl0mwtis0V6VVheNTfc8l9Na0Kde7dqY/Zehw5IGUvUT07m/tDV5ISAjsO/vS6x/5y&#xA;l1qO24X2hW9xccaCWGZ4V5eJRll+7lls+woXtIgNce2JVvH7XnnmzzV5n/MfzPBK9sJLx1W2sLC1&#xA;UkKlSaCpJJJYlmP4AZstPgx6bGRe3MkuDmzT1Extv0D6v8geWn8s+TtK0SRg81pD+/Zfs+rIxkkp&#xA;7c3NDnIavN4uWU+96XT4vDgI9yf5jtzsVdiqBu++KpHed8KF9n0GKp5Z9v8APtgSi8VdirsVdiqV&#xA;695W8u+YLcQa1p0F9Gv2DKgLJXrwcfEv+xOW4s88ZuJIa8mKMxUhaQ2f5OfllZ3C3EOgW7SJuolM&#xA;kyfSkruh+kZkS7SzkUZFpjosIN8IZhHHHHGscahI0AVEUAKFAoAAOgGYZNuUuwKxS7/Kr8vbu/mv&#xA;7nRIJby4laeaYl6tK7F2Y0alSxrmZHX5gKEjQcc6XETZiLZXmG5CT+YvKHlrzGsC65YR3y2xYwCT&#xA;l8JenKnEjrxGXYdRkxXwGra8mGE/qFq+g+XNE8v2RsdGtEsrRnMphjrQuwALfET2UYMuaeQ3I2U4&#xA;8cYCoigv1vQtI1zT307VrZbuykKs8D1oShqp2IOxwYssscuKJorPHGYqQsILy75J8q+XJJpNE06K&#xA;xe4CrM0fI8gpJAPInpXJ5tVky/WbpjjwQh9IpR138vfJev331/WNKhvLzgI/WcvXgtaD4WHSuSxa&#xA;zLjFRlQRk0+OZuQBKXf8qc/LL/qX7f75P+ast/lLP/OLD8lh/mh3/KnPyy/6l+3++T/mrH+Us/8A&#xA;OK/ksP8ANDJLzRNKvdIbR7q2WXTHjWFrU14mNKcV2NdqDMWOWUZcQPqb5QBFHklmhfl75L0C++v6&#xA;PpUNnecDH6yF68GpUfEx60y3LrMuQVKVhrx6fHA3EAFPp4IbiCS3nQSQzK0csbCqsrCjKR4EZjgk&#xA;Gw2kWxS2/KT8uba4iubfQ4Ip4HWSGVWkDK6HkrA8uoIzLl2hnIoyccaTEDYiGS6lpem6nataalaw&#xA;3lq+7QTosiE9K8WBFd8xoZJQNxNFvlESFEWGIyfkp+V0jl20GIFuoWSdR9AWQAZmDtPUfzvucY6H&#xA;D/NCf+X/ACd5W8vIV0XS7eyZhRpY0HqsOtGkarsPmcx82pyZPqkS3Y8MIfSAE4yhtdirsVdiqBu+&#xA;+KpHed8KF9n0GKp5Z9v8+2BKLxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KoG774qkd53woX2fQYqnlmaf5+2BKK5L44q7kvjiruS+OKu5L44q7kvjiru&#xA;S+OKu5L44q7kvjiruS+OKu5L44q7kvjiruS+OKu5L44q7kvjiruS+OKu5L44q7kvjiruS+OKu5L4&#xA;4q7kvjiruS+OKu5L44q7kvjiruS+OKu5L44q7kvjiruS+OKu5L44qgrvviqR3nfChfaEAb4qmC3a&#xA;qKA4Et/XffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXff&#xA;FXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfXffFXfX&#xA;ffFXfXffFXfXffFXfXffFVr3SsKE4qlt3hQiF0rU1FBGP+CX+uKW/wBGap/J/wAMP64q79Gap/J/&#xA;ww/rirv0Zqn8n/DD+uKu/Rmqfyf8MP64q79Gap/J/wAMP64q79Gap/J/ww/rirv0Zqn8n/DD+uKu&#xA;/Rmqfyf8MP64q79Gap/J/wAMP64q79Gap/J/ww/rirv0Zqn8n/DD+uKu/Rmqfyf8MP64q79Gap/J&#xA;/wAMP64q79Gap/J/ww/rirv0Zqn8n/DD+uKu/Rmqfyf8MP64q79Gap/J/wAMP64q79Gap/J/ww/r&#xA;irv0Zqn8n/DD+uKu/Rmqfyf8MP64q79Gap/J/wAMP64q79Gap/J/ww/rirv0Zqn8n/DD+uKu/Rmq&#xA;fyf8MP64q79Gap/J/wAMP64q79Gap/J/ww/rirv0Zqn8n/DD+uKu/Rmqfyf8MP64q79Gap/J/wAM&#xA;P64q79Gap/J/ww/riq19J1JhQxj/AIJf64q//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:85E52B33420B11DEBCA3F66C919CF5D7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:658DECAF931211DEA587F4C8D3C17A8D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:396dda9e-771e-4335-a0f2-caef876bf346</stRef:instanceID>
            <stRef:documentID>uuid:4A96ADB129B211DEA088F04BDE0D9D45</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=15 M=100 Y=90 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>14.999998</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=80 Y=95 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>80.000000</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=35 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>35.000004</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=0 Y=90 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>5.000001</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=10 Y=100 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=90 M=30 Y=95 K=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>90.000000</xapG:cyan>
                           <xapG:magenta>30.000002</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>30.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=80 M=10 Y=45 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>80.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>45.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=70 M=15 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>70.000000</xapG:cyan>
                           <xapG:magenta>14.999998</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=95 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=25 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=100 Y=35 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>35.000004</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=10 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>10.000002</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=95 Y=20 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>19.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=45 Y=50 K=5</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>5.000001</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=60 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=55 M=60 Y=65 K=40</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>55.000000</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>39.999996</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=40 Y=65 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=30 M=50 Y=75 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>30.000002</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=60 Y=80 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=65 Y=90 K=35</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>65.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>35.000004</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=50</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>50.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=70 Y=80 K=70</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>70.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>203</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>152</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -84.1514 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 84.1514 li
144.001 84.1514 li
144.001 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 0.000976563 mo
144.001 0.000976563 li
144.001 84.1514 li
0 84.1514 li
0 0.000976563 li
cp
clp
gsave
-0.433105 84.8672 mo
144.576 84.8672 li
144.576 -0.380859 li
-0.433105 -0.380859 li
-0.433105 84.8672 li
cp
clp
-0.433105 -0.380859 mo
-0.433105 84.8671 li
144.575 84.8671 li
144.575 -0.380859 li
cp
false sop
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 84.1514 ]ct
[145.008 0 0 85.2479 -0.433105 -0.715698 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 402 
/H 236 
/M[402 0 0 -236 0 236 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 402 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 402 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 402 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 402 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&JcLB&JcLB&JcNXf_'O[ZJgITHs!H:sJcLB&JcLB&JcLB&JcLB&JcP0<s!=$WJg5jlgEQbF
-75bnJcLB&JcLB&JcMqRJcLB&JcP-;s!='WJg,djg*-SD-75eoJcLB&JcLB&JcLB&JcLB&QiR.4m37-+
Jg,pn"!f3?!.k3&!.k3&!.k3&!.k3&!.k3g!!=Mn+s=fGJffRdZl]Go+<i'X-@u5L!.k3&!.k3&!.k3&
!.k3f!!OYp+s7pJ`uTaPJfV3="s+m0+s\K^ec::%JcLB&JcLB&JcLB&JcLB&m/R>:,pFHQ*ZU^iJfB:\
i#;n@*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!!X_q+s7pJ*1e+$)hK$d)[@?(+<VjR-75eoJcLB&
JcLB&JcLB&JcLB&QiI@;,pFHQ*ZQ*i)1i`X)3#L@)B'S:+<VjR-7/_E!.k3&!.k3&!.k3&!.k3&!5edC
,pa`X*Zc:>(`:C3Jes"T\JGSi)B'S:+<VjR-74<EJcLB&JcLB&JcLB&JcLB&_>joh,pFHQ*ZQ(8(`(=1
Je`kP\J5Jf(`F;4*ZuRL,UOkh!.k3&!.k3&!.k3&!.k3&!.k4<!"("u+s7pJ*#]Y2(82Ip'nR1]'akco
)B'S:+<VjR-75bnJcLB&JcLB&JcMqRJcLB&JcP-;$RI)C+<DRD)Aj;,'Vc=n'7pnZ'+GWi()Rr.*$-4F
+s\K^X8mhPJcLB&JcLB&JcLB&JcM/<%4*;E+<DRD)Aj;,'G;&S&V:UH&X!_:&el#q(`F;4*ZuRL,UOi<
JcLB&JcLB&JcLB&JcLB&JcN[g%OEDF+<DRD)Aj;,'G;#icOYU<Je,R+%hK?f'G_N()B9e@+<i'X-@u5L
!.k3&!.k3&!.k3&!.k3f!"L;$+s7pJ*#]Y2().Ao&C:r>%tY>*%hB3a'GM<")B'S:+<VjR-77:DJcLB&
JcLB&JcLB&JcLB&JcP0<%j`MG+<DRD)Aj;,'G;#i%]0\e%>#&S%1s'[&/#Zk()Rr.*$-4F+s\K^WrR_O
JcLB&JcLB&XoO%RJcLB&li7VD,pFHQ*ZQ(8(`!eu&eGN]%&jVd$\AcO$PEjX%M06e'G_N()B9e@+<i'X
-EI3!!.k3&!.k3&!.k3&!.k3<!"pS(+s7pJ*#]Y2().Ao&.T*W$N:?`$%`JM#o!^T%Ls$_'GM<")B'S:
+<VjR-7/_E!.k3&!.k3&!.k3&!.k3&!5edL,pa`X*Zc:>(`4#&&eY`c$k*Kl$%`J8$,Qu^$4ICS&/#Zk
()Rr.*$-4F+s\K^JcLB&JcLB&JcLB&JcLB&JcNXf'."qK+<DRD)Aj;,'G;#i%L`aQ#h903#D*2u#8ILM
$4ICS&/#Zk()Rr.*$-4F+s\K^ec::%JcLB&JcLB&JcLB&JcLB&m/RkI,pFHQ*ZQ(8(`!eu&eGN]$jm7E
#-7u["bHpH"Vq:J#RUtM%M06e'G_N()B9e@+<i'X-E@,u!.k3&!.k3&!3Q<R!.k3&!:0\$,pa`X*Zc:>
(`4#&&eY`c$k*IK"pP45"+gW,"7H=."9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^X8mhPJcLB&JcLB&JcLB&
JcM/<'dY.M+<DRD)Aj;,'G;#i%L`aQ#R1J5"G6f.".KB0"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&
!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3VJcUH(a8m.[!X&]5#RUtM%M06e
'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&
`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&
&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&
!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS
&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3U
JcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&
!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL
,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5
#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?
!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ
*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&
!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@
+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB
"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W
$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e+
+s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&
!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N(
)B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY
!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c
$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;
!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!
!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk
()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&
a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao
&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&
!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=
!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM
%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW
!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&
!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA
$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?
"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ
*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&
!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@
+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5
#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK
"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-
+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&
!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.
*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z
!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W
$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&
,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&
!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e
'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A
!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao
&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f
!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K
!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY
&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,
JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2
().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&
!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM
%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23
XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ
*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&
!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F
+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5
#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?
"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X
*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&
!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N(
)B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?
"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W
$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-
+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&
!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q
(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&
nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao
&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g
!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L
!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e
'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%R
JcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&
!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^
!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM
%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6V
JcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>
(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R
!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@
+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;
$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?
"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ
*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&
!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4
*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.
!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W
$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-
+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&
!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N(
)B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A
)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao
&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<
!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&
!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e
'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&
`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&
&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&
!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS
&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3U
JcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&
!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL
,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5
#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?
!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ
*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&
!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@
+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB
"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W
$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e+
+s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&
!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N(
)B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY
!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c
$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;
!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!
!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk
()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&
a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao
&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&
!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=
!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM
%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW
!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&
!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA
$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?
"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ
*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&
!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@
+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5
#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK
"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-
+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&
!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.
*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z
!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W
$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&
,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&
!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e
'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A
!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao
&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f
!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K
!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY
&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,
JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2
().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&
!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM
%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23
XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ
*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&
!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F
+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5
#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?
"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X
*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&
!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N(
)B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?
"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W
$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-
+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&
!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q
(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&
nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao
&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g
!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L
!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e
'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%R
JcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&
!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^
!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM
%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6V
JcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>
(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R
!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@
+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;
$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?
"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ
*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&
!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4
*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.
!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W
$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-
+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&
!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N(
)B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A
)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao
&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<
!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&
!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e
'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&
`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&
&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&
!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS
&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3U
JcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&
!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL
,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5
#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?
!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ
*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&
!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@
+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB
"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W
$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e+
+s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&
!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N(
)B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY
!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b&,pa`X*Zc:>(`4#&&eY`c
$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=!.k3&!.k3&!.k3R!.k3&!.k4;
!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM%M06e'G_N()B9e@+<i'X-EI3!
!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW!.k3A!#bn?"9o,;$4ICS&/#Zk
()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R3UJcLB&
a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&!.k3f!#Hq-+s7pJ*#]Y2().Ao
&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&
!:9b&,pa`X*Zc:>(`4#&&eY`c$k*IK"pP23XoO%RJcP?A)$0jB"pbJA$k<aY&el#q(`F;4*ZuRL,UOk=
!.k3&!.k3&!.k3R!.k3&!.k4;!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9Pb,JcLB&nGjF.!X&]5#RUtM
%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao&.T*W$4$h?!<`IW
!.k3A!#bn?"9o,;$4ICS&/#Zk()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!#Hq-+s7pJ*#]Y2
().Ao&.T*W$4$h?"9R3UJcLB&a8d(Z!X&]5#RUtM%M06e'G_N()B9e@+<i'X-@u5L!.k3&!.k3&!.k3&
!.k3f!#Hq-+s7pJ*#]Y2().Ao&.T*W$4$h?"9R6VJcLB&`rHtY!X&]5#RUtM%M06e'G_N()B9e@+<i'X
-Ir0K!.k3&!.k3&!.k3&!.k3&!:9b%,pa`X*Zc:>(`4#&&eY`c$k*IK"pP44!eLK*!q67-"9o,;$4ICS
&/#Zk()Rr.*$-4F+s\K^WrR_OJcLB&JcLB&XoO%RJcLB&li7bH,pFHQ*ZQ(8(`!eu&eGN]$jm7E#-A#[
"G-dE";V1I#RUtM%M06e'G_N()B9e@+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!#6e++s7pJ*#]Y2().Ao
&.T*W$4$h?Jd-f2R0FE4#RUtM%M06e'G_N()B9e@+<i'X-3/VtJcLB&JcLB&JcLB&JcLB&_Z1>r,pFHQ
*ZQ(8(`!eu&eGN]$jm9i#(d&2#/g]\#RCbG%Ls$_'GM<")B'S:+<VjR-74<EJcLB&JcLB&JcLB&JcLB&
_>k2p,pFHQ*ZQ(8(`!eu&eGN]$jtJiJd?r6_$C\]$k<aY&el#q(`F;4*ZuRL,UOkh!.k3&!.k3&!.k3&
!.k3&!.k4<!"gM'+s7pJ*#]Y2().Ao&.T*WW!\+`JdUfN&e#6[&/#Zk()Rr.*$-4F+s\K^WrR_OJcLB&
JcLB&XoO%RJcLB&li7PB,pFHQ*ZQ(8(`!eu&eGPN%"\n>%-\04%Ls$_'GM<")B'S:+<VjR-75eoJcLB&
JcLB&JcLB&JcLB&QiIXC,pFHQ*ZQ(8(`!eu&eGQM%"\n>%$_56%Ls$_'GM<")B'S:+<VjR-7/_E!.k3&
!.k3&!.k3&!.k3&!5edH,pa`X*Zc:>(`4#&&eYc%%Y>1B%_`D`&/#Zk()Rr.*$-4F+s\K^JcLB&JcLB&
JcLB&JcLB&JcNXf%4*;E+<DRD)Aj;,'G;&)&:tIF&A/Pa&el#q(`F;4*ZuRL,UOkh!.k3&!.k3&!.k3&
!.k3&!.k4<!"1)!+s7pJ*#]Y2()3JUJeEYJjq8+;'G_N()B9e@+<i'X-E@,u!.k3&!.k3&!3Q<R!.k3&
!:0[n,pa`X*Zc:>(`4#&UCr.kJeI/X%29Kl(`F;4*ZuRL,UOk>!.k3&!.k3&!.k3&!.k3&!13`n,pa`X
*Zc:>(`4%^'S7$N'TWq:()Rr.*$-4F+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!!sqt+s7pJ*#]Y2aqfRE
Jekm4$5a["*$-4F+s\K^JcLB&JcLB&JcLB&JcLB&JcNXf#:1Z?+<DRD)T`hJ(kNU6(^V*!*$-4F+s\K^
ec::%JcLB&JcLB&JcLB&JcLB&m/RA;,pFHQ*ZQ)i(kNTV(ucA=)B'S:+<VjR-75bnJcLB&JcLB&JcMqR
JcLB&JcP-;"skQ>+<DRDSf32!Jf<Mb#94d-+<i'X-EI3!!.k3&!.k3&!.k3&!.k3<!!OYp+s7pJnJm-#
JfKXf#9G!1+s\K^!.k3&!.k3&!.k3&!.k3&!.k3g!!=Mn+s=fFJf]LbZlTAn+<i'X-@u5L!.k3&!.k3&
!.k3&!.k3f!!=Mn+s=iGJf]LbZQ98m+<i'X-Ir0K!.k3&!.k3&!.k3&!.k3&!:9af,pab'+G(_f+P\(A
+s\K^WrR_OJcLB&JcLB&XoO%RJcLB&li@&3R3I5,Jg/nm![K*>X8mhPJcLB&JcLB&JcLB&JcM/<s!@%X
Jg>pnKd6^H-3/VtJcLB&JcLB&JcLB&JcLB&_Z9]__Ba^YJg@QGs!E<tJcLB&JcLB&JcLB&JcLB&_>qD!
JgQ'rXX8P~>

%%EndBinary
grestore
np
grestore
grestore
33.6323 36.0176 mo
30.8394 30.3076 li
28.8296 30.3076 li
28.8296 36.0176 li
26.0342 36.0176 li
26.0342 21.707 li
31.6445 21.707 li
34.5571 21.707 36.2861 23.6943 36.2861 26.0869 cv
36.2861 28.0967 35.0605 29.3457 33.6704 29.8457 cv
36.8672 36.0176 li
33.6323 36.0176 li
cp
31.4644 24.2002 mo
28.8296 24.2002 li
28.8296 27.9785 li
31.4644 27.9785 li
32.6885 27.9785 33.4902 27.1934 33.4902 26.0869 cv
33.4902 24.9824 32.6885 24.2002 31.4644 24.2002 cv
false sop
1 0.53 0 0 cmyk
f
38.3711 36.0176 mo
38.3711 21.707 li
47.7959 21.707 li
47.7959 24.2002 li
41.1641 24.2002 li
41.1641 27.5547 li
46.813 27.5547 li
46.813 30.0488 li
41.1641 30.0488 li
41.1641 33.5225 li
47.7959 33.5225 li
47.7959 36.0176 li
38.3711 36.0176 li
cp
f
58.667 36.0176 mo
57.8218 33.4824 li
52.7358 33.4824 li
51.8711 36.0176 li
48.9541 36.0176 li
54.1641 21.707 li
56.3511 21.707 li
61.5791 36.0176 li
58.667 36.0176 li
cp
55.3301 25.9287 mo
53.5181 31.1299 li
57.0762 31.1299 li
55.3301 25.9287 li
cp
f
67.54 36.1377 mo
65.9751 36.1377 64.687 35.5742 63.6841 34.5693 cv
62.2373 33.124 62.2739 31.334 62.2739 28.8623 cv
62.2739 26.3916 62.2373 24.6006 63.6841 23.1514 cv
64.687 22.1494 65.9751 21.5869 67.54 21.5869 cv
70.2148 21.5869 72.3052 23.1143 72.8091 26.1074 cv
69.9761 26.1074 li
69.6929 24.9609 68.9673 24.0791 67.562 24.0791 cv
66.7949 24.0791 66.1753 24.3584 65.7729 24.8223 cv
65.2319 25.4248 65.0688 26.1074 65.0688 28.8623 cv
65.0688 31.6143 65.2319 32.2969 65.7729 32.9023 cv
66.1753 33.3623 66.7949 33.6475 67.562 33.6475 cv
68.9673 33.6475 69.6929 32.7607 69.9761 31.6143 cv
72.8091 31.6143 li
72.3052 34.6084 70.1982 36.1377 67.54 36.1377 cv
f
82.4497 36.0176 mo
82.4497 30.0273 li
77.606 30.0273 li
77.606 36.0176 li
74.813 36.0176 li
74.813 21.707 li
77.606 21.707 li
77.606 27.5547 li
82.4497 27.5547 li
82.4497 21.707 li
85.2407 21.707 li
85.2407 36.0176 li
82.4497 36.0176 li
cp
f
88.1743 21.7061 mo
90.9653 21.7061 li
90.9653 36.0176 li
88.1743 36.0176 li
88.1743 21.7061 li
cp
f
102.356 36.0176 mo
96.6919 27.2334 li
96.6919 36.0176 li
93.897 36.0176 li
93.897 21.707 li
96.3892 21.707 li
102.057 30.4678 li
102.057 21.707 li
104.852 21.707 li
104.852 36.0176 li
102.356 36.0176 li
cp
f
116.602 34.5078 mo
115.459 35.6963 114.09 36.1377 112.561 36.1377 cv
110.999 36.1377 109.709 35.5742 108.704 34.5703 cv
107.258 33.124 107.301 31.334 107.301 28.8633 cv
107.301 26.3916 107.258 24.6006 108.704 23.1523 cv
109.709 22.1494 110.958 21.5869 112.561 21.5869 cv
115.881 21.5869 117.565 23.7559 117.95 26.1689 cv
115.135 26.1689 li
114.817 24.8223 113.989 24.0791 112.561 24.0791 cv
111.797 24.0791 111.178 24.3789 110.776 24.8408 cv
110.233 25.4453 110.092 26.1074 110.092 28.8633 cv
110.092 31.6143 110.233 32.2969 110.776 32.9033 cv
111.178 33.3633 111.797 33.6475 112.561 33.6475 cv
113.407 33.6475 114.09 33.3438 114.553 32.8428 cv
115.016 32.3184 115.194 31.6738 115.194 30.9307 cv
115.194 30.3896 li
112.561 30.3896 li
112.561 28.0576 li
117.967 28.0576 li
117.967 30.1494 li
117.967 32.2168 117.61 33.4639 116.602 34.5078 cv
f
37.7451 61.9629 mo
36.4482 63.2539 34.874 63.9795 32.7842 63.9795 cv
30.686 63.9795 29.0884 63.2539 27.7939 61.9629 cv
25.936 60.1045 25.981 57.8027 25.981 54.624 cv
25.981 51.4482 25.936 49.1455 27.7939 47.2822 cv
29.0884 45.9932 30.686 45.2695 32.7842 45.2695 cv
34.874 45.2695 36.4482 45.9932 37.7451 47.2822 cv
39.603 49.1455 39.5752 51.4482 39.5752 54.624 cv
39.5752 57.8027 39.603 60.1045 37.7451 61.9629 cv
35.082 49.4531 mo
34.5649 48.8594 33.7642 48.4736 32.7842 48.4736 cv
31.8003 48.4736 30.9702 48.8594 30.4541 49.4531 cv
29.7593 50.2305 29.5801 51.082 29.5801 54.624 cv
29.5801 58.1621 29.7593 59.0146 30.4541 59.79 cv
30.9702 60.3867 31.8003 60.7764 32.7842 60.7764 cv
33.7642 60.7764 34.5649 60.3867 35.082 59.79 cv
35.7773 59.0146 35.9844 58.1621 35.9844 54.624 cv
35.9844 51.082 35.7773 50.2305 35.082 49.4531 cv
f
49.2368 48.6299 mo
49.2368 63.8242 li
45.646 63.8242 li
45.646 48.6299 li
40.8359 48.6299 li
40.8359 45.4238 li
54.043 45.4238 li
54.043 48.6299 li
49.2368 48.6299 li
cp
f
66.2593 63.8242 mo
66.2593 56.123 li
60.0293 56.123 li
60.0293 63.8242 li
56.4434 63.8242 li
56.4434 45.4238 li
60.0293 45.4238 li
60.0293 52.9424 li
66.2593 52.9424 li
66.2593 45.4238 li
69.8501 45.4238 li
69.8501 63.8242 li
66.2593 63.8242 li
cp
f
73.6177 63.8242 mo
73.6177 45.4238 li
85.7368 45.4238 li
85.7368 48.6309 li
77.2095 48.6309 li
77.2095 52.9424 li
84.4731 52.9424 li
84.4731 56.1494 li
77.2095 56.1494 li
77.2095 60.6162 li
85.7368 60.6162 li
85.7368 63.8242 li
73.6177 63.8242 li
cp
f
99.0103 63.8242 mo
95.4243 56.4824 li
92.8364 56.4824 li
92.8364 63.8242 li
89.2427 63.8242 li
89.2427 45.4238 li
96.4556 45.4238 li
100.202 45.4238 102.422 47.9795 102.422 51.0547 cv
102.422 53.6406 100.848 55.2471 99.0669 55.8887 cv
103.174 63.8242 li
99.0103 63.8242 li
cp
96.2153 48.6309 mo
92.8364 48.6309 li
92.8364 53.4873 li
96.2153 53.4873 li
97.7935 53.4873 98.8345 52.4795 98.8345 51.0547 cv
98.8345 49.6367 97.7935 48.6309 96.2153 48.6309 cv
f
111.196 63.9795 mo
108.411 63.9795 106.288 63.3848 104.483 61.5488 cv
106.805 59.2266 li
107.973 60.3857 109.545 60.7773 111.254 60.7773 cv
113.374 60.7773 114.51 59.9736 114.51 58.499 cv
114.51 57.8555 114.333 57.3115 113.938 56.9492 cv
113.575 56.6113 113.165 56.4346 112.311 56.3027 cv
110.086 55.9951 li
108.512 55.7578 107.354 55.2695 106.52 54.4688 cv
105.643 53.5889 105.206 52.4004 105.206 50.8535 cv
105.206 47.5693 107.631 45.2695 111.616 45.2695 cv
114.145 45.2695 115.983 45.8896 117.557 47.4131 cv
115.28 49.6621 li
114.116 48.5518 112.725 48.3994 111.51 48.3994 cv
109.598 48.3994 108.668 49.4541 108.668 50.7246 cv
108.668 51.1865 108.821 51.6768 109.213 52.0439 cv
109.571 52.374 110.163 52.6582 110.913 52.7617 cv
113.088 53.0732 li
114.768 53.3047 115.829 53.7734 116.6 54.4932 cv
117.581 55.4248 118.02 56.7705 118.02 58.3945 cv
118.02 61.9619 115.051 63.9795 111.196 63.9795 cv
f
40.7407 40.4067 mo
22.9819 40.9976 li
47.7476 41.5913 li
104.093 41.5913 li
121.853 40.9976 li
97.0854 40.4067 li
40.7407 40.4067 li
cp
0 0 0 0.65 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.2
%%For: (Stegner, Timothy) ()
%%Title: (UB Reaching Others_inset_block.eps)
%%CreationDate: 8/25/09 2:03 PM
%AI9_DataStream
%Gb"+`#@eFfdbc.nIh9S,MWO.-!lSiN(iZ]&&-tb6A?8n!KLum6YQ&3XGP6osm)]H)Nh0UnbjEZ`krZ5\[T4DBqsA;$CN].8K<eq>
%A^`Q\VPf\2dk@i*4mfuJN8nb)VXA`^Yi>P/fl[1MBkSj+iDju(Zf&7fi+RGfktcImK;6_:>T<;>U[`tWm<bm@IbFQ):KljpYB=qj
%>2+@8+#LUC:3/*MCJDs#773G[*)ril?Mi:Fm'&9l!4XT`Rg0APgG.UdFSIp&5O0EaVX;Y]i9[hCS\a>@5&_%bmsCVI"NCrscs^n$
%QQKOe#6n#pZi9JhkA,9()7:gI63#7m*;=pFCtNMt3c+Yik#>`NHlN(oIMXSE*itXpPqB+Sqc;Bm`P@*Pl29B)r:9p>iMbM'%)sZB
%::o=,^)1(La^4^k0Khobb-#Z%kaQ:i1O@gE:1+\CjR^u0%bdJF!3pa;]bX@B@m>;/-Z?6H)L_!H?r%$@.F.HLg!dka=R)I.pWeSu
%&pEbjf]hi8hQbHHRK[bT$m5I*b.;2sA`*-"U=b+aQ7YW!V6g/CNYG>5!lF<@qX;:]]H241G5Dfg\D2`(;7@S4P&$:FrWaBg`=)Y-
%dslb(0\sjHdhcKuZDkMGn7Z"ejW='HkdP>[1L,@$MR=r#E?>IZ2u(OfaktbbG^VX6UM'TjGVt$&YZ64[oSPg%%X*1tGdKUP9S^sj
%a+Mh:<dSf<.IX\l-U?=TIX?I?/7ACJAc;m!GIi9J33:Qn%e!rfgE.T$HnE)sr2XlqJX6N_phas'STOE7m2b.@NQTf!FF7!C*t3I9
%I*kH)QibL)fR>ROfOZ`.?ha@gch8V&`-VR*=L_\1Fa=SfE07EW>.n8:l_l['koM-nORQNK`1Ie.%![0L$/T=pUq[Yco)%,!T[t3V
%"k4B@m']BImSU0opO,0gSE47]GE+sdKpI]a)u[N5]tlBZ8-s#'gZ@<sUL=pQgns+L^C;1"pc2Hr_:]BbDgCfI2=.R+:/77ZjdlMk
%pKIOHW6F04-&Ne;?]\ntOi1Z@WI4bu0eE/Z2DSg;<Nc$_O1.W]Fr-tA"%:u6YVC)f=hdm-J:WqDb11\"A*K=XZe9.OlciV>g>$H>
%9s<e>SYk5MRV(#^l:nD.Cc!('7]fO)Cc2-Ff5M[(_erQcZXG]_L/r6D)teNj<j1)`l@.P>e_Rf8\*I)NX;c;qY18uK7]g!teZ-$Z
%RU>Z$DU#06261??N1+)%Wm,:R>-HMWe`p2cYBj3Xl;[/N<AggH<Ng/6Xl`YoX1hTgWbuZjq-2^A]B*k^>Lo+NASgU8Rc!`VIbh4'
%<IYB-,gU[_`s6)S'W0jT^?.;dL0++a?Idg$I*X<gY31&<B6g@eGe0f`9t0*4h3qPj[p7h`>h=+'gU1;82-etfS>ObSl;#U'3a7X5
%G`M)LNpTr/knoHKBI19)2se+]Z`EecmG"6"g5^%)Q>P?1NAathC05VZAlYrbbI9UW[2dAu/24C=9=HaaBf=2H=Ym,@QKalFa`L5^
%$pMik9uGITc"J")UMeS?Wj-.1L1e#NA(ZNIR"f&5L8Hp&L0iJIH<&kNIGN@Xh9g)qdS8QEF^6M3Y`TjjKiZ`3_).Ock%HG&%<-)D
%fHcMN>']M.3Wba8]>=c96=UR'kQ`8%F^3Aj^Z8>hDg5<b955f";^56dJPZe$<&[.B%7[EiY"5cfZ:M>n[Rdo!\k'J)^.?%1_FVU1
%`q[GXD_Q29JhAdHXtmRXb!t)Sl?4&!,E3q5>E%!mere\V7q4C5A9<lsO0js4eIo(d1'+Z]rW(1D0=Zr_*6&Z5'c,g<PAuAo3!=^f
%`[=L#.h0KOn5Ee4;e)n-AaHbB=G[!%m)Ki*NqfluO!T6KnRLKQM>a9+I^JT?[E3oK(k*oZ)R'EB)DI!Obi/WOGecIH^dU,J=i5%O
%)K;#D>\4#G3P]bYE8MFM@?&OHiA\5&i(jIMeCq3$^pG^JY6QVk"fts]KkbE]X$Df_jT]\9"^DQh#5mq@*8%:Ns(\d6NG=Z::PZ3E
%0I<6\;fbTJr][DSQ*!n(Q44T@Q;V?'CViEuOuolK\.q3^ROVOp3p[jQ+RCEBW53Z0.`#0?D!P@r$:ke6N'M>TlATb6Jf$'_9d+?s
%N?PDIbouHt%3dAJ:&6/*SpX9.mW-0YL`c.Oj?<:c3WJ?Jp6l1J#sKF"V[\%=!l+TI[oHOa3fm]If79h0?u?@>g];$]JEaOnq/K3r
%0VtY?JQOTk4BN^QS.`mN&*1_GaH%7@9`kS0fKle[+CQg_1_*%r%n+_ZL`iL[3ikm$dQfc0+J^P"<ZpfqCj@/;[]F3M8?:%'UM4Kd
%i=(ficj"$P"1$5T)$g9^UgX]jTY]2K"$pXO^dL:CLeei*W!C1]$[:C*Q%2.=C]QDT\1h0L^!Icj@E6@eGp&H%ONp*2N8ElZ:N<YI
%kjgIF7FELA7IikK7M8077P[G"7T)]bXti2@1QlX[Xj\+q,AABBRjF_GUi<,LUiN8PUi`DTV"Q9J7o&R`gioE;UjJnbUj]%f$^Ur4
%!*R)h#qeJ,5Ye75^908@BJ>>&4FpagI"@f=]Kt>(r.,i>4MnV(`5G$6YtBW\)eTtXZ+J,FL=jLSdXlP#cf@YtnkYg5*[&oEas/7"
%3$XhbC2mj+QpfsC74^l$<G*M<1D[52A$-H.UUF^:0S>'^9UX!pP08[#LqNq$0re>Y2_43KXIDI?BH!)<-t,umU6J),b9\a_=tX[&
%]]BcmA1j4[,^4t'/P4o*Qbk[4IR*rAq&>X8>R$ApNl^,ko)+FX-8@'*0U'?GQjc`S^nlhe-Lo95DiICr+a6X0F$1[b\ZFn5p6QCE
%Q.Zj9%Iq@'))=(:`%mb=1O\tL;V5PF%f<Na%o14tR3n[1U]^O'qgglU<f!592+AH`7NG]L'p1tI8rudf7Oq"]82"Ssi;_8gE#@gr
%\_4t\VoFMuaTr3pB>fJajKdUK),XOa,_uFZ]S)Ndbst66F`&Z`;F=pb)8WhAj;^WYClK:r)2ucr7Y#eMJf<*9$@J8ZR:4)dc,5sU
%_oe10W=h!>1PO=0EO!V:@7Stb6?7fk-V7*sT-Q]s@BFQ!b2d5-Lf,j!\N&[PQ&AUo.8C>[!gB[-VHg/g])#+n\kL+a.;P1cV&E%[
%l>0+_9]S+!9!9tc>@jg`M^a(8M-u[,@>C6S(Am't%]!7eK]R:/@![]u((Fkde@F8X%$)ko6+309`ZP&L.t<qK<+>EgIOt;)L45*6
%O$<01"[AjQ5LP"TZiOKA`O09-)r*U6YIL%`8/F#B1%uJ7[Wl9X'b0rGliG3"r/_;Sg-g1Ur1Sg1nHs5,psn&1n.%seds*FQib4Vo
%$od]*^'@"[CjP/AJ5*,N)'*U,)hC@?eghjJXKq7n/B?;Y.+4P<$mMi]2IJOqP0+q\I.gDLche1Lf'5[k7'eR8^BtRTN2YeK;-!rN
%075T8Tc+5jC*94-&CF+"Xn5\`r`W-^CZUMVS<6Hf7TKPr<PWDc0O*4VW<'?UJ]'PZ,ZY/:X+SUq^qo-Q3J&"_&Lb2?E6XoHU3XUR
%k7<<l+,ES_]SkhlZ0YYce&ere^f,`2Hp$gjb'W$CX\i_)l$D9jV`\@^ZgEY4H91rXdrZH'<"KCD\bG"75G,isIf]&2Z;l?VrqNBl
%DDV(b2^5PH`r6`Uauf*r)!2)tA,juqhgP4qCB;8c:G2_61&Q6>b'()9G!rZAgf.+5Qr<7#RY7!ZPC^Yc3b@'ER%V<!Y64qsYtWDR
%(sNEQ`Zu,/\W_Q'`hK_H(bf".Z%+/N\m_nIm#'s.BaDdT!&9IjjZ@jMoNi.]oHp("gZZkVps5+19Z!DUN7kK0jj\C308=0AT=Z05
%af=R%kt0N&#\J>se'U/kH8c-GI^`,E'D)?Y2Jq5DfZT/1ql4A-cZ^+YXa(,FFF?>k5`Rk[!jWJ)TF8g3D*C)P?4ng]jpZP"Ra"a;
%%3NXM1%GBTo,T_-TE`HGJ9WU^VTih6@!Vu->Hp(m`A_Wq#t/_",[cPY(^`beNlj%jgZ)RjSCMFCJp'I'X5_m(R-D:e8EdH,$4F1W
%X=#o%fH22a%q-VXd+.K%'#lIaf>OCfVJc!AGuN/q42[^Ch=o*I%WiqmDc@-!@gTLU!]_!"1OPWCHSGO8H?!QW_=g=.!e2,)*>n=W
%TIG98Zf:G[&1f<.1tcIgiOp,f!>>[2KH^UW)T)oN"pR_nSIh`o42+MGc!O-EKjK`+/a`bG4fj/<RehuL!UbVkli[kH4^?8LijAnc
%ke2EoM2GX&aD'M!%5_d>nKJMP84r=W@uOlS/[AD34jV)!2o-/=rP3;q\h691!JlEY:?]qJ=SUEsMCZDY\r;(ih\3><34jg=!V_L*
%3uD3LXGHrEKKq4'cZJuCMAHpkTbh@?f4+lH"=G9X>fiRk@!U6o^ZR'5@)88*"QfcR!.MRNnd6@8$/,\N,S##bD^N<;Y9qAm=:]$n
%Y9nCS0Tq+Z#)\Nl:g5T:5SGmb4RiE['7u@rh$Lca":Mu6a\[_M3muBBK!^'q_g4(%P-^Aoj@E\4DLBA/Yjf8E\W$[Ff)fpu\e`Ks
%;"\E(/Tf"d?ut@Y"_]7dK!k)aYX3M"D^N:eYMoQ=Q5\Or`p+ph"4(P'Hi+2NjWH\ODu9La=f4u*+0A,f\cZit(B!q+T@1(\Z)ElR
%BkC(XJ=gXX4O5k-kVe&MZ]Y8G>d-:d1AW0`:(1s#d1Aa0!gZCR,pX1(a>QXBpr1cH7PTo0^S4TcZCi1R'h@55:du.,R(9ZEL?Eh?
%LR8j5D;NM-5]ee)6QGLMic;:nUGDWb&>`us[]XBOXL\Y:.^ASKl'O%)["2r^#F;2j@aT#AgM@SnRg+`gJIYe*J<./s9nrb#J6YfV
%p/1#)(]k4]%V.@#gP/I?9hTR4[R-B@e1FJ?f?n!ar-]Y<9[2T"cs_WJ(7JRWF`7dl>>Hf;#!*&/d+X"kbLQm5Q>)2l)NNkIN<Cqo
%er?hm#..c_@X2hB0EohQFW.@L3W^sd9j07"[maL'`.S+7%geold$jj7+!:Q5RPreV6sEb"P7VsAoQ?l=peSP@<A<&RRed5,C8&aC
%MZAD^J@]7<!&Rer6GOQlNkk0jYqej/N\=F<")Am-@-nf"TJ4Qnq2.6f!h,KlgGCVbj4*m"qBdBT/Xq9(0F=CJ!t-F[S0]VVM+%Pn
%'gm0J*I5@9'e:ID`1_`FcenJJZ5kZ#h\']15a)E6,2nIS"`Y\mGk-8Z9/_p6:@C8.Iin&#_\PKZ(S1_+6Sej+8oR,TH7mW.!\L&5
%N"&HuH33;5N[r]71E;5O.$D#(pUR4(EsXl^7<b%@:]N0DY">t]Wsq<eZc-TPbp0lI`HFA[c,,Y%@)pa7-nM"\,6E:W.*6O8%Klmd
%ed6on#YIFfAVmt^^q9_%k^L\fj#(Z1'.>Ee'99pf>lf&oV<%sk;keE/]lCEpV4MOX(6&Dj.0>oF(-odf`;mETj'[uD@^qlp3FW9.
%7N8G`S8+^nD?W+9d<nePcpiP%i,+&3/__X^'XIt4*CLpmetJ''CW(7L`!k64D-^A@'h@48J=]Crk(F<@-4(U:j9+n]M9KDLfc4\Y
%,WgCGGTXc5-@"GB"P%`3=?(@+JRae/!m7kr!]EHl3Z])e!!IpZ-TWsV-MUj."KTcZppc6h@9eXCTLGs*>Z06QN5,UR,S?E@<&bA<
%3RG$:QPNU'IENqnPtM*Rc&dl/2Vc@'Uug$=:nC*Jf@,S6^b]DpcE[59M?"L78L>'1O?)W9Wg4kAfJ"pmbD@/Y'2*'ZK?G]Wl%815
%lO$*MRCC[gK7k=MUGYA'?!1E<+p]bl4ona%!nf/j'"V5[6_%t5&Hb9_i"mR6^eHR=Q5bd>,64t9&p*?nCdF^[r.8R'jU\)f$Tan:
%NPGoQB3:=)4TPY99`0X.LA(ko&u6bGQ1*J;(_Q.FKJf^okcR>3CF8R60Fqq,YG(nH8:[*j#W,ggFCgn/!eALj!J#+4qm+V7M(bP3
%S*?=a;90=L1<1bs5s`hJXsSEuEuY4f[#"]*"HMGtg"IirFp-I;0G$/FI#eJDinYQj_U9`:='@.90aH^gM.B38)icb?"7lfY+$`&$
%*m(7$5jj`-l!g<A"'s07nj+h/$X64KB1V_Sd.d6ikT%VUD%28Z3RD+S+Y^tM_t-o[!$nHg[@61`m/^UV>6K+c6:&%8$@cs&!RR0Z
%`k[BAiUpJL0VaIg'*?"oFboB9SP)-HJi**jY8XdV!;9YZ1b]D]/Qs&sC`(5qbp2nX]:OBlR$^poFm/ch[Hj,EUN0).5_Ha95L:Oe
%J]08M+R!u8TFoQ?>R>LgM'*p\c$+m'Lk0tUG6;oF_a&[<Tge$-a.P#n:g"H8>LVulf(_AK`"AA'+@8ksI`Ro)4c-u%8P[pT[K)t=
%l2p/L6R!*%%2rq14@A9;!3GLT70pCs8"cP;1b>e.co_!CjC*3o+g<M)/-20L-AGUDS9)X`9YCL::5ltUH]o\i5Ug%Bi&65Z%0/8X
%6p6G<$(u!/=!mGHJ,u&<K7N)_0LE@&9POR](<JDRd)7PESAHR`@s_G^@p@p3g!Ud,TMD!Wb28?fR%_BplT;go$URL.B#>Mn+GaSI
%!=2eaJ;;stp8D[tUDhk'JdJ+/>8F=l)(,DB4^pO^oE&\=LH*/d6``IkLguPJ%Uf';+CLC!TG8*jb\uIU^uW=FJj<^8irV]cm5l!F
%fAb!W1=MIQdkqDEcjJDKL$></h@X/=,g!mP(^IVf3?^R&M$S1dIFjQo*U,?-N'M*>eFL-%1QeMjJ6Ze@R:pB"&\r(2")Zp3UXpJO
%m\oH-NEmtlED09Mb/(u2\jHaV.1SV\-;3&[-^I44%0Qb'q@S9QZaYU-_[o@JPGSqB*M#)Wd\$^/lOX5]G]9I,DKG-0&9nBcA>E//
%/H@[hF.hjBNBS$+RN#Q:%b(X%3.WB5:u%1`O#YJjO%'\8n1anKdY.m53P%Ud8H[S=ck_5$Rce'[:pJ2&27a6784n4W1^Ga=B>O7M
%D,>dUdM<u1"M0nh/ZC3&UT_ri_#u@l_3MJ2im_36,`WP&`"@7B-UQf.U&`](jcbW;Se_;Xa`4IV-CX1SHq7TI;ul-mSjf3\Cr%]_
%].AMlA-a`01.`]Eq.M?S#)X\P+\X7U"P_K9hY0U<3%/Q%d#a4LBq4MjB_k+OSjri&_%$W/_"G''>LtdNZC:r!KM<jE@QY#C"?pNg
%A8M@s/_WXWdjtPpC'br>,nZN)<3'9-",oR,Yd9A7B4.C0,b9ZnK"l5SfV/&]TEPJ$9cA_&&I802pI.lhHlj#CKbYg0"9;U0!Bir3
%$FG`t[38G*#[)E-.u=Y1b`2[M[SPV0X',lfMJ3^BRQQgLTpDA(!.0Ep`=O/+'OU&Q!!]k@ZUQt%(="N@!:3m?!(2g5'-.(A:50m/
%6NjD?>Is-/7>YDZ:=j[rJLbRS7lZD,`:QeK,#V>TMJA?pKs=@'eKJYD%S^U>A=n1Z#g`&Rk`Y.T+9Jh-3<NV)iIiFPVm0^FRRH(K
%7'dU"YY`&,JLKRh:;J6WeTT$nZ=)T3)-<[]7LLD=dn$NK%%[PMP(@q@b]*c$VIVcX&3-&1,1o9PQbtst5mA[<JW%'Hi_4mEMB)`+
%K\bn^W!3JF*ehO;&ZJ9n1oHc,,eTFb1i/jjnJo`Mc*;,'a]TH+d``9IE<I,*QhIdPB,GmCA'T%b(Q.S4_PmO.@?MMh80<>im1+[n
%27%N_#F[i5:Ps/pd+7D[_+*=Bn-51+.0^cE6V`=c6=&6/$og#-9F)&j(<8p<8W5q".poeuC]onEXl+WNTn!8KXql=lA7q+jM[+E'
%j*K,SZ$_Y5'Mra3DQ"f,[%qFMHO`<e,f@Zgg;X[!L;*/h!GL.%[1u1t(<4'?GD6r#2`b94:Badk_SNr?":uu`""$8Z!aYD-'T*/Y
%W<%B,/;&Uu&=3L'm8H]Jp</d,3O";Fb#k%[-Z)*?C?U(9.M:S2BE4(B_FunGSkLo\V<Mh#iAr=X"E=KBRX%TP88t5Cj^:5ckD,?W
%#TGHQUs@U(,6H@!N@jfWF6trK,(g@9oe6LK#3SiS$1cgO(^'qgUdtu+\RU6$aX0H\'9G/r:-ih17gpdXJ-N.i*uJW$J6@U[lqGZs
%^_-a5H=\?hB^(Tf^t`\/orsE&r#u,=O95A!)Cud4)GQ0K>%l#U:)Jor8)DTHUphMl5l_RF;Z$i"\Vu?t`e!3&#ih=ZpLSkAY,a!=
%oF;D)F.f]K(Bg$8Jq\USMa\ijTL&LX@l+[HQF,lsI_Nl8?j']:[a0SY[P6DQck8WKgQnaF%R7Db#a!JKZc,hs4D@,u[9,]!(dc;j
%Zi]H:C/Tb*b85^>q66/En,f8V;^=^c(ID[9:[WAP'IUlE@2jJqqCaH=UB%_2:XD0S2P7$#c05KfE0gZr$,Fc/((9H\eCH;Vck-*>
%nrk`@YOW)1Rn?uN$\o=E[]<'?i=f,@Q_>6FU2?6$pTgtC!=_m1C3pEp'l4,`!C+#'5k:?q_$-LC>aMZUP.Lb];,\*t2J-5eBrZ5[
%NBg,ICDfHH4$MU<3Yd/j8fW+uD#9o[AI$*m!?SR<kLL9K,sX&%S/Yo?Pha4KL*_YnQSFC8>-bhM%`52a1eF6uN5l$^@_T]C@gE)$
%qda#qj6miU%*mhJBFYHq(-.'n!3ks-E*t4;(VqH<g1\MpS-dpG;F]:kQOs]K%dJ`!V5$%=i/i"oMVs\NY(B(DaYa@&RgrSW'Fb$j
%$Si(<JfD',Sq'p2i8RuJJ1c.S_$gSMRAgZ,cj9h!WoJ&BO9:nN-NjtUbQnuMG%_UBH!U_#i4b(YKdIqgmfCR_eRH4?HCaGDF97a:
%[u,tY+UC'Zi!I:@9ZN=tPN$+aXN2!>5)rX@d!lV;a6n=9N+Ih_KGTSP3\qF)%IqjaO>otSf,Znf@EDETo[bgoK?Q$-+18>-RWNGL
%?rZJTLX1KT)f2NPSd?dm@HV(;?91N_**_]-LSF2Hk#`1/8ofQE$u&r*M(A8fbFkRsP[VaOS05'!i6`@#1f0'G!3UE]\bO4RRRu9\
%]ILr3aT>,(0FlfNAD`iE6pN"g-UlZ_f82@ZdKjQjA+?_c8t<+I[QK%[_E393":8ct\fK:-SfSe##9#W4MhOnd!_4;X3qD21Z$K<0
%L]AJ?#VD_k+OFDd[%]N3"/+[h;NT9&@'%]T!ZH$R&VQ/p5J09i^tljH!haCnd;;Ffmbi1X_!*&7jLFbOaJk!I?(Ntf&12mt"Zo:b
%;#U\bBhZGHkin8)VmA/ZR\:jt02YW-KgV8@#kS:#gYta85o'bBST8s'fHYtYN[I20%M/>UTOAEiY[+#aI@oj98"AIk3i6;O'=J!p
%QqZR`e"iR#+Gu__L^K0a+DMB]%M3H=UdoF/,G9UQ:8]0DVInIi<oh=H;"bVDarjfa`'mbG[1I$!ZB4;?jIn]YF@ls\cjM0b`='%!
%(_%8JSWq5;f@+3lH!Cb]!eh6uI3uhs3tCKYTBmn<bn:K(.LL=Wo0e4eh1KsK[aSfd*l&n7M'Y##6?;RG;U3mV"(US\@V0/D!8&$c
%Hk,nO37-%TKkCc1`<Vp[Ba(5r%Y/DM-5LhQ'U*0XR5$5<6.aPI5[TJneO!jdjW(cS94!S#-rWK3Cnq_nhf*78XpE.]=:%<oKfgkR
%.RUiaGq]4-LlMu.&?/Gp,!.gD5[+SLJA;bJ,T2J8\m!1&(+H)OX7NZB5#oK,7M,.D*BMi.es[hS>E!4]:huJ.8#@57`l'U7o4Yct
%cd;6-,a$Ra[WO#sDMXqs!)8lTB8Ue!!*Z8D305DGGWcBspl7WG4Is\F3c51qX4psbNVn2l`e6Z?AqWht(2`.uMQ90:-4#kug^N:0
%a!QAqfU=+:F;P2a0Z\+O[W9Pn9N#tE':8S_l+*0M7p]sB-=I1UU_9XS/ssC+D(kE=Zt(NeSocLhJS48DGB>iN-]%>N6pM`X,m+\K
%6l4T=<\-ppD0:^l;u@WIP#6W3j9Wt+0U38S!#VM%]A2jCQqh'E5G/&XCXRMbF]r_@FC[@bHf!D=9qF.u+F;qnjnh5+]QD&ZN-%2E
%U/`l6#'jAQ?qUH=q!#'a>,9))g'NCoQjq@3&?S]bQ3HAo"P@lg;I^'H"B0':_]rCfKfDH^lYjnO23CVZHa70c/ug57Lq1^)5fg,q
%N'@'2gdH/0.jE0_O?&g"3ir^&E9uHN6WT-/gEZC3@[;%*#$HSCU5pN3JM2fA+pt-[FEBW0R$/\G#uYSLB<DZknFLkUil@CU"(]-V
%CWV*e,P+i>Of')Y!%Yu<6#)9mo8,uEZ>7YQ][6?lkd\!uNf9PQ=:[5!5FHO4?4n(%4=G\nrsWTf],2jfi\K@#*M-@WU4mY'Ck8KG
%PV'r0;TRT)Tc[qUG.nBX#!dIL&0-M9_JeIB_mAHFdJ8hWZOu?qU1$S"@BQ\*!Z1Z$Xt<B-+K<VnV3Vm>'/TeH"G>2W6kH.JM!uJf
%/P9FW8KjS,*!_rOm8oAs7bK8o'=+95;?B@=`$8(H4X%*NSuO6hTgh-(gX7a>.8m=d.ltWrE/W%bGVh0JaC*WS['5*>F$j]2GsE>d
%MV5U.Qae3@'1>)k=.Vf@4Sap<%:,tn:F?928BdAC0gsq3*R^&a[M:f+J\R(-?\WSt,S:+4$_g>moH$Ngq/K:"L8*U"BZh"?'YDd6
%HCppk5tV+YFZSYt8%nhKO.Tm.iLktlb-]P=)&6@J7PJ@RKIc>r"j%(i(O-EF"k!!SIZ?B<jR6STO,1Rc-QJ_tGr9&1!RPj8;^.#b
%"#r9$VM;NN>bD=?],'M?BV\6`%/n:qA.`drpDm^1o"hT-A/A1uk$H\lA-.W)GNg9?b1*tP"!EP+js+s@#,(#"ZY56O@8kdS1i6C(
%JW44fOQI/++Ea(^W"J7?]NC\Tcj#>*RZPnsoP@-Gon>tl/M5-Ep3a/o4Nu][*+)2U:j@6%6FAa'.@gS*aB>="Es.6!FV:J*&`=f'
%bd;VpTkEr'7Ga@-PQ8$@BgPI,LgZG3aB1Q=7t:\&A:YC#Q79pT!<b[6Ou`.YRgFVL]/2C'Lt9HH5[#pA-Ii-!\#D.)(6M;kg9M>b
%85pS3:.6+n/20Gu13\W(EBPN\<21.3!.n/r"I^AS+A%Qmh_eoe(t<$Q:dnE:.+':CPTPP#O@qt]JN+C]Ci?R`R.3L3G0DJ6rM>0?
%MaB9\!24oo*aBIG8!a[55BpO9PH_q45omBa#%1iA)@+^$]+p2FYo69XDJ(;s+@_o"aBA.f.$X!2K5*LOgB8"/(=\:?3=7No7b\q%
%!S0M5B9ZKVl*A%IioLe>VMHgcPtKD"f,Q;/=r[f0.)t>(jF3=*3n7[B)6;Cjed+%'<WF0">F*5WKTnGt_j7kOa@*qAm1pTWjd[X?
%!3AF^g/L"EaG:^t^QoJcg)U2P6o(q\aM]coW#Ki10@Bm&Yg)6%-#?.EkB\mB56>@FOokfM#>`?q'q),96TS')ZC6@AM2IR52^j[n
%5[=^,Fu2^D9P>Ft6^k0pr&;0:jZqRu[:NL"A.@6VPtOu+%sf>/7,S<a[d//p<]Ydu:X^ZdB/ld08RS\NEMLHfE,+@d6cO2/_/8^I
%Do*H4*hBD60N_VSKeTeT['6K^Tn!<#aXqcHLLCa6<Wa![$VQ[ALWSpA)<)6r5UL)HqD&c&MN\o[,`uKubN/fAU]_)7l&!nTZ%`ri
%1Lt-_(kOJ.NQT`&n]V1J.bZ-qK<bXr)Dqi)aKl&CD7G1X.'"0e[^nitP)2sOneG"D;hhG/HnFX1E:7(i(UI?RJQ3apg=#IE\Y$FK
%cXeZ^TgeV8JY*3tRlmrU*Y&P3e`<#WO")&'j2C"KW#PYf<29tkS:EQN\Z7@n&5;6Rcs`q$//OKT2s?Km>Z"G^=Q4n9B:6+4#,)3o
%95%o'%*t/T>"<c.]"q.6"/6r3&'q44@M)6SMu]5#Qgb-B.q/X=&>VlfOa&AE3+BQ&Z-JL<$ir87O^@'?4&=@6Dhu=76d1hW+AfcR
%e^^&bgi>o8g!mug`>Li@4b8st!aD2!F.bX:_OLp@e<rF6\A==d!krXWj'j?j-rMjR!tJNL[.<sF-YZd?N,&Q1%'XlK#Zg#e;CW(7
%9TE/D-ihUOBE5ULO9<iAKoVi*?-ST>FH$jY&Ksf[nP(2\OW\1*a2$b-&0-6EI1qPBEX<dZr.uWE/4j+mk?*`V;*?uD8B$J>b-['X
%l]!.9A5To]V7j!b'FRbCbDIOY1M!MR/!"RBBcgG$Im^:\ca?,mOn_1F%9?:N,45om&R\72?5kX#^bTK6f]:X/E1gc&!^VpeBM)@W
%PQckDE4#]sT,',h)n^[b*+BPg7I6_)8e9/)G);+/$-!0Bf*3Fa1dl@"_*0T/:'nkM9^=LFFr*EqFbsnq\d!HD-;TWT@+jo]_$t&k
%PO:kCK?5-2N^*]W6Ti7]r\tJU'*4mR@0F_)Zt9(QijB)rX,H6P?e-p!4O92n*Kq2Ob^hIQPg,Cg*Z@G>'p,[K!:o7!Xi^$Lis7bM
%E,#Tb.P<Aui6*DZCp:&h(mWTNVA3Qe99o`Y+Yr2]ED;(^8e)Gq/MAiO940`q$,qce_k7kQ4#^+?AVPdNGlO7hY2[C00EWG_#_Ed8
%aN1_THP"]8@_J$dN%fnL,YMbKRR+IoROKM,fh"+m@*5Q'PE%T,ZHFR(9\J:".5*,)/$d/9U#I=`Qj^R,-9*h9q5N*QX1BMdaHX+s
%!%F$o`:[63kn83E2"V5`o.(<jL%2UflD*SHcj3W\@H"bqK*&8:$,DH'6k5n6:[n"LPhFt`*XmT0Rr<YL5=I^Z!]=.K_m&?*"Y/pt
%H%e+!0Jk6<\6jilJ.+#T.t]!CI*Ic7N+bZ,fUt?+]^3H^dNY"XJKgl5#Sg\(4VfYOp4b]!eMWa8@`Xd^c'MF07OV,=o;..Va8uGH
%MP+lq6m2V-$<*q9n;\(=ar<G[YsVoW4,aA.rueP>d6>nt*<=T*)QtZS*]7;r*Z-&Q=q`?&$qt8lL5Oe2]e&Ma]Ga<$DAf-'$Vch_
%@O?;!q;"(GQng'(Mtc_F1J4p\6E/n6585:q.<>T0#6HtZ/<3B4!sKJj#oUPkR.A0pHKY[E%_ZB(&`GlA7OWLh(ug](Mjl3/]sqDS
%AXPt%kY1u3Q6ol?&L>LQ-UB+=hiTiD)4huk7,mF`&b)9Qd%0eLR2LuNoSgSoX;DNel7DobPEWu4&85!ON#!D=\f;Xo;cl):hZepB
%#]qJ_:m3=HDG[P)a?Z!5dSVE.ga=a82?TD:,M`W\?hS\5@$cm`j<0shIY8jWbjc[gTUZ*_P:-&[G]uQ2<bNpaAF`EE?('"(g2nV#
%g6=Y:.[W-46':+;O>M`.8\<912-B3=LQ8PdcY[h*2*!F4b!]PCNJsqUR0AFe!1D,J\m/1F8;_Lo)q<m;K./inTL2CGhXTU0WjfqG
%BjdT54A+gK4)dYsSHe4kP[e*'FCH^1pN2hBaA,FNit"m?APS!*90GD/gLF*<6EGMgY"6-]bm/qVn8\Y*P9.KB8Y@c+0o<m[16Tb6
%_!$;B<j=)@alc)-I'D]&#?Cbj+@W!mfVer+Z._L$0JaSj-G[&C9.<!DP\#H_eI!ioY`k#6?oKrgZ'W^PW&"H$d2peWi]RE"#>HI^
%,"tc\L"3[J-+I9KPi8?:3mO38JCl*a%+Wl__u,J/^:ZN/CDD!ulqui(rO.oK"R#`LhsAtY[j1YDc#Z+BY45#/n$\_A*hXs!b$W=&
%8t59Vm^sIF48<U)HSjssqQ80>X9T9Zli3RLqXA/#L,J6;:+)V&Saua-k144qMR>E)l1Wi+:*6)IjiqH:8am/gR!^!!nCbCUBkqq8
%RrA2[,6705hYu,?e%],#.<#)Z[llanDN*0h@Ts\,BRPAmB6;SdIQa)I:PkP?oJrnske$Cr^+]+@r`,Q1^R$X8X_.lC^#;QK5ZaLP
%[gap1AqFlKqG[ZSIs$bue\SWML9X_`3=?qQka72^BK@"]moAG>q[,,_'JVV9NXhu#:B.8f\ifmj`H@l'/n%e\o,2\je"4.LUujmi
%:Ar#cUcUTZd8Rlo`iSi^\(=J)j2a;HI>3LAeG@Y#f12%UhZ[U-Ic]a.LPf]EcL%hnmPIG)Dc>RcFe'=q918oY9LR3o8@"m!8^>V1
%=I`o_3F`j@=B]hD3E-ntHeA%i'AMAO3]cPBO'9GbmZI@Q$I%cJ-C$O(?m^M7B@N@Y7`t</?FVhpW=@.-K5l+0_DFJd!6f]0m<c1r
%3A*O$H$bH.UQr<tW:O+(DpMU4HiFCjms*=`,ImJ_clK=f]p6?Vao7m;e6+tb:H<g2Eq`W&hTFYY\U,iNYE3g9>rd,4^l4Suh:jWd
%MSiM+-4B;5<BG\SH@%$Ap>DPbEQkmSh@NbZbQGR/MY"&2bu'2<k6NNK$0+UhhYFe<_>tBjJ\j'GRSC$BRZ>GE<kld9E*7!kjh5B/
%MoGC$a@5cYW,&F,AZ2UQ&n'+`g#2XMgmM,kL.o3)[XZP6\3paTQ,p"]FtmSk*Y!FJd=ZpD\4`]tCVKPm_kNmu:S6TjfK"7@c/FH>
%ZNuet<h02sf,E0DrUH]6=.e45MjJA_=EKjgItrZ*B9$+!0E1TH.d+d0Vk`;';.o?r<J9fb0.iB+!Zi`e:N^[VVn=5R]+".20/Ajt
%Ns+)=VG])^E(Mt/m\&=,m"gbOA],fTHU850#_foZp<[&!KLJ+(-tkLi\t+%6Xe=2faeB(DA]8VW'5e(m"ZH>T#M@04aYCcP'@@WL
%;`IdDaetIKP1:phW_^Q<Hss\_b48.G_"YF(h,ZJ\Q!?MDfc"u\-YK!,qG.!%Fm&>jb/M9:L"YpX2Y(EloX0<%\O8n`;:0@upYs4&
%@$NK(Y5tK';MLJ[AZ3D7(-PKm4HY?D(oe#L^$;QFq4I6JfW%[L8%5jJ,'l\g(44PGGGj_!6Hq1*9tO<F?HNpa)XjbhGZ!7abE+LH
%DQfn.9<a@-k0(SSGV\Il^4'E5fAm9r[4<KGY$CpsHB$<ER&u%p4Kd+t8Qi_^1/.M.Ancp#Yl^%3;XBQkIH`M)YA2=2!Rb.n[TBpf
%Q\FglB=-mBbLO?r5rjR@q/0&+VS^k8$9qfJjeS;t33$*#2Pk.AY/FQ>N0Gig=d>t&Bf)m]N##^*DCM4,eP9<HI]'[,l#i#D6j@71
%r99DmUO7eTmj)OQ]JMcNmuE1:ektV3e"=9h%@9U'S[AH_nkn7!GXkr*I`aI]lB,FRB?bm(2uT]N,"p!Gf3ZT3\u!e\`@d$QJoFNq
%97L<3pfJ;W=(!*cSO\q#f;7F<jV]Y]Kr86hrGsSt=VU9c/sH]ch!OclA.8,`_qN2:$UTskr:H2!KS?mAgmH`)TPb#F(7>>e7tWU?
%.V"HfriRYJ=Z\:%5C@!%]aVrcebc9;?$SW,N$bZ(+m$\ts7CSr3m7b,SQMrKmS:?CX1M<H$^X]=eF0c/914eD]q^pH[ee4"(G=[.
%UT_CA7n;%7BmrNAGgA^[r;:k,A_SCc8*^'gRtU&`UMjG$9@E*LcWZZY2=.X*6au$VP$o-MZTGa=aY<!9>*eBm.N)ha_S$+DCXLi7
%asFs(cY1].3`eN`7fCcJji`B]I7&%+'pGs%\K'if"_?K,Vo)a_h0S22@FSqskdko%%^Sc_=VPH>+%V17s"!=f"XN0'CTf7T%\l4_
%AI/VoB0&_;I9:S4\T6pgl8)Uc$ZFG@@2A_;B6ge.$4plJiGhG9\;[m$(<DqKmD9CgKcbN.a:`=+NuPk\Fh[d?2JtZ>W3b5K%Z85^
%0$(t;P\!Z%q^opl79B'*m+"6Z.u@:lU,i6bM5EE2PsehJ[$=$`E/E-_!FTK5XT[@P$a^BVl:RYMjI(lf>8_*)H+&lK.s\T$ngo0e
%F&;5IqML+ejiROXcL=kNUV\qWJ!k/<-bj,[(#/(us6]H%H`c`A`TlP#1$?I*b-l=_+lC!m"gSJ&DuB7,XhKIaFs"TS+RaW/eQjgf
%ONY6$79?,.l<9=n\lM3PlOOH,XP<6B<egVq_XI!g6[2GAC+7onI_0[Vm<@*A:.Cd_V_tFi+OACR5CIu^pl:a3&9!D&S_<:gR)QQ[
%7a^`%Y?_^G-oTQir:JuWJWGdD9;[0#3A#Q[r[M<\ki/9)8^*oqR29>)"W))IK<sNE$jQ(aBo_+T4u&D5p<.kl<hl3i,(ZC,?ouUn
%^'SW[2Z<HF($1;56q5'-d4`CC=.Y5Z<'Iu(Tr^G?S-6"a7*J;kaBUXqU8uL`eBB\Ic7=)@@VaJaS=F^Kl?:p3<ei<R&]\,j].*e3
%14[npnjONG(V>HB&]56^j5dR]Y)\^0QY(B1]K/eo*@E5W;*7Z5["j?GlKSY#FbK[FVmcHG89o?2S3"^@&b>2mH$+ckS[?oZo'-MV
%8(6.CbCOj2pirh<23VS`"U1g3kgD`lHFiWgF:=K&?En;F,;9#faaNXMH@p]HB@uO!4dj+WN?c(e<dB_qf,"*3ORl/N*K7Y;\5O&G
%=W@"LFmlAhOdYrE6+9k@m/lNrokE't&%Za4naPkCe*0("$`rs(gM_;N%NbW**V;CVLSIWAiF(1#IoU*g<A\S.NE\j3<meF1>uN[:
%=!>,tZ)VnAq:)86^[BcsP4RACn<QoJT2'Wknsha(pd_$>:[!d2Mtb`5b^SG8rjo1iQoasfFp*jZ&]nCVYg[jL3<J_7\q1h!l5p&'
%74@L5cb=W15#]j32Z=_KbqR0hK,5>LQ:i'>"./8M8)73cRoS6U't<uL`GJ#-L<".!&;PsX<cOU/gh%;1=iG5YELTt`B$''k4V?&N
%'"J4I+OlG_6L>*2FpXp?=0`NbNc<Jt_R@$Cj+k^1eK#RibI^,/rPjQq^I(A:7i)"4%J>Q/p`18A;c4E<BjSo"Re41Th,ZK'P[aH1
%k3DAnQ0qnEM(H1)>hqWPBY&7;s(p*UB2M[8/?3c6n'lhgG:q53IUQtsh)SJG!1242Q+1mMn"eJTr,W%U?aRD0Bm%&'Q*CCTmsePA
%jSs<;;Z<n44%BF-e%ksr"<pd:aER<6Hs^h!YisMOE-se99TUPiSTZ/:4h#7>,kc`4B):D(!9W1hX69j@b-(Z46\Qi=OHjUiE3>UH
%Bks^oq+nJ*+E^DcrqQS(;gh+_Sbt%Jd$1L):S6*jDCa%)h2&WN)lgtQeEtu50Pc<6`q&#]]aAMUJf;1@=dG_8ZO1FuX=<LAQ(Wm.
%6rlU5-#e?86&ii`];qUE,"hE+:h(6i=O`uJ\n7.,J_ZQVA%'mIg$u"`1hlVh%D(i8kko#2Q(aduo":!3>U%M?Sr%KHA6HQ=obf?-
%EGU-/2sF(tE[&,([i&E=GC'KGXGFO\o0^C;C#&[OfkV-FIi"JUpm%JDT3bC/c0;GimPIG)DpqJ]8DPYQ]sUO;i<in7<)NXJ`akaF
%g]i[2\AtA\RJP45`]nl4X';&#..#-h[:sc-dH^.oKUJt10)?`4.q!Apf<-b&+[Mn%l0**?K>h0238t[bH_l76\DWDEl<]Vqag0)3
%C=T^BQTnMY7a$rZVEUcoc5ooVa27#""j6ZaVbhea9JO$q`tX`AI<K03.<&<h/\$<'6fQ8a9?S+`f+p"b^2itN[(BC-"Ki`YQ,C(O
%pl`^.jm]Al^Air*Vei$-*587mpo\@<g</M]7[HpH*ff?'q37eco(Z6,hoat`H$h-'YCM+5?TF1N^l4Suj4hqaMU,@7-4B;8rB;(*
%^Q)L_13VdM/[`cG,sNMl'lSpW<;4,b'g0Y,cg&N.T.U[Uf6Cn%A9HqO3L00]^[^;]B)'7hod'pNoAAHqZU<D/0P'uLL`[W1>">J$
%b8`>U[Z7q_mgfa.iPq)M4nTZ$B`7OD\;P`RH!.YVd%lt]R@6[&9>jKd\^4s9"/Eg@Co(Dj=WWOT%@4CD.MZ"Clq7[u08dES8d9LU
%0:jeS*%:Y,f*.KAapBudl0,X"eCcou'sU:S0E(ObrGtl0KY</]&b(085r".l(k:r9+41e_Y[SOgH"V,p-CD(sk`7*n]Pf9SUFPg.
%Q77?eS'&t0qHru5>2Znf[f>SrcIhC(>SuQN?`2E<_*881RmV+!RZ1>91;;ER#JZUf2#q,o4M2p"nB0Is'PhWIDtGZ?`M]ekBFP<L
%U"L58+go)K/0"U!#Q;pfZOC/F=hDjqmB5fPbI<g=k0hCW;B<ZHOMXY(03u]tkW''LPq@5p[brWG^1]i!=_4,cS@XKa!h1gFRrOnG
%1-?0I&gj?e,O2T1oJ/h@qF#Al,mmGd]S)+U4gS78V0OA.LO7k!DQB8i:bSHdClQ#iPI"#8O,U/^kFr9m"kT=1'3T;1WGVhi\F*=g
%aF`a'\brd&f:PK3bt<,]<9Jk6cK0mMYJ/GpLpkY@(Pteh(I)d;910%eodZ[dpeCJ\_UeoDMrMMJG:[%U0?pW%eQl_UIb"R"au;(,
%K4*<SReTJN9gVgWb^NK'2/9i._LKt`ff$K(cHeJ]!,ZmnNa?WXH:\OT//$tM)GXAE:iCKqa5XDQ`g+*p@meqh>P(QPIS(aJ-dV&M
%cS%f&,XJYVf43%>22csc;V6M(F?[R_4Dr^K'thP4Q--RLU1#*X>:'hX/o+]-(=L_t9trHlIl]Ys8T",!\2.lC7uIp&=d4?+ZjtX\
%GSpRO7ToP'JBe$uZ%uuPS]eX&CYD"!ZUE7&b#)<\/SjJJ#+]V7kj/rH9`M;PZg)+uQnW.X9?R!!XoA)ti@>P!6go)^1+[`"A0+rl
%)=1/5>sH:0?,]21j7*\H3OdQ)XaH[\ZJ[36ZcE,!WUiHKIp1TQVJ?ErITq7*$:-R:%UKV@]7>K=;mO6Ue]uca5Q%2HC++&*7sj.>
%%L9\q3pc:mT0"@$]ES>Ks/.\b5?dl*8ZR*=Y5)+$X4W/@R3##$3@tE62XeDu5G#bGIf\c*Z;l?VrqNBlDBl#;V%)&J[>Jaf7bP+2
%]41#Jq()kqrJG=CjW0"87Rae.#MV9ShhUAVdDin#E?%%Mot1VSB2DrV.fcg%TmRDk$j8^GXW7DL:EiKGG-J]S<AaEacrO/I>=V34
%ZT!Mn%+VI#^a:(dhNn*1qOR3Sh]ol^@OC)c>qpPSlT1g?)q^YMAAjSt$T_HQ0P29`PsV6;cpTC&<X47`ZqVVOjm?ckbun2.O@Bs]
%'W6Y1aN<I<G'd0_o/6CP&C=C'E7cU@8(7!"q.6VaqUugP?]Wo+le0V,r*c_XlZKs_o2)gLLT,-VmIG3o.5uUUaei_YC\kUQZTWk_
%GKLl$oq6<lUbt1O[!J3caq[*<Qs+$j(HgT>@Dfa0ESnUf2&h"+I=1a<naj(V).'Sp&8AQ??n?'!r3h[WV_-Ufo<Pc,VB6KPRq;?s
%IO[gKH?Z&]nG*_7mN16T5;$fekR[[WZ[VuHXREF;WIZ:$_*FEW!nR4[6dI]ZoeZ!EjVRN-MVW`L2eWQGMrWY.:$sCBZo;\>SS#W9
%D2l.tiAX5Ydn]$U#5c+.H6h5$NuAWbVnqFgk@aj3dDgsSR@%/\<W99>m1NJBj\g@eKSD;koEqUp]Xcc89bQSd)t_n6mNc?^i>:Z\
%mT=D;-J:%_XcaBKDo\Eghjsc42S[QEYm*kq\jRO9Y/mhQA0E6k`F\,#=!%m+AKk>A19ktL`ZJ2ah'#TPk9"Ba&bNaXH$sbK46bi>
%NX^ELl*Ohmg9&aO%X%r=X@'de_<?@S"ANPC%):F,[VLoC,Pj?+h-m?G8m^,,@9Yo4$\mi3n<[dU0Zf3,s#S2(O,nU^n:2!qIC?=S
%`U[]hr)QDIX3fr,mYiJAgQVPNI+,+/:;8qV3Gu.sMt1[<n)3lg=d1f`s)sF"3!Aq?HmU["-U.[>"]!C9+]5f%4WF*jW/NOORh@#H
%^JNcF?#1I\-OUB<$$).*JJc_`"hUmC#HS_"LttFQ)1U4%L/"F-EA-1096"WZpF%kbp#"I$J,rJ:?kpFQ,ChhE*rp(05J/DZl*P$^
%0`4;9f0^c#*pKq"gS56<!q\kg4fNjJd/uQ&TSiG-FWZ)%&r`O`UrAs+^a)AJ6&oElXuuj-b=B.@Ps7A4]AWqk8u#t"4Bp`iUd7'a
%RfV`lUS*m-/L.A[L+M'$Q4me'Ci"^:L>.7+*q'Y*d1.ZF1NRMO]G1o`%\=RVT`ojTBVJ(o^PX%L@jea*,E5qiYn<#+_Y/W5eDk<o
%>LJtG'fEsV<D;9%BCh?\Ak)V4Imptn_s?9dDRG?JgNa_1DM9%@A[_Q+7)tbTqT_b]e;?tSm8hS+V\s0R:RpT@SA9nMG,QFi1i3.]
%W#[6E"'Z[e0O6gu\:?'(HPU@+CPcn%:?&,km"ZHd1[X[\n.CCe+kt[IdU^fa,-6<92'PG$dqgU-HJ#KR/Zitb9C,_K/0\kF+]cd`
%^?pGEfmcb1'lD&ZNYYqgRi4>8'YH/\_-r=CmT*l.Q=q6VXsKR['bs)T_b2J7i'pbsU`juVnX=J(?=^^u46MOk3]K%&Zl*cJMZ!l#
%\cJ/N+jO]Lm]jNZ'm&IB>i)i6#ZgQn::K+pNBl^9g0G8T=Q)W!>n7YN<PJS]<3)jKp&Z&pM!>;@I05PHAl(rYgHL%A7_p5dC.$34
%451h(MH&*rhR@37e/=TASD[-F'E@kF6MkD@R//;!*oY<^]tB8upf^ik@[$_J!>L;VI7`&kdgZfZ,[FkPP65+4LC!N4cj?Y+rEE0`
%'C%q?NuR@O8o-01LET*8W/j1SfYQmD^3?X+L`p!!LaTe:k"=8WPHO82Z,Bh;5K8Ilr_Eap@R2+80YJ,Sq"io^H3SIjDbXCPbG'Km
%0\0heX;))(cTY$^1U@?)O#6l]'Gl9a,p401l]OTOCBs17qW!4C>GL`+PeaJ]%msQSO)kB@E[9\d^QrtaqLa6#1d8Q+]tr*1-h"Bj
%C_YCiroMGkYhR2OU[&8."6.u!9O=tqjNfL7qLZ0US1B_E,dMTd2#f2JX]5WkG?:,fd3&:gbj*jQOsq<IG;L=9#%s8QaaP3M4rCa_
%:4bM;=A4u"IlLg%jVC)Zbb88F/fc&6ZbY;iP1a6ulQ.Xi/ClDbU1p2-(oPXOT5L-H![DoE7Dm:`_4FpeXP>h,F;2I&^rAVk06^Ho
%D,q(k2"Kf%?"HXc07,U3BiR:AG4T=0G<5pL^h(h]ScY`_j)?[QK4(Tu4F'*TIUu)A\[.`QB*"5]PBo@YWf#u.Q`g9Q7pYg"c8q.i
%)iUK^Nl+*E3,Z)loKe2B6B0[A+('3Fh<A)<9kQTP9uU754B$.`RBDlfN!$/Ol&_`[9KN-tW4Y4W?mI;m\\bm9HC6fFGG0fCUf0Iq
%UV&4.GD>KOE%8KmbV-`tN).T7>2r1eeGUIN`<m&+'E)Ve>hd):;Z8]q9SYrZC(]O1Vir8\a@:(eQJopg,JW"P9b%E1;7k%9GZ?ZE
%,P%HIgG\HkQ9'u#6^sV#p/#X?DGrOq,LgI[M=8@5#]BiuNk=]L\GO%$ifo&?F.7pHUdm=pOhp8M:3jVGn"e`PG:0N1DQc.t/pE:q
%[Us2eVq(f.D11f9G6^Lh]$N),j^Dp1KJr7i9m`T3ZFHtpj_=IneS`FSS@-A7Z!i]KK1W.EX4J(aeYU6%&%`R]2O"=ui+MP<TsgPX
%\#,@?,cXU=\BM*!Ir9t3$W]Spqeb'(,qJG+rpKDj='7$q9=?qIFbbJZ?*\s2,eh,^d*Mm[M7bQP6eqIKF#8HM4Da[om-:[R:4Ss_
%h0u7aB"9\W=U%Q7495N)7QVl!)>r;.%5G^\:>XEtDVOLLT!ft24?J1j<Y#AZQp"6nK<d)16tc.n*c;jE]T8'lp+#g(PL+Jk!%[]=
%1S"0Y5t3(_PrT;YiPne;,1H;0rBW-lEjsB':?81jQc^]Y<Rl&<CLVeNK_IDoBSWB@6]`Ib_\BuAEpDJ.a%<$E+cW^Vk,m`"8uphb
%&j%F.,D)8sKI8jKDT?'m1*Z]q<1YpipG1<-[d@irI=#C#c!Mt"ZJo'X`la4YRho?^r`9#=jU`L?gs*W@h#(r,=?5_Cc<A;>EMY_F
%qPZ?Q*"Db33eX5JSD@'UpE<0X8T-\*<sBmSOB,-Nd-qkXJF]uI!??$spaD)ZYN8H]0Z%.3=?05ppNQJdL0r8%.ijpO//6A*XP#H%
%!fmj5GC(A'G@8T@R+s%.Jg]"R_e)WtSR^`2O>EIhoH@o&DZ=sCdqf`@-H^&FFPC5>1sT3.ee".KdiKJN=*ifa-o[_+L<=@'J`!WW
%Rep=+oL`tLef(*>USCk'/4Zhh2Df0&f&9IRmE'?t;JGl[UZ4X)MfFO4$L/dr#35&%*`kTVU&sdNdu`(JC&.5%15ZGU-5D_JIT6tI
%cq[-*LgcFnNa"$u(e<u@36Jp\dYbACA@.<9krg,Z<QLmp3r>KpqgsQTa[p-0Z/EN^&/XTe@[f8?2]$S2)i9d]m6X.Uoi#(K6XK*O
%c7qkRG5:WS\N]<Xh+=R=Mne-[qg]!i2)^Wi7cAnD/gN>a/ru/@7D0KT>G;<`)mhCkcP5!_I.[MWK^-ple5e+^KQ-%]b>:X?dBIie
%4bH"&S"osBCIt5E"<9=?bYohdR'LZeg+_c[V_LXd*Ku6%"^#;.'&/ACLGUM;=`F$X^/S!g__)j)RF8:rq:`];MB#LIT<JFpN&Eg>
%"`B6QS@nA?DGOI'cDWPEOAA4rSH@L*-5f>s(?;Q(U?LrdLZnnr#(tl3L:P)<N&.?V)RQD2_G7AfZPf,<lY6Ai8Kb7gXaZlD!.dcs
%dje-#K1lfSFT$&fY>YA5EsQ)FCBDBEe,%qiYBN4e.K>r8Y<Sd##(^W),^0Fc2&L3dH5F_9cb_j/ofC;u#i(lEWJi2f;CKbP-O#dA
%R/!+`+7,-442WtZ>d(=nW1fZbNN_hgPAfYkRa15jJLqislge4OS'L`0m$8fQcF$Sn/oM]8kL+J85[=#NUHN,3')fUhBAEI>cS=gl
%+a<3>e3CENLkIS=[Dpu6%0b0^&.tZ^>L^A,"D3P2%qjlNM=CTuXk!E0W@;%^KrenBn79YXQ2un,@H8<5O3P\Bh'';Xr=$"FRuK\V
%NQ.LiWu]H$M:/%Skp.kYo>0BAn-Yr6Se>[->TqK?[RB(^BPd!hXZe2sS:sX9DM9:)8T,Q[p#Z9>(Vi:EJ$R7O0FGtY6*Ep^<H4"P
%X+A?EkUmAtAW'q7'"]R,`nVI(bec_=p84cMbWN$=ros#bS]"&tlFS\SrP?n'BQ2Noa'`KPNYm@lT:orQ3ZO77jCGnP-7jSm(YsOE
%^,7G(kV\rdh1RM$N@+Z67]1/+Tc4?Y7:0%UAh)C!:7sg,-:qhq>@@=L[O+)<mi;b&'^Mn?;AWIV``H010*i6/87ALUeb$Q!,$r)Q
%ch^/FBq0LU4,m.A@\<59[#%sY1nR<d.:))-OVHQqIH_&LE`['M1;_+PH<30'bZ`jKd1EBWN]i[QB9cOZrQ)%d!3hEO`J^@r@3FCd
%Y-`7753i6g:=rQ8jnWcZgc_a]3,'^2j.nt>n"3;"%f<AG:Z3<<iiQ(4q'X,nYh-4#'KDXoX6@o'17`?o$b]d5N$hnKT'"H,B.>Yt
%'^!Z2Q'X)\]PoWe.cU\cT,*Kc(\^GU1[O8u:cp8/,IYfXh(3&3g(hEHi+TjjG5fU"bZ=?&\AKZ,*t%M=n"5+g.^qm<o&QTF(-Yb:
%,SSb@N6D6kFSb*=lYkRQ<kfVd%HQ;bCQ)Y-bR]-C9T2R]H:*qdB,'%n_6c<-S#d%8Vh6f,R'CFemOMV*d#E-h^C6[T=8T3[jiIL"
%*-KD0G)G!'pKHH/l_?<WJs,)ED*0sB_;RQCf9qg9T]*TW@CrBj]"rC5I<Sqfp.qqo]V8)m8#,K++Des@[;YP5H[@M<+DZ2YFM8sT
%W(;c$b08C@ETRVok"KgU;KtEjAtgb567,k/)W=Yi9;Ese7+M2/5Z6ZcPGmhHk+A4)O?`b[So5_4rp[0pl5W@!A.o5QS@qLphenFZ
%k@eh1^d[fb,h#cGRi\:11[%Wk+;q!\@)Ij.>)#t-<%R-m0PGE^;/6Vd@Sp4`i`'6>=1EHSPNl8lWD&a)8Di9K!cIRnF9stLchaPN
%X:Pg9`t)g&#1kt*b6/C\0-<U6R@]\rPf"%PkLNu,fe^sWGEDA-lb1@4(\cdMGDD[Ak.R+*ml`\!R/!.ZrUS\F;a0tNrl-!A1nX,1
%WqBkOqt0-42ih/8A*q0Dq:)qKk`'Y(m>h#7dC"tYgM]]"fBtdcrT2b(=+C"sm[nU[d?in9[<p@-He7]#HsaXsTtN:ibsrl,=nhWt
%g7@-&Yq^\6K<(VJ:L8NrCfW^JF8g.(rqL'b969%jDJJRsWV5tW;_+u07ZSW3DVZDKHN*4<J,IrGqTJ>mk26d9?"<Nk&$>h$o>?%K
%dFP';rU-!+(VQ1pJ%Je:\GHL,gMtZ=b9p7DGPmr7@Pa!e`hUr!nNM&8s-^<0mI=ln,9)!SaZJPSi:N>d^880-?O(77Iqn"N!4Oo#
%pNZSh/N.UW0D3f:k1JFs]Pe>\Jq%\4i9_'JBW%IlJ%kjQ>B6XrmUuF5Zd4oT:-[W`[8U7eFW5GfFC/jf-$T4/[IqpL?Q1;8\uU=d
%Xr@o>#+_(2Jo8W<n%[XKl-qn"Dr(E>8FG!=oBG*b`n0:>?>k;$8o$BB%XU9/F4H`0(VchhlJ/o&+5M4,dclP5>4_O>?I1.F-.M>U
%[9mh9cO]^_45G@#m&)J>n]0\g0<A*F`PY/e:O`UAr\T&9KAGCPh:;0/k/X'B#<K6s1ShCQ<CNgt[r9;J[I(;Q@F/^Rah6A\d@Vfb
%rKL',D)lM*VOlH)k9jWnUilO@[!'o'J+tI<Y.n6=F+!#Do-V#sheI?VJ%L!7PLSj1LV3qRK2,i^U82o*aWJ:3:@?X.n3Ljdg8i.e
%Y;a5-2rC,CYEM"!X_H$Es(nRVe[_r.g4*6ula3L*huE7"\^PD4lZQpsrP1HGXi2*$Eo[-4dHQFGp"0=1H"B,ObM2f6g5L.Ma"Q/,
%]:i`4G@R20f#H=6Fp?6]eqO4]]#-N+mX4r-Q-uXQ_`_iq5GrX-f3[>4dq>3qNQ(&Vm+[/"ru/RsPM#-V_qSd<V_:)XVO#^\8q-*d
%L:2;FkBbQ]a4FZ\mC`;ja.;nA:>amqInf<Pn)Ur2LTJtQg?`'/DJS]I%"Ck:FN7X5g\g`28'.;3T3kCZ'P&tBqsIkhqBTX'5JG]t
%J+B>*h!*#&NJ#QlrV:)8VglEEIE"<:rA$Id^HU<;AkJtn4RLI7D^2gA=+:\*?Mg<3lP+YRh&\]5kbg'&BPm4p[?OEN][[qVZfd19
%HET60?i0NB%?P)Hm=T=sVO8L8#GT[7o1k6Ymej?=]$!,lDEhHW)P-,Qp>t^p/aW+YcmeU=h#c<F^6-cl1l?K<*o)&e3h8CD(RsZs
%:T]\%Gc0(&qQm+C]K[=LI=)KMJSm!E;X)j=Rk&SaS'6]*Vq2sGknF$77SFBM+'PkXVD3!QW4cT0@P=J1S"ijHY`G>iYtdfaXj2I\
%p\D4!VdoV-#=?m%H15#a[_12sSM0jd@6\j;#>TA;:Z(%*4EutaoYYVDft4Vh-ed$&CX_5+N8t5k>JHHo2XJ8^HSl_n?QD*!eFE0`
%IIVE,lHO:Edm(DB53Y'DMS%1UHqJhP)0atc8Ul'7qKuMMf^/2]j45;BWD@a+oq*)c:CgeS57F.'<m8,EqYJUue!.>TVmi8snoi6L
%*oHtZa525kY=ln"Z$uYfb_j(sI(n3.HHr?lrSHcep$(p\LRZoDT73e)GXO'JnGLJ`BD6$'e%[6A_l'J0:Z!&?hh%a^.s?*iI/H"l
%D&C]>&+.lEcOK41qt(V-46dpUmA.FDle8IRTC/R?D/?mJm%cgnDEPJ4Vm"b(2<3hi#:WI9Vcr-.?(1A;onTfMp\'(U57p\,Q!`NU
%q/lY[p>)k/\M^h`^PR8E26D<(@nk%:05E^u3Y_!qo>'L_V`G[0ikIqCQnc..*bOfn`cM.^GaO!Jiu]"h26Yi>^T$06^GGmaH>d%X
%M#LRrW[.C0f8\OGFuP(:#<sSFO$13chM)i=T/#1f:FF'mRkMJSD=D&m:I2?o^BOQVs!%?PZ.XPIGR(%nou:\AV6U[F\"i8c[@gad
%l(iFdgd"*e@reKuLHeZu"XW`+*j`o(F(Lq<C8\$$Nm]t*LHDp;^delWlb0=dKfX).\of7]PZe$l;_tkpB`6,BDYG?GhYFt"f5S3]
%"b(!XG06odPYT%:"RH)/cmd0b1=n`h4,!hZ>Nq]Qoq0rPBasJ0PN9:REikMTl-A\G:74fgFGd^Qkn\,nrQ)-bI-R=%-8sjYm>pt/
%9"WEuZ[S;9;d)4@^3sn3J">?>4qVlaUdZ$\r+Sepb8Jn0Z@7P/o-P0EH/+pMKQ+K0pM5`J2nM!ig^jC/4Bugn$YLJk')2,B&+BEO
%PSi!iMT>_FRt%\?4SH6Kej48_)VDA6LaLOJj2RP_j8R5Qk^]):e:FtY@6?6S7ml,](4?7h=5?"'eCWb'Do*9rLmbrBNU,6?G'LT*
%Sj*fA,oH4->l`YHK6DR-<eoGs66(bmY^7n3J26*g"4j'uCMW8I,fnl<?;f4E:Anh16%t)90YIpkqsqI@qhZ)GUW(*$CrntHr].*p
%aBNca6O]PJo*P$#I4]SjV6s]cm#TX:V#B&[T"fb6jS\EQ)G?MB)R"'8(/')U#)kaVB;)h;)9DH^e\@QPW(JQ#:5edaUC^u?F;<3E
%S?fRfI4N&&M<bYkbo_P#cb8m=oah(Jp:?U=(Fpt]m`^Q[c]+me0iLM:.?AQiT:V%Z$RgcM=hn6HoH^Wrk6BWo@Y%ItF2)^eruorg
%mjG<pLQ-)K@QTQ"=Ze<VC*0SpT3>?TZ,rD0hX/)%>O(Sl\&;uIi]uf'@^?DWZ-]R5]9QT0pLhEX"+#5O-o@VC#m7O:mbI]dg.F73
%e+o=l[pX1DlRCS1J#KhohL<Ve^uP?6/rZ+!V,%<i*YILe.%(6]P*,"/aHBB)FUt&6gn!Q=<`>:PZFLHeAaB3iC$&aYd-na"n)GK3
%mtD6#B#k$!j*K`SdWWKbKf9_GJ.2qhdBg1\o93'kQ8W(L-AN9R(RrTY4)nel[h$MnPPeGH9\s[4=CJO?&pSdWn',`AHTTO\;\_Hn
%hRKqYWgFK:`h5%g1ES!DC8nR@A:M(.9qE-0Ss"?5]cEBe$&eIs&1HCo+\eOj:Xt`6hh^g$Quk$XFG#U^Y-b(7KAbj()A[TVIq/f]
%CRKoGJc4?[4UY)+8j3Kc]tV@nJ1HnH728GBER>)r5kZAUM((4%YZ5o8'g!7<i/0rL>/>1fUN)YSmV'U[SNIt>BcT^h?XPulPFTHG
%K/QRm)qF[1f5fqSaM:R5b/ok5(WM`jpYTj(F-QKGm*&3g`?US;?u=7(0>9IhY2<-"5,<$5?_,5IWKqVC#g%h[e!Ns&jHod]H9BJr
%nR;S4PWV$l*%@O;OI0lFhjWW1I:sbY8%t=aU:rh1d.PE\4ukilN$]Fag`GM%nR3^Xd"^GL+jDqQFH@-b!))fbL(0=p5#N6Y=gm!\
%=t;A,)fl@:W3esYqfB'/Xd2rj^p?9+W;?DUo=M-/j<_3&O4Xg8nVjt(+2n$THA73$^L%+@eL,\'cgc0$)'ZV1M2kAh:Caa]@]IkS
%33gV0/9M_(FaKLB"H-9A`?U9e=e*06hXjT&UC@,Ak7V@r7'A[:\cbuZ>qJC+'h`cm&';g]P807?77b^q7kOKMV`6md$W@EfP1]`M
%@?Tf@Qgdm1]HOtape[PXUM>(7n-77U2hOh\AZEu@QMOq,FD=G'VmMa)V)s$aLV"YR(&,OUacH,66pXGX#$8iBU?%EkN'nS=&QAPX
%C#"pW3_0c.$CRu'9]IV;Lmug]erJKpCclLdj&(dhQquSM[pp*ao#1qb_A=q"GWpS%nCsN#WTDV)Ma7)0rA$l"HMA\epX1Bf>0ER\
%TUi%0Rn!H@H+R[TEqWaT@1I=0oVIqT9=&2<F^g4\:Ci.r=[&16Wl)`SgYr&>S/&h=L`r&L6Bk`-nPkCb]P$F*IP4:I78H@;O!"I+
%>.c^Ag<)R:[!4)F/&6PSrXpnZC$j]2'PuC,<F/67:XkLX2B$Q^cLIEk"$%.]9a4]j-5XKs>jk76564pJKWpgVNLg[;B%Fs"or,i4
%@qhqZEl(X_aetuCHo=r#2i,\V'L(PM0d8<<o<-M>L<RsKh]c5T0%%\:G@i,Spb[GMV]aA",:#-KQs[V!=/*A;,T:s374e3nZ@%L0
%;ER63AFiGNad(WL"rAE0@+UPe>%-7m4N/W#9^IAk3PRsL/E]6EAU#t*KC2gmjXJJeBe@FFLa\s@K.INoHut`lUKI9J7.W"HkF%0d
%,OE&JYbYWdDgtCr6].14%J]ko,`.q7"MU7j"_@))'b[gK[8\kBBD+]WRGT`+3oZ"BA"^W?`KH\<,YUBC2:F`($]Dn&T(AjF0J"X_
%FmS0P+&DOU>qs!^E14S(>stc_lU$ur4gZi9g(9nrkHXJC7,#6OApeKWn,;^TdB$12,#oT]?HBk,NklpFo@s#3^*W$\U07tLXa!BP
%<f8,mo@Wd\/5d;0YJh?M"T(@hMtC=Sn>L*>CgG+-bboCBeqOcBGS!(eB"\3:6ILumrZpW7$!eE?SdNn";Jgu;;9"oTQh%l-l.c+0
%kD<3Zir">n]\FMG<s!;Qk?;N"R$,!Q4,LYHGsnm''dZ&i3'FC[HG8.XLg2C)e&@'+8eEV`-^VO+MQ'Y0Qr-Mab,1>/WM#W;lMGa>
%H<tp[>)L'*,;[i8;Lu@g`tt(Z$cl5lDIg+E25)(QR5Z5%fXZeD$*9Lubf!&o6,]<VW$oVm3O0?2s,`Xrb:0/RnU%)u.8n(mEs[iM
%=Z=]?O6r;47*e3d!NVM*J%`;<s6\aurHFkQf/C(]cWE-X8?/?C2n,<lL+]RHAh3(S'gm&oct-;*0q!Ci20>ggZ3n1mC;GKZFP.CN
%iG-4#eBhc.cpb%MF4AQJ=3sC9"j^%5QX)nD;(YnKL+^)iN`?Hn5Rh"B4&K41mM`YS`f3sE8^HCd20@LdFNbfLYG$k",\L)DmG;_-
%=ki1$nEH3'Z"+Z)+XKU(lhQClGLbuTRP>n0mUXsrh"j_N%]DjC5LuU`^=_"jcM6\pKT3Ool/CG(\OL@'V2ena.0f,9eTmJt7#@N*
%AKf7B_busGMtQ13c7.'m(:fmq(\L5S/3]kob/^$n<S!7p9'1(FKo5#WA5+;7$52Fn'J#iF'M8Pfq.#9'+N;7<BgH6P1YB7u<?F,:
%A5B>'=R6gJKIe#YA<[LLIbol806TuM[Y]<%H,X[crb;(W6V(B=16Y!JY%aIHdYLmZ6n3o@O@<*Po[snI6fVBWjeJ9gC,HAZ]o4Jj
%gtkCS4b^1<M(,KRH`:+iR.&eI@O7RV97(J5FI!_&4S=H60F>Dh2DJohNYAJ\<3n*_$7o^:`Tt<[bqA*=^1gm`I"=>m_n>i4)j-dn
%H>-Q/&PTV^4duP'qpENFZpFYZ<2,epJ%7T/b#nl7m:ZVYEW9#(pq0I19hZ<W7'k>SfnEF^Ne3IU[*"UWaRUcdIDqo]eoRurDOII"
%,Qil]f8<!!^IInpLQ,uAe'hE.I6o6HROpT7o::$1,ce[ONa$,IbJd;R+?7%Ue]8%F^)3Jbr8UEsG<])Hp8#`qj6V2BWpK)K+c,;0
%c@I2.C)#<5H)l['WSC`?FJ.a](G]]ff`Fh%nq.@Ib`FY^V56.k1M!+X,?N#:F&k9kA/!,"nt\,&?=hcO&&pE)r9O$4_NK[L7a`^\
%Y@khk3si&&\!1n?jCY2_H:?=/;4Gm?O$-G'pjh7#mBOEt'asK+QeB>6Lur$APFP02.HX6uP<cs?9Op\VH=RkW;'c(%0r-3RkA.>]
%Fg=u%Pb"A:?PJhaV"iadQ!!sNQR#j)7-6LfaIG%Z%4pJ-$5".q`g9VqF7V]Zep/Gp+b0Ofq'.YF?p,aHUHf^N4;"!LC;KL3A?ZIo
%(6M1h8Bn3]ZO0-3''&o9(!:UIMK?!i%i?pkP1A"Tn5C?2e6%/3(sD/hj!r'Sq;gqV)[aNF?'@6qEA<ji\1\AA]6uD"*LPQ5ophOY
%Pqo^,'A15!"UiE"UItd5a(A3c&uu3-lKS^(c-Bq"ZFW*9I(db8\kqX)7\t'Q&G/ER,ul,V%G@&8WHu1_GEF(C;:/7cHWjn,`RMe6
%0,KaLQX(,'r;NsHlJ[o3TQe^7\fU8ZFVY/GiNb4<0<Q?+UXnVh5_XNoKH!3UMn%oQLPo\1d6"fj\fNJQmjPAq]BFRNgfjh4U`M./
%@\o0$3F=pSg_WUFf"jteo2jM<K"J7W83dp7M+k6-<H9;@%?tlWo6>b4C7a#cW3HJ^o2h\C4SSGj?P/>k*D%^rDN?M7(Jr42PKAoK
%".q6oYdc;K+?#_X*;Ysq9#gJiDg,hLSo9,%fn^IYVFGph^H2rF#/s*+W5<i5&<LI0/!D7!;VCQW:mDJGXDqM6@fBg\Tj>lZ^^O!n
%p.;5R#!<]"#[-%adpfk4d]WdK\P4S+c$K(Ui8!)6U/C1-D2ic-cc32npal;OVd,!\<i#$4k=lKobrP0#iOLF9>LsB"MF\I4;Hq``
%<C-mMV1'4YOo"=s`DiWWSr9O<`Hnf\=/7%+Ml9084DNJ5a'@W"]KX=Xl'J7_:,9De+a-)mL@<I5L9XXdA3"h\V/RuX5;T(t,"gf,
%pZ97biT?2*7TV.qG;%lUStcuPHj:66LAN-jE!]Bq+&E<2*$8,OcTYkWL1*pj^-=WYnED2U=&n?Opo$>VX5pcZWek&<b#XBJ.KkhF
%=o-Bd"`9Wp988?G/qg7P5:@T3ADPN=U-)$/"hit52ok7L5,DS@'3>YX*DK?@!WV.\j6e;f-h`(=ipuX*PO75=ej97(HeN002h1e]
%gjcukpiUXu)^KoSs,$W(I5\b;7q;2Wel-5]H*(71Wn",=0CU1hHUC\$CVAqn7DpWYMj77aL0g%A;>QYdGNSkt?oLbcd:0S?8$?9S
%K?p5dm?>.t^K__R<S1FrhIdS8[5V#GeXHBcX9uSIfA2dqZqeAHFLo0ELH:FH@Qh4[%Ro@9`GX9(P9'I1_H7,sp%>Cq2n]ji2#9AL
%LM(<9G0Z'dhjir/ZspM*=]K*IfbJ[_rVb5@Ds_XAg1d+$ZG4HSg\^V<)m;GCV_7G_^A77@Xjc1%'m=CpJRQO!fl)Jf+"4RER+.-d
%'d>63:HM/cXZO/-SPYk=:4aYcMS,b*c"Si6:pXWO$7WG]$hdo!cR!U$[!QS-0r7&/)635*8c!Y4^*sI>F=rk6W4_3@]K?_m]jBcd
%jH;\gP&R=V6?F[B96,`\E$+Dg.?Z^AOR,``!dT3>+-FajlVj^ZS<(afc7eFoDg<ED;4V(n[g&'54mtHWZ+JN2nbkFiIbF.bIu#L1
%h,X+MFP2f5H)g,kMo-72VG$I^kZaPn=&#T;5Kl-gl&oM-EIKot2-j*3h7T#6l.'lIZ2!BRqt!e97@$C3CuYD'kGkCP6BuUZa;i`P
%F)'cfeT=CG1f@C]=>aA^/R@#d^R/cIUfogugn"StF@i`\q?$Q5<RW8]/rT@.BJj(YE>-V<]pNQGUft?ogZHgZ9fG/0P8ibPd_++P
%8]GIYm@pZGP4gOP)sWsDFE(9jh\;Z_RP)jn]\$s[obBPa2-gVjr(R$?Wp/YLZ,5%5R5J"]<_\oc>CFoLF@cb2QOBsn90+Y]jhP4g
%2-lAiLjH6@;,*Bu13,\2FSYdp,-'mj(*g''0<1HnYEJ3\Wp,[]ku,::GCBd9,B*W-h\RebF]8-<]OjB+)?2UM@c>eF*+k6_^,8IY
%QHf?bX.(!T"Aa:qqKmALeqMg=:%$giZqeFe75?$k-8X8X:aCT_JO2uZF5!9r6W+X&$=B-X*_ag9,[<&@<2%VjB+6:MOWmfBA?8_L
%B9uOb->Kfa8+]3!5)snVk"U>mo3q7WaIN03<n<&ocMa0CcokHf-M]cr\P)n4g^Br^-,n3cV,_Q8("+NW87^m2#9UN=hd1/L(ohsp
%-8S8joU3>HLa"Iq\Nb-_CmaQ"h4=F!GJ*W$k<jH.LI]5u(N@]cq;eZL]nu#s(,%9k7;;N@0Y-ALjajBo\t_liWM_lRJ\'Xl_`[e6
%1-0NK1F)B]Kled^c)(=F_t52ajn_=-,pVf]5S=s;:28uG9$(gTfRf]5glBu"iMENQF&':c.dal]HhV@%_QHEf'G+8>5.GVk'VNUn
%+&gI>!b?$`h:[Y09_Ma_jl?/t6L]nb):sFth,hOioPN2*/>::j]o1f6L1R6F4g@mE^QtE6;_"kCqZ]I$Y]d37>?JMh^URJK&_Vkc
%aI(?lN)iB7KlpJ^;XPnaAa];!ZZ<#5c5u4Z-/NGBFf$OXQ:'IGT3b'"MS/bp\0WkfC1hii?SI-<]BMi(b.Rb_d"eXM:>bQYCZdT'
%30pYIc2r5Ci0FA'kIb0&k#dEGPAW?2QE0j_Tobtp$1FF3$#KB3To_Ph!e9VkgeiK2g,JH^@)IZYMKus@?0hrC=d>'2?pc+pnV+R_
%q,1O:4d"Hbo$1H8,eoRfIQ#FF_HjN$8YnU]ShJl1II@ocEEE&GGH/-@A+e=H$YqtT$d>+tmo?p&(6IXI3@,D-LOYe2^;ATKjeI7\
%p^u'n^.^)5/p>PU__[)'S@KjGnQ\UJk=\Oo(X'd]?4.]&@OgJF1Vl8A=/<PnWJE!N.Z+;erX9`0=O5Y+Kt%nHpJ%oO8Yq7-p7orR
%:Geld<6CT&PK\lS#,pUsUm<_u=BDM!cZInf=$B_fiC]@ZVV@1.ET;CP^[cfH,,V^U,5cUnL8HP7(qpeD]]Zei5@t`Z>aG0a"9/SD
%7F\iu.d=F"U&S$_MfaY:pW/XUh&cH4EE?(e@&IoZ<9*fuokLMd2U(-id,uHk^6H)eB8p\_5@kaf6Ig.+N@PE/\`u2U``5EWE$KP]
%jSm6m_htq$O7qn;HEFdSr:g&IcL\`t>5cRV^&:HR0D?I]D0qULpGLiXC:9,VO0@0GiaJP:;!_<^(+I+Ip#JiWdmuW,Bl/7Xh1sg*
%W%.Wa[Kj4$+&_C_m\CZXNM^&(kY[`f/&Tj(VUbZ+2f?3FmeiJRK_Hq';jbc$k0QemX1!H:O12*ZhL9WMq3q!t[Q?dQZB?_?i*G(C
%FW)i+)rGgW"lBnK@o\P5et7?V-$<Bp_Zc'MF"U@Ff8A2ZKpVPQ0=r[(3]GWk=7n44$oVE(GEC5:p.ZpJe*Z%1r/oJXqsKsJ1f@Kp
%n+9?*G6D9c9CK78Gh\0fG!WSrnbIV/Rjc.DhL2aKh>NR]Akbp8(Tssk^>+.@V1A*mK>F>qW(EBJ#:j\6b/5,0m>3==>"5#a.QYPU
%8Q\sh%Qb,WI)RX$EDf(]"7A\L_PZ)o8U<tVChcu8OH>XS#?=\OD9=MJ)IM!\=]dpJkK>EVOed;HC/sQMc$Yo_3nPsGJsKDZ(V=t`
%**$]5)4Gr<8o!u447k!`58glK]">gd=\K^]9U8_L?^)A?:mP-r/Se2IET1Fp!bn'oV^9>=P8bGS=,g":mm[hk)meEqREq,ugs6\;
%^<VSOIVrE?jc(??Y,U5rW)/J<).$?,jn[[kcV:c4:#aB^EH;l,,p-8+]%?e"A'W/9oG10&!^,otZq5J\V:LRdGqH@H`FV"oamlWL
%dR_4eCTCV%HO&dJVKlT6EiU(E0_:l^o7FS25%Z0Cq4FjKN%?%5cO\^6n+!5D<NL*p#m@0_W45!Ro'N@0O5?cV%MgQ?S,&Yp3BkWP
%?--'E`l]rVcTu58Z20g\G#mrhf,B\Y.?phc:9-`e>Heh2oVOr(BDA(!N)II(:E&E_?Z>SmhTde(;'q%MGE!9N1/e0UhH+f:a/`u3
%ON"TLq,T&UQ:H@dd?DapY#t,dF:,/&NqFh)fhAqqP'&0RCsFLqeJ^^7HUuQl`0>!:1U>IEWW6%7!,(?67B->fCB272*#>^Z<3613
%;<tcn!$e;&iF0at@#J"cWn%10MToK3(p%AYgkaN`'s.O:XT=YMnm#1F.79Q'!=YT%o'srLlMMac;u\&rGs9@eR`c6>.,R]tiJ2fF
%0COg8(\:Kf?8Ia]TUc%WI&44RX73tjauB3Gj<*nh^@^k=?fX`QPeLLMSr`GrUC&t/-Zr6pM=O8ke%b0lrk"kq?c:bsMVn)*\f9qi
%ht7@Om/l^19)GbuYrnk.^[%6b<PQ*4L._6D?ZoBsfb6%<?,'q0bIed/Npli+;t<A)f.T3A6q4?)q-CbJ9!/O/k[o:oYI%=YTUYd`
%^[.r=@Ma*8f.Sn@RBQJ3nHG#mn+pTk-n.N+T'uM%Q6U"tC9G9)b*B8hG<sRF?,,`q^Z:gX3PXmHWT\(jMd=,BrNa>XKl3R+po[u4
%X.,I[4i_dFP0,$PeiVd`pb&6%^!M!%ZE[f-s!#2CQ[PN);T<dL_Y8:DlFc$I9/&4j?hFeVSO#?XGPtueW("Jd(V-lQE-[<f^[%4j
%pNe"?p&"d_cEf0aABWH81M^Ssc0im&\lghC";8-m]g2_YN<BM1+cle7Wf]Rigt]S]k-ON58/DF56A0Gbl@'fQrnZ)'bfK9$,-iua
%l<XA2RV]O<hpjs$2P*IIg=NNSI]HCQ4SPGJ)t3*:FU%+Clo3SKmu"Pso$RJ,qsj>d*Qkeaj86]:EnB0/cY?h%16dgDkA-^P\?N0o
%(!f$jn^k4OYMIh!lB/`*j2&4WfC(I:rqtcH`1&p)FcG@-E@:9Lc1"C'qH\Na\c#S42rE5j4h&b`(2pc+hq.ftj7<0D^-V?>GP/<"
%O7,+?0n&<R%2XMpnTA(+SUVj6DI:/eL$]8[qING2g$e6.4t:^*^7s3UqHZ8.\YP76otGlVn*4Qaeu!h%5KgIKC[UM4NTXW__7kA"
%n*9YtqsiM+.GT!Xji)ZHDZ2?&Z)aL:'ruc]/hSH>]D>h,QF!dNfC/!sGFe>72r<0Tl5r'X>>r-'^4%*F`Rr`0lM&/$Ip]s[Y?SHu
%f[i@ZFNM2D@UHmMj6F"Phi3+KG]$m'.r0gC",PdIITI$gZe;DX^4'-J&=\#Wl[A`c'7#%.^C0),CVRukI:'b4#=7#[jpQ+5]&p_U
%f,DP/n*=VPjM`&t=$0c88c.keYM[mUiQA&X^Y&^oRGVq+E"=V*)P]H%mJMm'oC%rjQb?8dS?EXmj\*3es7$$C@uG33WMj=Wh4)fS
%cfT<<g"KDSWSTNDff6&g`b@VS7:gp#[EV)U:=QUghT<A^E@VR3#$rm(43dGZEH[FiSuSi<EHJqRoH&*3G@#\-r8Vu3B1DXQUeb%g
%H\XfXh46NoE9?k[`buri9gi9j[s!2qlg7eMR,"1CZhX</,s;&!i`3*.%NE5ZZ8f2IGgn_@$5[<,[hC86=!-cm?&[@k4_lX'8'cNd
%^NQf?pB=J;DEV3LoPo-Urq^'h61;Y;Api*L4E_8fFfd5Y\D-EFc:0t3^7(\_4*u2K<H.`E24V.(rG:Z\lEdD7],Cbj@pRsJdIVqd
%rnT;AB&_3k1\9qX6YA<gZZ:Hk2XNXk8_3$"DJqqt-fOd"jml!dB*0C'Ts]WiOPVH.Hi)/P5'_RT2Od?XB?sUclpKKu0>7+#@5Aq]
%H1G*4W66b8eUEZoDr%#anZde'SMEiNL*ZNcN[bj[]BdnPl6dKs\*g\jDa/aICpa)t\2eWN$hhk`n*bGeW[C@[((Z1DSIL#XQIPBR
%((^$nM-]-tc^sehh5ssGhd8Q`+0pA[f6eiXbEKq5F4GT;OYl=R3p"7me2)ANl^<&Zdot?BBMQ:0?!35S-?jBf2,E[**,D/4hO@)T
%IpARO)tQ!6gC?\cpReY(*hSA%[O%I,7n'Z8p6iV^^rKP?b4oFUm+t(\YtijEVaFIJ`uhFcD%96(?_:8H8V3<')sX-Q_/*:>)SS2^
%1FK)Gg8f[^Y^)]1`6GN+\+n/6eSE3g,Op>4N;N9H^XD)bJ!Q-?K=ZiKI94)6X(*kX2Mr/\RPWFL@NrY63<N344_HRaF7]"ki8&UH
%7786jR9ubf>NHY'jqeC-411[NX!.)8NOVu;d58W54LnOBi>Q(I:)p72$^UW`gM62c5$40Nd\-Ed?EdXeZddA!)nL+H@ubR9h<s(F
%N3Bs7V'e>%kfu=n;'2Et@;kTDW188kQlWK]*=nM2`M>"`eSE%X)&dMF5u%%-dO08%_7[q!-[DpX:KDVBlClf+[oI;VW+V$r>O(qY
%L&s7/IqE5LfCr\>??VT\lA#&U`-u4"IscP)f7g1oo3G.m.Tnrq3S?T9m54.!nG;9Zm[jkdlBm"(:DQFB?mih?jmL^dS!V7RpsZS;
%pX:d>QQ9?acePNIHZ.1f`[9S]2-m-U@`'iKg9\T9KW,4H:/Q+K6TQa2W@*nP(ToWR#-d72@-Wa*V/=I/n+)-Ig+s_K^\mH%Fs#@c
%2tKdK#>hkT90*(C@]Beqf)Z;pH$n7+]f*.jE2%:N=?ULCbtUknNFs%hJFi[$hTb=ps*19q[G"^=Z''PeDi<p'#I;K-Z+b5;1dBi3
%1uI1o^>jF8T2$E)[rF1:oC46Zc!LFE=YCc;a.Q4pUc\O$9RRm%OLkI#<41pU>o$QRo30FbmO2j<%oCbo8/ceHmETT+e<G6]H-,'e
%S5\"%4%A%f2VY9]`-LDR3X9S_[bm^bLr%3)mF%<0//_`mLA%QSp&]Rcc)HKm%iqQ.]&5R,p7hj5q?&SjfR'-rIC[.O6et84Uq[s0
%$U,Z/9U[aF.>)ACTr[d=A[S9)FZ5bK@$f*r`:QMI`OKrgL)j(D?8&O%U232+9?shqn*D<\Muf<SFe/5tPQ><a[8u<B'h$D5gBcr]
%5<6>=#?/[`,DZ5pQe#A%h]H#QS`lTqS%eBm@9)G5HR?>%M?%hf[*L7F&/.b_#^9m/eh'C5.SgtTP`+hWhPp="FELd=cfY,@iDEmY
%$et9J_Y3!!q>To8N0F5.qtK!nD"bP?59F$Se5lHHWe3M.<edu^g3-S8A)1.t,9jglDtpu[\mu:WoiAIM5r.BfX'M+1GQ"_*rGAP*
%"#JUOa"!f"hj713EnMBB-DJPO[kBABJCM,3lVT=%==W1$YiiA&Qh7.t=b8QU"F5?2HUd=le;AJ]Zu9)qn_&RHLoHT9j_4);.kHFT
%d?=psD)"R"nVZk!%'-hK='gg.%q_kJT;u=ANgt9Q\%ZN^&2,XhL^1i@V]?GHMEsJIpSEJ_n&K$+%(et?@r)$I70&=@9*6U2-"TC+
%Uj!1*W]4PX_Rh9-14m1p(AW<iDOq9Mm\0&O>`tN,9#g.8ZXWtJLX0RmWUX0leJ0fS-.5p,>U)YeJIh#*Z9?^\GBZHa]2q1A)s39T
%-_8FI]M;V?6f%?OI];#2$$->pPtsoiOl@GYMF`/7#<KN:,d2c'S!!O:6Rt&NFWhT9Iq.6QfE3oqGMgC%8*;!L5;!B"1I#cq,Nd%[
%OjUUXR9d=fROMA+*B$-"1sEaGI!acKpj(L#>=Q3!k/X0`#A+M,c:&+Nk4]Be`f6&6)a.e$A0bt\AG`]K7RRI#Ajg/tgm2I<:,Fu"
%O1f'ri_@()kB1KDG;=:)<2eC>%4=N0:5*FGhf(>mku>_@.G7LO/tE>\,Gf<8)7jo>Uos:5-:=+pL!40BXX?K&:5/7]bAT0S\o]Et
%<is-iAE_I@:qghH4F:23_B#YmD=`c;NS`[5`Ikhs5Ap.,Kl_J!Bn*kn+>lYP68>9Va3aq_&([VeoH6s&V%$_Nk'D.b;!qWFB:d:9
%s8&n&2`:5B5W?6Z>n-%%Ut_GD_-G;b2>a=*s,!C*_fL$AC;kUkE8FH-U/1>!J]6G1R5P2]C)kcCG'eRko*OUDYYIZk42!@r^T`^^
%[]f*uX;o@&R7>lq]MWSR38+9jZ%)(I7f0>t9(LUd&),*>9U<#k,Q5SLCM?$Ee>aD-5EFCT,RNd.R)J[[b1V70q!mnO^%Vd)_:lS+
%F*uhe<tBHbB9$2uB<D2X3d%rRp8N1R=s'n+a.H,PcR7[NCZfZG<S&6upbk$:\r^2\^Ct<6g:#h3b\H:iYNbDo\_AVZ>>r9t01Lp?
%R!MZYkKf-0%5mUWe9]V:lM[lWQM[UrnD/ktlJkPr9[&f@40BL9Pp24aDbmd$-dJRo()PQI2(Li5#ktg+O(9H:-Iq-tiNRW@h7H`%
%DjS,7nY<>oKCX"p8:-2@`NF'+gfW1qYRE(HWREq7IJ9'0Q&OlUel.`tm]!#82:siGVQ:<?#+jURl5J;h/?(9DF:F6,]3U&IlZ6A1
%8%6G@C`Og=9uJ!lkN\9!]tE@KCmGQ=q,#])>.-aINdYhF:Pa%pUh9#ZluL\6e/q\3l-98)cr/]q>[Q>_mN/?oUsBM2+,>2unoc3!
%eW=tuaFfR?heB=u0^hsu<uSnh>1E&OYPQ+0_<Asjn\nQ'j@Jg[U^T_nYIo^YWt1)kk*sm;IeUOhn`#IJD*kdUBb$EQ]^kFMTWukS
%@:";(^7dZ3^GOg!"+!!]D=GH2I'M\rO8ad^0)<"><e\5T07,7rkdK8",K\MiY&3HY7A>P^$]-k?a&9:fO.30@)O(ULFj%g**Gg4+
%36gPdIWP&D8*-_A%2bZdRg6]1(b.38[^_3tnLl3/VOC``mgSY*gg-J]595,*esWjEkcC7'mm@mMUW_C=WPn:6Z3mj8GhLD.Y8q*B
%b"!I]ho"MHR`s'9h/,<ERbo.Mb$3>QFglHUSp!7PkfGsVroWU\HG.r<b+rsDeSG'POS0.Zct[p8R90:QFiW<ER.$6R?FdU>g"u3f
%ds4a3C3rV0(/fWhGEKmYQ.KjGWbpY>qQYh@57b'.5BuhrET^q@p+'M;)-,GkU2RF4N9-/q.c4q,)/DCen;Z"jZ2GufH6'HC4[SbS
%@X.l"2s4CIEM#`_R=UKue%<Sp\m5,I><I8>2Gbus9g7;Ag(r#O\_BX%fjYQ/gRe!;S8Bo$kqtXRQY_rUV>'Jr.c8=*:ZX(`l@ifd
%i5N"49GehrS.EE-J!C2!h;E[L"d/h(6LmO*Y-Z,,Z[(0gq_Snc)VQ\t`]ZiBl+Yr]Fk!&<52I2SjVO58dG6;0<?9PrhdST55I5<K
%!GeIA'.I![X%=e8[u+`D@r89U>'deqiN7*%/7?/9=Y4#]Y;%VIfPF3IoAp^Jln+`7>^.2E(>eVYXq!+g/`%Ofo7bJ+UJ[M7cKq7H
%.gt?A1":O'dsAK,/(NsRAIre(+EeeZ?<355ZT%E^a!#e(mH(T4+2la4fn$>fKCRuV]4TII-lJ@'b&6D_]2g[tM".b'+c&)?lFr\J
%m5an:r/i#j[Squ^lE=I^mSupRQcJVWM<q@ES23+sFM#3862R^E#8[4/P"QjqB+nj=]Qd@uE0G$EgrqoPq=`QY%`tc*S*r?_07(h1
%4![lf-A1mX4<ul*r82KbT"Q0kq9D?J<A'UHTtfQJh!AI`hiM*G@P!CbY9CHV@koGcLZB+KO_$+%*sBcW4?HE[[93mm](JlYk(2M'
%BkC7M)JYY>*;Sn6oki0jnLTFi=>.j0pSl[NT\GcDT*BRV)X]a<>1;,cI_E4*CG07,r&e?ZD(WeRD]qjD<Vp9ujT@BTDN)7]a3JnO
%LLV[]6>j-I)X]kGjkHJFjYj_bI=BRe1k%VIq=`kDY3J=IZ[qXCp\_XD7CKC)&"6<FrJc375<CcrL'rpY3;DR,7r.iEQf_RtF8B:r
%>RIM(oSDUClh'PM3[!4JB^NJt=P3IklaZ*.Z[\#5;u_j+]'CYb0+?r0W2pB][9e8th<h6r*7T9mS)_Pe;t"p*h]EnU*WNZ6XA%r<
%$`iktp#14?m%tbLYMLe7EAlolq5R5m5Aa"$2eu0:>dXL.g6);Slf4UQ:*'MBr`MEIPWq?fktguF^0#mX`i8F,'3;Ekcb/.R%3#UV
%ffD-YPk=[k)=+W:k#CZ=hX@fu(LK;)Y:nF4eX_F:3O'N7=-*rqkLD^[BI$.df)n6OKYHd(hp_`ug!t*.n%RpHomLgtnc)"OmaOCj
%Y!E$S829?':2QP>%G1P<%8s[D56()#q;mqaKFgK6#.g#!pj=#(KFk_l\pq9S7rBK'&44t_IKUgIOGtma,B_Bu,(pLo*E:AX,sUsM
%F8[26&4.e3ndG+t^<Vf;DpeSO#U/hqQgtCV&VL]^2jK@Eq$5=I6jOt.LX\QLZLoIB,M.E8#U/hqOm;\U[3,3_UAp)^6KiVHe_fCW
%&4-ZY<8Z/cr4V=/+G:=&?0^m"I;_@@GId]/63s:BNE![lQhD[(8b=):64!P^;Z/V)"<iHF:%_`eOhVX]&4-[$Pks->^U50Z&%V[&
%63s9W7]PAFdJSgS>OgSpKFn"=V>>!*#XSfjS*EN;,C^s72[CR[IRsE3XrlJ\r9IVf$6b)L%jTUXs(m/F?]+h$+b\3\0%D'(7h@um
%h,HVF+8IG7^H`&JoUG'JErG?R"98FN)t5'P!+5nX"98F<^lJHqJ.;8c!!'5(56:fb2W.(*!5Jg:#QOkWJ0+dl!#tDP!!$C/IKTWN
%Cqu)3!.YOR&HDg8!C$Vc!&ib*!!'e=r!39&fRP%E!!!u-,6.^O"+C@Q!,TH3!!%NYp^mK+YQ6ri!!"q87fWP)#5e`,!8)fD!<<*=
%n07o5?iti\!!$iNNrT01%JUM8!3cJg!WW3Yi(!bI^]s]B!!(Z%*ru?A)t5'P!+5nX"98F<^lJHqJ.;8c!!'5(56:fb2W.(*!5Jg:
%#QOkWJ0+dl!#tDP!!$C/IKTWNCqu)3!.YOR&HDg8!C$Vc!&ib*!!'e=r!39&fRP%E!!!u-,6.^O"+C@Q!,TH3!!%NYp^mK+YQ6ri
%!!"q87fWP)#5e`,!8)fD!<<*=n07o5?iti\!!$iNNrT01%JUM8!3cJg!WW3Yi(!bI^]s]B!!(Z%*ru?A)t5'P!+5nX"98F<^lJHq
%J.;8c!!'5(56:fb2W.(*!5Jg:#QOkWJ0+dl!#tDP!!$C/IKTWNCqu)3!.YOR&HDg8!C$Vc!&ib*!!'e=r!39&fRP%E!!!u-,6.^O
%"+C@Q!,TH3!!%NYp^mK+YQ6ri!!"q87fWP)#5e`,!8)fD!<<*=n07o5?iti\!!$iNNrT01%JUM8!3cJg!WW3Yi(!bI^]s]B!!(Z%
%*ru?A)t5'P!+5nX"98F<^lJHqJ.;8c!!'5(56:fb2W.(*!5Jg:#QOkWJ0+dl!#tDP!!$C/IKTWNCqu)3!.YOR&HDg8!C$Vc!&ib*
%!!'e=r!39&fRP%E!!!u-,6.^O"+C@Q!,TH3!!%NYp^mK+YQ6ri!!"q87fWP)#5e`,!8)fD!<<*=n07o5?iti\!!$iNNrT01%JUM8
%!3cJg!WW3Yi(!bI^]s]B!!(Z%*ru?A)t5'P!+5nX"98F<^lJHqJ.;8c!!'5(56:fb2W.(*!5Jg:#QOkWJ0+dl!#tDP!!$C/IKTWN
%Cqu)3!.YOR&HDg8!C$Vc!&ib*!!'e=r!39&fRP%E!!!u-,6.^O"+C@Q!,TH3!!%NYp^mK+YQ6ri!!"q87fWP)#5e`,!8)fD!<<*=
%n07o5?iti\!!$iNNrT01%JUM8!3cJg!WW3Yi(!bI^]s]B!!(Z%*ru?A)t5'P!+5nX"98F<^lJHqJ.;8c!!'5(56:fb2W.(*!5Jg:
%#QOkWJ0+dl!#tDP!!$C/IKTWNCqu)3!.YOR&HDg8!C$Vc!&ib*!!'e=r!39&fRP%E!!!u-,6.^O"+C@Q!,TH3!!%NYp^mK+YQ6ri
%!!"q87fWP)#5e`,!8)fD!<<*=n07o5@)MHPO!')eqJGm]q[nJm69g3R7R)J96KlH&IKUgIOH"])5CsG5kf;88lphUR#lPb>&cDu%
%#bdk`p^r/j68n[;r!5UpTq>Q(V&qu/+nYZYDrF1t64!P(KHEJc+_7@_PTN0s+nYZ_p[f[9+b]h3qAt(g+b\2a9DB*P&4/;O<dk/p
%K[:fF2LYcPKFh%mM'#"h+bWP>J&.0gKFk`*lG$TMO!')e6<ED$5CsG5#[Krkr(&b5#U/gT_N,gm&@0\(KFgJk<]rUp#J3o=Vd$S%
%\Q[>SI(1Vt=11k!>K=.JRSt=.>k@ldOX+@?pHu^S-,*I\<:f.WOeb9FfbQ&Ai$XN2GC?`]kE`RT%cK"hhUU1l#IPqe[,0P=?XK",
%_M7M+M*B5pdNH<%ml>i.>Gu?fX>EZE-1b%Cdsd)!0"YSm67OWhHsEU6l4?90-nf,bp=hr;O:-H6@*`TdB/R.^,pi1crpND7efFS\
%Z0"JP,?C3N\<?d:;5NACJL!;`.bfPhEuJr_lE%&3c#%Lc-ttY9lrQ)V8Y";\Q;l#S0R+$So#(<!c*7!Q2bN@)3-cJr`cSLE,70ge
%-`<Xgh`+r[ot<bk+d1VOPV$buJ_81'FL:/m.\#1Sg<e7.7ZAP[K08g@j9LrEV-`G/**"==FrQPgFkdEE5o@.eTh9ZGEZ.^:9*W@1
%6],'d8``R+AQbJ#65GK_/<b+C`%HnH=RLCSLkXQd[Jj/deo*s5<,OLI8t1s?6uq1Mi&f\ng(;HZM3hOXPPV*_>+M]Hk9ca:OquYh
%UUG5*g4DfT`G&O]3ngTm\<($f&Qp(B;Pt*18ZKtLoA!GZ7Nsk[8#`X0N[LYH!N08A:W(>^hr.NLY-*DVA4.%WD)j.*2fPKB[ZR^_
%EZHMY&s/Sl.ED.lH:cJFni^VYMu9^"-C(SESL_T7P(#8`g[aAkm.-%mb@e(m#<T)do"oV+L7DZ(Hq.qK'5!OaNheD,WE=6FrC30a
%Y,]NVg^(ege\4j8/<\_j/?,O".rfUa/ZEjS8U6o9\S`W%V;JCAP3NbdBjt=C)NsB^GA:-R,jgWPeuO%R+]N<Z8mPk&VhNRrq6>3E
%/9OOl@u7W9WIUcWWlh.WC#DWo;eLAi:mq$ba`6.<>t>!rJ>C\XaOQDp@e!bc!n+8PQ5uOXY3RIt;/Sb69\0$YWM^3R)(+&[V<-j]
%%7;Mj0o3Lsd\YqNEEpM_1/sZWfHe"1lAC*;!D04GTX^LaAWZ-)MC;&b@MMiWD6\bo.&t3#(3NrG"k?I=2T[%iP",*o08h6Xr%54e
%Yc/&Vb=,F9^shJ#i_n!HH+ru%Qf,Jq,EC!>nWRZc(K+`P?ZI_uWU4@KRu+?H=Opc#YZ8rN3k(ldm/F#PFL5'2HE*@\95IVW^6i*S
%[!g8eo$bl^SLp*oo"^0ZC]_M_@+^FfQ00&e\Ib@HMD$7i#Ap$'n#N1%ilp6E*jRPh(Qg34[eE=Xbt,,nI=cOc'T7<sFMAeA?=]L`
%UB3=PE73#i,@q\>TMlW;;K>O`^I<]Y6rFd]NEAXmqT'eD`o.0N,s/)=eAsmE(3+*=88/`',bqV(0TT*PA0-p%:]3QT!m_8Grm]=i
%2c*lHqO[GZaqAu[>P4nK75anN3%qTQrFm!Ed@XIke,?7`nn"VSr`%l/:,jqRate*/Ik!J?8_7bu'rl^+n)4+ae=Y90ak"B></[*u
%e<sFmp9i0<_mo"+<";Pc&/h$M'o/e^'q=N(Io.75Kq@EUQB[0YihZB(`cn3jAP!A!2t'\9d+'Ee&TXp9[5=6g>hY'![1'##;p3AK
%4uGR.Lm7=,A%,c5]^.8O$<2/J6'Cp9`_g<dPKAq#7G<pC?<13NNpZ&so_gJ%PdF`h3E5ZI`B/n+=d:;!VO,;J_3DAfEc_\l@b&;l
%`iWt+K(Tg0E]`$G7+\JfdhF]<hiDlMOi-d1;%fihF1qgX^4#[$:Va-#.ESMNE$RcaN8^Kfp@Ts]c)S?72XtK:]GH2FD+K)8id;g-
%3efrFF]>'X_8\d@(X=U80VR!"ca]9%:"j6]g4TkO;`@]4.k,k6(2/U>aX"m184-Ha`_NYA8Y2^jgNjTt=EJnjXr#:Z,'(!\MFb^d
%bgjA%N-MG8gRq/DrctDBVS>6faIk;M1)l3G`G,CI]"p-g@dtJr1Ep+.N20I^+p5uLb"TBCCur$$-4,^t6Y3"N-?6!I7+,R7WaWms
%e"dn^e(n!d9T](1.abdMb::O=g(';ASeHH?5`qM4GY*%g*BgIq_B@#0-OA7JC(..(kX=-B&BCZe.+6NjF(312lW$JIRRO'aT$1=M
%nWS5uaC6Go)`N_^8Tbg?1`sr,aX[c][42^0K?AQk""H(T\=+[+Pto;SPKo-&Lj!Jdb-Wi;),LN9B%$L,;^JGU\M@q-6a]f;(C\iQ
%m?:tB?t?X>B;uSd.atoQ[c6(Y#3pr0fhs[9O.q#6-=5UC>B0([L\U,-L((K-X>T.Fq./,gZKt,.ot4&2Wo,Y%Oci\/NTYGm))3\g
%m:8l.CH9!'Y+fsa<1TumkAHN[SS^ehp,f'.bC`4\JElgP4=G#8Ln6GASV*JL.TbF_bQm!uQhSB6D.Q&h1n/E+Y^"l'[@MKg,b8*e
%K<)F_FL2qM5G(h`AO6iLosnY@eYlb6X0=`9PteA)phi8lcHjaPC2BsJ!96&rQOZWb^H0K!lDY2MoV$"`+p3VCQH1q[f/>t<@rX6+
%7DGkJp:[iH6MiN]%WkM6k3F'X+tf=abjdi11m&`#[MdU\9bcS0W,*s^@Fi^rRi:\71:G[1PaeMaYaFZ.D/-k_3a,mZI2)!>O?+k(
%<$M"8Zrj-ueKZFZ=6N5==l'rMUKDf(_-lI2;<9SZQNA&+H>-L7r'7@nlFp#JN00S%qr1Hn2tJ8V=t6#k,C\5PF:Xdc^7NnH:nF].
%g@)&baG<';K#0BX6f]rp^!_uO1o""T<#d,!b@3+NUP:7Q70YE.!.A$ZP>5*'m$1"hW@['.1Q)ZM'4'<I3Uu[`-)hg]-)rSs!5oKq
%I\89tRL6&lAgG)c>8$$.-F<6O'4ss:f9\&%M=5&iUD.p:9oZG5<:7.nAnI/seFK9%9`\5.YFSWiVo03oWZk"JM;(5;(cdT(r2e*h
%eOV?CWN59;d*bFar(VU)o9C]Rj7^PQ4K07]qG-H?4>jFqe#,1R6-$\\YNR-TRRF_M#&6!%T*;'D=7&e5)(>OKBDse!ZO'lC/t#!o
%+OH>Cl4C?W)#O-m..U)*g^(PHRi7SN^#kmNg>r*F0dfgs#sYItTs%^[=Bm3\nuF'_a[]oRXQQW^FGZJuDNLm9eL]1q/J<uCJ<PAN
%P,OLXm,i@V-],-\8cjE*aDJG<.Nu&fNQn=/DGe,_<2/M?P+/El:DCua1AUFG>2ZDlp=-=b.T\rB;O'rc16PJ[Q2K9Sc,P%C$3*Gk
%-u*ARkXgUUWRN^;)8rLc+[9!*QEM+36Zo0>8[Q_Oo+bdnDUO0E8?F+JDF:Fdla^l@0[=Rl)!@nVS3Tl+Meh['\?>,O(+.0CK*tn5
%DB05seTuP-\+X"ONjmm6[uP6N-X6W#Wc&mt*1h&=[Q_knotBD:am%c(X+'X-n5%1NV\Fp\oLqK@WVq<J>k"Q~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 347252 39857 a
 currentpoint grestore moveto
 347252 39857 a 13741 57468
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  0.3 true 28.5114 neg
53.39331 neg 845.67274 28.5114 .5 Frame  gsave 3.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 1 1 1  setrgbcolor
gsave fill grestore stroke grestore gsave false 1 0.0 0.0  gsave 1
1 1  setrgbcolor currentrgbcolor grestore gsave 0.4 0.4 0.4  setrgbcolor
currentrgbcolor grestore 300 1.0 0. false tx@GradientDict begin GradientFill
end grestore gsave 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0.0157 0.102 0.608
TeXcolorrgb 0 TeXcolorgray 0.0157 0.102 0.608 TeXcolorrgb
0 TeXcolorgray 0.0157 0.102 0.608 TeXcolorrgb 50443 60222
a Fi(Abstract)p 0 TeXcolorgray 3591 78417 a Fh(Norb)72
b(ornenone,)684 b(whic)-72 b(h)645 b(has)g(b)72 b(oth)645
b(a)g(C=O)f(and)h(a)h(C=C)e(c)-72 b(hromophore)647 b(in)d(a)i(rigid)e
(bicyclic)h(h)-72 b(ydro)72 b(carb)g(on)646 b(frame-)3591
81738 y(w)-72 b(ork,)775 b(exhibits)760 b(optical)g(rotation)i(\(OR\))e
(an)h(order)h(of)f(magnitude)g(larger)g(than)g(that)h(of)f(similar)f
(molecules)g(with)3591 85058 y(only)1068 b(one)h(of)g(these)f(c)-72
b(hromophores)1070 b(\(e.g.,)1127 b Fg(\013)18 b Ff(\000)p
Fh(pinene\).)1829 b(Its)1069 b(OR)e(is)h(also)g(v)-72
b(ery)1068 b(sensitiv)-72 b(e)1068 b(to)h(appro)-72 b(ximations)3591
88379 y(in)1037 b(electronic)g(structure)i(calculations.)1735
b(The)1036 b(presen)-72 b(t)1038 b(study)f(demonstrates)h(a)g(no)-72
b(v)g(el)1037 b(approac)-72 b(h)1037 b(to)h(in)-72 b(terpret)3591
91700 y(optical)844 b(rotation)g(using)f(familiar)h(concepts)g(of)h(c)
-72 b(hemical)844 b(b)72 b(onding,)846 b(aided)d(b)-72
b(y)844 b(\014rst-principles)g(calculations.)1154 b(A)3591
95021 y(theoretical)1023 b(pro)72 b(cedure)1023 b(is)e(dev)-72
b(elop)72 b(ed)1022 b(for)g(analyzing)g(the)g(OR)f(tensor)h(comp)72
b(onen)-72 b(ts)1023 b(of)f(a)g(molecule)g(in)f(terms)3591
98342 y(of)924 b(individual)d(b)72 b(onds)923 b(and)g(lone)g(pairs.)
1394 b(The)923 b(link)f(b)72 b(et)-72 b(w)g(een)924 b(the)g(c)-72
b(hemists)923 b(b)72 b(ond)923 b(and)g(quan)-72 b(tum)924
b(mec)-72 b(hanics)924 b(is)3591 101663 y(pro)-72 b(vided)816
b(b)-72 b(y)815 b(lo)72 b(calized)814 b(molecular)i(orbitals)e
(obtained)i(from)g(densit)-72 b(y)815 b(functional)g(theory)i(\(DFT\))e
(calculations.)3591 104984 y(Delo)72 b(calization)769
b(of)g Fg(\031)868 b Fh(orbitals)768 b(is)h(sho)-72 b(wn)768
b(to)i(pla)-72 b(y)768 b(a)h(crucial)g(role)g(in)g(the)h(large)f(OR)f
(of)i(norb)72 b(ornenone,)782 b(as)769 b(hin)-72 b(ted)3591
108305 y(b)g(y)1078 b(the)g(DFT)f(delo)72 b(calization)1077
b(error)i(inheren)-72 b(t)1079 b(in)e(man)-72 b(y)1078
b(standard)g(functionals)g(and)f(con\014rmed)i(b)-72
b(y)1078 b(detailed)3591 111626 y(analysis.)1487 b(The)955
b(OR)f(con)-72 b(tributions)954 b(generated)i(b)-72 b(y)955
b(the)g(double)g(b)72 b(ond)954 b(in)g Fg(\013)18 b Ff(\000)p
Fh(pinene)955 b(are)g(ev)-72 b(en)955 b(stronger)h(than)3591
114946 y(that)795 b(of)f(norb)72 b(ornenone.)1107 b(The)793
b(isotropic)h(a)-72 b(v)g(erage,)802 b(observ)-72 b(ed)794
b(in)f(solution)g(or)h(in)f(gas)g(phase,)801 b(is)793
b(small)g(as)g(a)h(result)3591 118267 y(of)874 b(cancellation)f(of)g
(tensor)h(comp)72 b(onen)-72 b(ts)874 b(with)e(opp)72
b(osite)873 b(signs.)1243 b(The)873 b(electronic)g(coupling)g(and)g
(delo)72 b(calization)3591 121588 y(of)818 b(the)g(C=C)f
Fg(\031)916 b Fh(b)72 b(ond)817 b(and)h(the)g(C=O)e(o)-72
b(xygen)818 b Fg(\031)916 b Fh(lone)817 b(pair)h(in)f(norb)72
b(ornenone)818 b(selectiv)-72 b(ely)817 b(enhance)i(one)e(of)h(the)3591
124909 y(OR)831 b(tensor)h(comp)72 b(onen)-72 b(ts,)832
b(resulting)f(in)g(the)h(exceptionally)f(large)h(negativ)-72
b(e)832 b(isotropic)f(OR.)p 0 TeXcolorgray 118992 132297
630 77986 v 0 TeXcolorgray 134182 57468 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  0.3 true 28.5114 neg
60.36021 neg 845.67274 28.5114 .5 Frame  gsave 3.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 1 1 1  setrgbcolor
gsave fill grestore stroke grestore gsave false 1 0.0 0.0  gsave 1
1 1  setrgbcolor currentrgbcolor grestore gsave 0.4 0.4 0.4  setrgbcolor
currentrgbcolor grestore 300 1.0 0. false tx@GradientDict begin GradientFill
end grestore gsave 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0.0157 0.102 0.608 TeXcolorrgb
0 TeXcolorgray 0.0157 0.102 0.608 TeXcolorrgb 0 TeXcolorgray
0.0157 0.102 0.608 TeXcolorrgb 161614 60222 a Fi(F)-372
b(unctional)1488 b(T)-372 b(uning)p 0 TeXcolorgray 124032
71641 a Fh(F)-216 b(unctional)831 b(tuning)h(section)f(with)g
(2D-tuning)h(plot)f(and)h Fg(J)182471 70641 y Fe(2)184410
71641 y Fh(vs.)1118 b(N)134182 82471 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  0.1 true 28.5114 neg
60.36021 neg 845.67274 28.5114 .5 Frame  gsave 3.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 1 1 1  setrgbcolor
gsave fill grestore stroke grestore gsave false 1 0.0 0.0  gsave 1
1 1  setrgbcolor currentrgbcolor grestore gsave 0.4 0.4 0.4  setrgbcolor
currentrgbcolor grestore 300 1.0 0. false tx@GradientDict begin GradientFill
end grestore gsave 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0.0157 0.102 0.608 TeXcolorrgb
0 TeXcolorgray 0.0157 0.102 0.608 TeXcolorrgb 0 TeXcolorgray
0.0157 0.102 0.608 TeXcolorrgb 162158 85226 a Fi(Analysis)1489
b(Proto)124 b(col)p 0 TeXcolorgray 124032 96077 a Fh(Figure)832
b(of)g(Analysis)e(Proto)72 b(col)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 206860 104706 a
 gsave currentpoint currentpoint translate 180 neg rotate neg exch
neg exch translate
 206860
104706 a @beginspecial 0 @llx 0 @lly 153 @urx 59 @ury
4994 @rwi @setspecial
%%BeginDocument: figures/ublogo.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cntrd_stacked_full_color.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Stegner, Timothy
%%CreationDate: 8/25/09
%%BoundingBox: 0 0 153 59
%%HiResBoundingBox: 0 0 152.2911 58.2261
%%CropBox: 0 0 152.2911 58.2261
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039
%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE Cool Gray 9 CVC)
%%+ (PANTONE 2935)
%%CMYKCustomColor: 0 0 0 0.6500 (PANTONE Cool Gray 9 CVC)
%%+ 1 0.5300 0 0 (PANTONE 2935)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-08-25T10:13:09-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-08-25T10:13:09-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-08-25T10:13:09-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>100</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAZAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXz/rn/ADjRrF7qOoahDrcHK5mmnihaFxvIxdVLcj40rTOixdtxjEAxOzpcnZJlIni5+TwT&#xA;OgdGjdD0m51jWbHSbYqtxfzx28TOSFDSsFBYipoK5DLkEImR5AM8WMzkIjq+h/y8/ILUfKvm7T9f&#xA;n1eG5Sz9XlbpEylvVgeLZi3YyV6Zzes7WjlxmAjV/rd9puzTjmJcV15PZ80jtXYq8B1n/nGbVr7V&#xA;L6+j1yBfrU8s6RtC+3qOWCkhj4+GdFj7bjGIHCdg6XJ2SZSJ4uZ7ngkiNHI0bfaQlTTxBpnQAukI&#xA;o09j8rf8456vqmj6XrTaxBAt7DDdrB6TuVSQCRQW5LvxIrtmlz9sxhKUOE7bO2wdlmQjLi57vpbO&#xA;Xd+7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXwJnoTxLJfy0/wDJ&#xA;heXP+2jbf8nVzG1v9zP+qXJ0f97H3vrDzR+ZPkrytexWWvaj9TuZo/Wij9GeWsZYrWsUbjqp75yG&#xA;DRZcouAse8PS5tVjxmpGvmk3/K+fyo/6vn/Tref9Ucv/AJK1H837R+tq/lHB/O+w/qd/yvn8qP8A&#xA;q+f9Ot5/1Rx/krUfzftH61/lHB/O+w/qd/yvn8qP+r5/063n/VHH+StR/N+0frX+UcH877D+p8j3&#xA;Lq9xK6mqs7FT7E52EeTzEzZL6h8nfnV+WeneUdD0+81n0ruz0+1t7mL6tdtxkihVHXksRU0YdQaZ&#xA;yup7MzyySkI7GR6jv970ODX4Y44gy3AHQ/qTxPzx/Kt1DDXUAPjBcqfuMQOY/wDJeo/m/aP1t41+&#xA;E/xJ15f/ADA8l+YZfR0fV7e6uO1vyKSkDckRyBHI+QynNpMuPeUSA3Y9Rjn9JBZBmM3OxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8GalYXOnahc2F0hS5tJXgmQ7EPGxVh94&#xA;z0CExKII5F4ucDGRB6Jn5G1C307znoV9ctwtra/tpJnPRUWVSzfQN8q1UDLFIDmYlt00xHJEnvfV&#xA;fnn8pPK/nPUoNQ1eS6Se3hFugt5EReAZn3DI+9XOclpe0MmCJjGt3pdRo4ZTcnzX+bPkvT/J/nCX&#xA;SdPlklszDFPEZiGkHMEMGZQgPxKabdM6fs/UnNi4pc3n9dpxiycI5Uw3M1w30D5M/wCcfvJWteUd&#xA;L1q9vtRinvLZLicRywLGpYVNOULED5nOd1Pa+WGSUAI7Hz/W73B2ZjnASJluPL9TwCUIJXEZqgYh&#xA;Ce4rtnRB0Zq9n0T5a/5xx8mal5c0rUby81OK7vbO3uLiNJYAqySxK7qoMDEAMdqk5zeftnLGcogR&#xA;oE9/63e4uyscogkysjy/Ulnn/wD5x00rSPLl7rGg6hcvJp8L3M1teGN+ccQLScXRYuJCCoFDXLdJ&#xA;2xKcxGYG+2zXqey4xgZRJ273hMUssMqSxO0csZDJIhKsrA1BBG4IzfkW6YGtw+yvyl8y3nmPyBpe&#xA;pXzF70q8NzIR9toZGj5+5ZVBPvnFdoYRjzSiOT1mjynJiEjzZfmE5LsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdiryz81fyPsvNtw2saTMlhrjACbmD6FxxFAX4glWA25AH3HfNto&#xA;O1DhHDLeH2h12s7PGX1DaX3vBtb/ACk/MXR3cXOh3M0aVPrWq/WYyo/arFzoP9amdBi7Qwz5SHx2&#xA;dLk0OWPOPy3ZX5T/AD189+V7KLTdVsP0lZWwCx/WRJDcJGNgnq0IoOg5IT75iajsrFlPFE8JPdyc&#xA;rD2hlxipCwPgw/8AMrzwvnTzGNaFkbD9xHAbcyetvGWNefGPry8MzNFpfAhw3e7iavUeNPiqtmK5&#xA;luKz64/OfzU3ku28p2aw2VjDbi1muYwxnkjA4leRPFQw60FffNeOzcfinIdzd+TnntCfhiA2FUwv&#xA;SrqztdRt7m9tRfW0Lh5LMuY1lC78GYBjxPenbwzOyRJiQDR73DxyAkCRYe0L/wA5S6ooCr5ftwo2&#xA;AE70A/4DNH/IUf5x+Tt/5YP837f2Mc87/n75n8z6PNpEVrDpllcjjdGIs8rp3Tm1AFPei1PStK5l&#xA;aXsnHilxWZEOPqO055I8IFAsH8q6HZa3rMFhearbaPDKwDXd3y4AE0IXiOPL/XZR75nZ8phEkRMv&#xA;c4eDEJyokR977Q8raBp3l/y9Y6PppLWdnEFjcmpcsS7OSNquzFttt84nPllkmZS5l6zFjEIiI5BN&#xA;MpbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+V/+ckf/Jj/APRj&#xA;B+t863sb+4+Jec7W/vfg8szausfZH5XaZpsn5eeX5JLSF3ayiLO0akk07kjOL12SQzS3PN63SRHh&#xA;R9wZR+iNJ/5YoP8AkUn9MxPEl3lyOEO/RGk/8sUH/IpP6Y+JLvK8IYl+Z/kfypqnk7Vpbqyt4Li0&#xA;tZbi3vlRY5I5IkLL8aivEkUK98zNDqskcsQCSCeTjarBCcDY6c3x5nZvJvqz/nHXWL/Ufy7Ed25k&#xA;Gn3ctnbs259FUjkUV8FMpA9ts5LtjGI5tuot6bszIZYt+hp6fmqdg7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq81/Nu7/NqC707/AqyG3MchvvTitpPjDLw/v1Y9K9M2nZ&#xA;8dMQfG59Of6HA1pz7eF8eX6XhfmDyV+cXmHU31PWdHvru+kCq0rQqvwqKABUCqoHsM32HU6bHHhj&#xA;KIHvdPl02oyG5Akpb/yqj8yP+pdvf+ReW/n8H88Nf5HN/NLLNOT/AJyJ02xgsLG31OCztkEcEKwx&#xA;0VF6AVUnMSf5KRJJjZcqI1cRQuh7kR9e/wCclv5dU/5Ex/8ANOQ4ND/R+bLi1nn9jvr3/OS38uqf&#xA;8iY/+aceDQ/0fmvFrPP7Es1zSfz8123Nrq1tq11amnK3IKxtTcckTirfSMuxZNHjNxMQWvJj1UxU&#xA;rpQ0D8hPzH1WdBPYDTLVjR7i7dV4jv8AulLSH2+Gnvhy9rYIDY8R8mGPs3LI7ig+mvJXlHTvKXl2&#xA;10SxJkjgBaWdgA0srmruwHieg7Cgzl9TqJZpmZegwYRjgIhPMx252KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVCaxqKaZpF9qToZEsreW4aMGhYRIXKg+/HJ44cUhHvNMZyoE9zz7yx+d+n695f8w6zH&#xA;pc0Efl6GOeWFpFYyiUSEBSAKU9LNjn7LOOcI8X1uFh18ZxlIA+lNfIX5raL5r0q51KVF0iK3nFuB&#xA;dTRgOxQP8LHiOh6ZVq9BLDIRHqsdA26bVxyx4uTKLfX9CuLtbO31K1mvGXmttHNG0hWnLkEDFqcd&#xA;8xDhmBZBr3OQJxJq3n3kD82NZ1vWr208w2Nto9jbxM8V00hQNIJFUJWRqbqSc2Wr7PjjiDAmRLh6&#xA;fVSlIiQ4QHoMmv6DHFFNJqVqkU1TDI00YVwp4txJahodjTNaMMyao/JzOOPetvPMnl2xmEN7qlpa&#xA;zMAyxzTxRsQehAZgd8McM5CxEn4IOSI5kK1xrGkW0kcdxfW8MkwDRJJKil1Y0BUEioPtkRjkeQKT&#xA;IDqov5k8upbvcvqlottHIYJJzPEEWVaVjZi1AwqPh65IYZ3XCb9yPEjzsMW8/wD5jSaN5ch1Xywt&#xA;rrsrXiW0qRyiVEVopHLExN1rGMy9Jo+OfDkuO1tGo1BjG4Di3STVvz4sNC8uaTd6pp7y63qUDTNp&#xA;9u6hIirUpI7FnTkCCPhOX4+yjknIRPpieZacnaAxxBkPUej0HTvM+hX0dv6WoWrXFwqlbdJ43fkw&#xA;rxABqSPlmungnG7BoeTmxyRPVFWmraVeyPHZ3kFzIgq6QyJIVFabhSaZCWOUeYIZCQPIrdR1rR9M&#xA;CHUr+3shJX0zcypFyp148ytcYYpS+kE+5EpgczSA1Tzn5c0/QLrXWvYrnT7VWLPbSRyl2UV9NKNx&#xA;LnsK5Zj005TEKonvYTzRjEyvYJP+XX5n6X53ivJLWA2RtpfTigmkQzSJxDGTgvQCtOpy/WaGWCrN&#xA;21abVRzAkbLPzM/M+z8iRafJc2Ml9+kGlVRG6px9IKTWoNa88dFoTqLo1S6rVjCASLtilt/zkhpK&#xA;6lbWeq6De6alz6bCWQgkRzAFJOBCFkINajt0rmZLsaXCTGQlTjDtOPEAYkW9UOuaKJ5IDqFsJ4Qx&#xA;liM0fNBGCX5LWo4gEmvTNT4U6ui7HjHexnz5+Zui+WfLM+rWk1vqdyGWK2tYp0IaRiN2KljxUGpo&#xA;PbatcytJoZZcgibiPc0anUjHAy5vObP/AJyM1xfLd5q19o9rz9WO305IpivN3EjOzozPJwRY+oG5&#xA;2r4bKXY0OMREj5uAO05cBkY+5mP5Zfmpc+YtHutT8yJZaNbRyJHaTmdY0lJ5cxSV6jiVHzrmFrtA&#xA;MchGFyPXZy9LqjkjxSAiyvVfNmnR+WdY1jSbq21FtMtJ7njDKsqc4omkVXMZNK8MxMenkckYyBjx&#xA;EByJ5QIGQ3oMY/Kb80LvzlpmqX2qW9vp6adIi80YhOLqWLMXO1KZldoaEYZRESTxOPo9WcsSSKpm&#xA;un+YNB1KVotO1K1vZUHJo7eeOVgPEhGJpmDPDOO8gR8HLjOJ5G0flbJ2KuxV2KuxV2KuxVLfM1lP&#xA;f+W9Vsbccp7qzuIIl6VeSJlUb+5y3BIRnEnoQwyC4keT5L8p+bbby15b846BqFrML7WoIraEUC+n&#xA;JCZFYShqEbS1+imdfqNOcs8c4kVE28zgzDHCcZDeQWXOm3tt+UtrdTxNHDea0zWxYEc0S14lxX9n&#xA;lUV9jhjMHUEDpD9KmBGnBPWf6FTy1YR6X+Ynkz6q7/6VNpVxIWIJDXDp6iigHw7nBnnxYcl9OL7E&#xA;44cGXHXXh+1U8i+X/wBOx+c7NVDTxaXLdW/j6lvcxS0FO7BSv04NVm8Pwz/Sr5gstPi4/EHl+lBe&#xA;TLS681+ZPLHlqWr2lvKyFPCAytcz0/2PLLNTIYYTydf08g16cHLOEOg/tQ1/p91L5p1m08w3cFhq&#xA;LSS+vdal9aNJRKGJT6skzFmFaFlK8T48clCYGOJgCR5V+mmM4k5JCRAPnf6FfzZa30Nn5Xhkv4r1&#xA;Pqbiwu4PVC+iLyZV/vkikFGDUqvSmR08gTM1W+/yDPPE1AXe23zZT+af5aaD5SGnaZb66wf0JLt4&#xA;L9ZCkkrcUcwG3jcIW9MfC/h9s5iaDWzzXIx61t+m/wAeTfrNJDGABLz3/YxqXUTc/lteRJpkdpCm&#xA;sWTG6hMvCRza3Y4kSPIOSin2Ke4zKEKzg3fpP3xceU7wnavUPuKt540K1tPKnk7VoYmWbU7KQXUp&#xA;JKs0DhEArsKJ4YNLlJyZIn+E/ey1WMDHCXeEx812OlaDF5O86+UopINOuULKs1S4u7OdvV5mp2Ym&#xA;g36DKsE5ZPExZOY+4hnnEYcGXH9P6QXpv/OMfl36t5c1DXpUpNqU/oQsR/um3G5B/wAqR2B/1c1f&#xA;bea5iH80fe7DsnFUDLvP3Me/5yO12FfNenabLpsEno2okS9uvWIAmkYNwWN1UqOG5KsfDMjsbF+7&#xA;MgTz5CmntPKBMAgcuZt595F0aPWovNVoUeSO20m41K2t42ZV9e1kQRtxqS3FJXAB8c2OqycHAe+Q&#xA;HwLgaaHHxj+iT8RyZx/zjNJ5c/xBdxzRS/4h9J2tJgT6X1YhfUUitOQYDtmD22J8Ar6Ovvczskw4&#xA;j/P/AEJ1/wA5U/7yeW/+Ml3/AMRhyjsHnP4fpbu2Ppj73jrXdnH5h0m509pvMEsa2pltr2NqPOoU&#xA;fV0CuXeNaBF6fKmbrhJhIS9HPl97qjIccTG58uf3J55n1NNI/NHzbLcxSH6wdWtUVR8XK8glhjah&#xA;p8NZQflmPghx6eFdOE/Igt+afDmnfXiHzCW2OkWNx+WmqapKpN5YajbxWzhiAFuYz6lV6GvpLlss&#xA;hGeMehifsa4YwcBl1EvvR+o+UtFg/J3S/NEcbjV7rVGs5pC5KGILOaBOgP7td8rhqJHUnH/CI39z&#xA;KeGI08Z/xGX61+sfonRvIPln0tJS5udXS5vLq6uXmMfqRytAojVHjXkEXetRv0xx8U80/VQjQ2ru&#xA;tlkMYYoVG+LfdA+SLqSPW9bS3dUguNG1dJUh5rE6iwlcUD/Fx5KGHLJ6qPpjfScf90GvTy9Uq/my&#xA;+5CW0WsN+X149r6h0xNRi/SASvHkYj6Jen7NeXXvTJyMfGF/Vw7fpYgS8A1y4t/kjfLkaz+dvLS+&#xA;T0mF8BZm4ryP+lLQ3L+0XUntSvbIZjWKfi1W/wAunxZ4gDlh4fPa/f1fZWcS9S7FXYq7FWlZWFVI&#xA;I6VG/TbFUPe6nptihe9u4bVB1aaRIx97EYqicVdiqDutE0a7m9e7sLa4moB6ssSO1B0HJgTlkcso&#xA;igSGJgDzC+60zTbuJIbu0huIY9445Y1dVoKfCGBA2yMZyBsGkmIPNSGhaGJYphp1sJYePoyejHyT&#xA;h9jiaVHHtTpkvFnVWfmjgHcvtdG0i0d5LWxt7d5AVkeKJELKdyCVAqMEssjzJKiIHILbXQ9EtJhP&#xA;aafbW8y1AlihjRgDsfiUA4ZZZkUST8VEAOQbvNG0i9kEt5Y29zIBxDzRJIwHhVgcEcso8iQpiDzC&#xA;2XQdDl9P1dOtZPRXhDyhjbgoNaLUbCp7YRlmORPzXgHcqXulaZfFTe2cF0U+x60aSU+XIHBHJKPI&#xA;kJMQea19G0iS0Szext3tI25R27RIY1bfcIRxB3OIyyu7No4RVU22l6TNZpaNaW8tlGf3duY0aJSK&#xA;j4UpxFN8RkkDdm08Iqnmnnz8kLzzVrCzJ5gex0VOJg0dYC0MBVArGFRKiAuRU/COvfNppO1BijXD&#xA;cu++fv2dfqdAcsvqqPc9F8u6Dp+gaJZ6Np6lbSyjEcfI1Y92Zjt8TMSx9zmtzZTkmZS5lzseMQiI&#xA;jkEReaZpt6UN5aQ3Jj3jM0ayca+HIGmQjOUeRpkYg81sGl6TaXLXFvaW9vczVVpo40R35fEwLAAm&#xA;vGpwyySIok0oiB0daaPpNnK01pZW9vKwo0kUSIxB3oSoBxlklLYklAiByC690zTb4IL20huhHXgJ&#xA;o1k41605A0rTGM5R5EhJiDzU7TRNGs5fVtLC2t5Rt6kUKI2+3VQDhlllLYklAgByC+bSdKmuDczW&#xA;cElyVKGZ4kZypHEryIrShpgGSQFAmkmI7kFY2XlG7gntrGDT7iBHH1mGBIXQSL09RVBAYe+HxZ3d&#xA;m/ejgHci20TRmtFs2sLdrRG5pbmJDGG3+IJTiDud8Hiyu7NrwCqp0mjaPJax2kljbvaxGsVu0SGN&#xA;Sf5UIoOuIyyBuza8I5UtGg6GJGlGnWoldSjv6MfIqy8WUmm4K7EeGHxZ95+a8A7lS20rS7WKSG1s&#xA;4IIptpY4o0RX2p8QUAHbxwSySJskpEQOTrLSdKsWZrKygtWcUdoYkjJA7HiBXGWSUuZJQIgcgisg&#xA;ydirsVQ9tqOn3UssVtcxTywcfWjjdXZOVePIKSVrxNK4q8t8x+UdGsvMXlDQLWP1bi7upLnU52r6&#xA;k6RUkf1P8l/j2woWfmT5a8uaT+j7aOJIYtZ1W3klUJy9KCCPhKIgKt8XIGg6nbFWXaZ+ZGn3MWvX&#xA;F9aTaZa6CyLO85Uuxk5ALwWtGqoHGp3IxpKv5c87TaxrtzpMuly2TW9ul0JXkSSiykcElCf3chDV&#xA;4kk7HFWP/mRenTvNGk6hrli+oeT0haOeIL6sUd0zGkksZ+FqLx48vem+IVT1bVpPLehabY+UP9Ii&#xA;1+9rp10DGyRJcNUxRLI3Veg5rxHffFDIdU89ize4tYdOkuNRsbU32pW/qxpHaxBeVJZviHMruFUH&#xA;GkpNr35ha1LoGgz6NYNb3vmGVI4Gdon4BnIIUMRViACGZeIB3xpUx1/8yY9KiuQmmyXN1p8cUmpw&#xA;+rGi25nNI4jJ8QeVuoVAdu+NKyG+vbZ/Lc9/d2/+jG0a4ntZ13CenzZHU9wNjgVif5PaJaReR4Lu&#xA;4iWS41P1WuXkAYtEXZFQlv2OK1p03wlUo8u+aNE8p6bpbHT5TL5iuJJjdKvwJBJO/pKrULPwj4/u&#xA;0Hf3FVDIbb8zLaay166l0q7iTRHEcsNA0r1VmPIL8MfEJ8VW2+e2NJUdC84aJp1n5a0yw0m4tbfW&#xA;aGEEN6cRlBk/vX/vSS1dux+jFUe35hWAM0S2kz3R1CXTNPt1KVupIaepIjEhVjQn4mPT57Y0qUn8&#xA;37OPQ4tVudJuUV71rFvTIliHAjlIswAV61PELuSD23xpUwl/MOaKK0hk0W4i1i/klWx0qaSGKR44&#xA;QD6jM7ALyBoq7knb3xpVt35i0m+866VpNzo1ydUtoJL22lmoixM0W6qORRzsU5fZDdDiqW6L+Ymt&#xA;S/p/Vr7TZ5dHspnt7WO2WJzEbVGaXmVbkxaoJavAU236tKyDTvO9rfzaBDBayNJrltJdniVYW6Rq&#xA;CTJ02LtwB8cConWPNEdlqtvo1nbPf6xcxNOlqjLGqRJt6ksjbKpIoNjvirB/Nv5hXGs/l6s+k2st&#xA;vPqtyNMkbmlYZSwLRg1DN6iVoQOnWmGkM80vSNItNHcNpcNhHLCFvYCkRLJGpUes0YKv8PzwJeef&#xA;lvqt/oOoWui6x/xyvM0K32jO26pJKKm3Jb+ZSNvGn82EoTXy1eaHoFpLf29p62oa/qV5FpVrFxDt&#xA;BFMyKoLUWOJVj5segr8sVRVt+a1vJptpeTaTcxG61AacCpDwAlgvqC4oEcfaoF7j6caSmV1+YmjQ&#xA;nzEEUyny4kZuKMoEkknIemle6uvE++NKnlxaWutaMbe+t2WC9hHq28lOacwGoetHQ9+xGBXknlqA&#xA;XWhXvkq8jWA6VezS69qpFOFpA3NXWQ/7skoUU9kBwoZfpPnjTbT9B2dpo8tpoWryNbaXdckBLBqK&#xA;zQ7sFkJryZqnqRilW038yjqetzaVY6JeyPb3McFzKwCCGJ9jLKD9ih/YPxUr06Y0rGfIWu21rqPm&#xA;OfSdPfUL/UtRkMFja8I1jtIH4pLIzFURSZWp4kfTihkc2heZ7j8xrXzDNaW4060gazhQXBMgV2bl&#xA;MR6dK8XPw1+nFKP1fy1f6l560XVpBGdK0iGZgrmrG4mBX4Vofs8VauBWH3P5b+cLvyvrdrPJaC+1&#xA;LUTqKwguS557o8uygU+yAvzPgbQzryppup2Vu4urOy02FwPTsLIF6PvyklmITmzf6v0nAlLdQs/O&#xA;bLrWm/VbfUtP1IyfUbiacp6CTIEMcsZRiVQ/EOP+0VStfy71q0k8pW1jdQm20CO5ae4mUt+/noeS&#xA;RgitGJK1NBTfwLaoHU/y985Tr5tWC5gSLWp1lh4swllVW+GORyKJGquagbkin2eqhMZfJPmp7vyn&#xA;/pFmkWgQSxyOquyqzIsUZRCQZGVVBBJAqK07YpUrHyR5jsvNmsX0drYXEeoXIubTVLotJJbVrXhB&#xA;T4nHKg+Jfn2xQznWtOOp6Lf6bz9M3ttLb+pSvH1YynKntywJYfo2j+foPLUflaaG0tYoozatrMc7&#xA;O3oGorFB6an1OBoCzDxwqj7jyfPJ5t8v3MaRjQvL9o8dtGzEv6zL6a0WlPgVFNTirH4fIvnL/CHm&#xA;HT5HtBqGvXhuKhnqollUymSSlKcF2VV+ntiqaeYPI+sahpvlmyguo4Z9InUzXsIMfpRJGVHpIxer&#xA;DioFe++2KofzV5CvX1Xy/c6PZW17pulRSW8mmXUhjQrIKcyaNWtatsa9wcVR+reVNc1Kby1Hcm0F&#xA;ppl2b2+hhUxxL6QHoRRIQeQFSKmn0dMVQ/5heUdd8zXEVnHb2X1FQrW+ps0iXdrIGBkYAVWRWUUC&#xA;7b9T0xVE2nlbzBF58uteaeFrOOyjsbP1uUkzqqBmLU4hKzVJO9d9t8VQGgaPc+UPIF9D5ku4Fjlj&#xA;mLpEpJ9SflsXP947cgoAXt364qmX5a+VbnRdBt5dS+LVZYUjcEf3EK1ZIF8KFizf5RPgMSqlf+Xf&#xA;M1v57udf0pbeaK+0/wCpcp5GjNvIpDK/EI/NfhGw6+2KpLceUItNufJXla3kNwIbyXVb+Y7c2tgH&#xA;LstTQMz8F/28UM283Qa1daBeWWkRRvd3cTwB5ZDGsYkUqX2VqkV2GBKTeYvJs2u+SrbT3iWy1fT0&#xA;R9OaN+QimgHFAJAEPFwN9tvowqkepfl7rKt5VmgtLXUl0mzNtfWN1IUjaR0+OTkA/IcySRQ/TjaE&#xA;681+Utb1nypaaWsltFfRXcM3KBDHDBGjH+6U15emp9uXgOmKULYflqlv5vkvA3HQUgtiLXlVri5t&#xA;68Wm/m4t+8P8zUPjjas5uHmSB2gjEsyqTHGW4Bm7AtRqfdgV53pnkfzPJpvm211FLe3ufMTyTxXE&#xA;UzOFZiSkLLwU8RyI5V6dsKo7RPJus3D+W5NdWC3h8tQCO3tYHMpmnVFjWZ2IUKAEBCiu/ftiqN8q&#xA;eXda0fStcnnETa3qt1c3qcGqoaRf3SMxA6N9ArirGtC/LjzN5bn0S/0ZrU34gltdcErP6TiSQyLJ&#xA;txZ+FQO32Rir1LArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSPXv8AC36V0n9M8frn&#xA;qn9Fer6npevtSn+6vU6ceXxeGKp5irsVSDQf8IfpfVP0T6f6V9Z/0lXn63Pn8X958XDn/L8NcVT/&#xA;ABV2KuxV2KuxV2KuxV2KuxV2Kv8A/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:3851B12892F211DEA587F4C8D3C17A8D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3851B12992F211DEA587F4C8D3C17A8D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.000000</stDim:w>
            <stDim:h>2.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 2935</rdf:li>
               <rdf:li>PANTONE Cool Gray 9 CVC</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=45 Y=60 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=20 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>19.999998</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=40 Y=15 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>14.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=100 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=40 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=90 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=0</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>0</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=25</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>63</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=75</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>191</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 2935</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>52.999996</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE Cool Gray 9 CVC</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>65.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -58.2261 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 58.2261 li
152.291 58.2261 li
152.291 0 li
cp
clp
[1 0 0 1 0 0 ]ct
91.002 24.9165 mo
76.8799 24.9165 li
76.8799 19.1289 li
91.002 19.1323 li
92.8501 19.1323 94.9082 19.6675 94.9082 22.4746 cv
94.9082 24.7271 92.1143 24.9165 91.002 24.9165 cv
cp
76.8799 11.186 mo
81.1294 11.186 li
81.1294 12.5425 li
81.1294 14.209 80.0898 16.5034 76.8799 16.5034 cv
76.8799 11.186 li
cp
86.2197 12.2056 mo
86.2197 11.186 li
90.8184 11.186 li
93.1064 11.186 94.6748 11.7739 94.6748 13.8691 cv
94.6748 15.7295 92.6724 16.7397 90.8184 16.519 cv
83.9951 16.519 li
85.5435 15.3613 86.2197 13.6294 86.2197 12.2056 cv
cp
97.0439 17.7227 mo
97.0439 17.6694 li
99.1836 17.2734 101.165 15.8472 101.165 13.4966 cv
101.165 10.1416 98.1533 8.53076 94.561 8.50391 cv
86.2197 8.42871 li
86.2197 3.62158 li
86.2197 2.87549 86.5137 2.4458 87.2603 2.4458 cv
90.2495 2.4458 li
90.2495 0 li
76.7007 0 li
76.7007 2.4458 li
80.0889 2.4458 li
80.835 2.4458 81.1294 2.87549 81.1294 3.62158 cv
81.1294 8.42871 li
63.8525 8.42871 li
63.8525 11.0483 li
67.2886 11.0483 li
68.0405 11.0483 68.3364 12.1436 68.3364 12.8955 cv
68.3364 16.8286 li
61.8994 16.8286 61.0718 13.6133 61.0718 10.8799 cv
61.0718 3.62158 li
61.0718 2.87549 61.8628 2.4458 62.6094 2.4458 cv
65.3125 2.4458 li
65.3125 0 li
48.0615 0 li
48.0615 2.4458 li
51.3594 2.4458 li
52.1055 2.4458 52.3999 2.87549 52.3999 3.62158 cv
52.3999 10.7637 li
52.3999 16.6494 58.4956 18.9517 68.3364 18.9517 cv
68.3364 23.8691 li
68.3364 24.6436 67.8809 25.0537 67.1519 25.0537 cv
64.1836 25.0537 li
64.1836 27.5083 li
94.376 27.5747 li
94.561 27.5747 101.64 27.9448 101.64 22.3979 cv
101.64 19.6772 99.5796 18.0659 97.0439 17.7227 cv
cp
false sop
/0 
<<
/Name (PANTONE 2935)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 0.53 0 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
21.3999 40.1685 mo
21.3999 40.8301 21.5894 41.3311 22.2275 41.3311 cv
22.9253 41.3311 23.0747 40.8599 23.0747 40.1782 cv
23.0747 36.0186 li
25.6968 36.0186 li
25.6968 40.1284 li
25.6968 42.3892 24.3057 43.1279 22.1978 43.1279 cv
20.248 43.1279 18.7153 42.3296 18.7153 40.2686 cv
18.7153 36.0186 li
21.3999 36.0186 li
21.3999 40.1685 li
cp
f
26.6582 37.7998 mo
29.0342 37.7998 li
29.0342 38.6904 li
29.0542 38.6904 li
29.354 37.9604 30.0444 37.6704 30.7534 37.6763 cv
32.0908 37.6763 32.5801 38.377 32.5801 39.3896 cv
32.5801 43.0029 li
30.0645 43.0029 li
30.0645 40.0088 li
30.0645 39.709 30.0645 39.2998 29.624 39.2998 cv
29.1738 39.2998 29.1738 39.709 29.1738 40.0088 cv
29.1738 43.0029 li
26.6582 43.0029 li
26.6582 37.7998 li
cp
f
36.0552 37.2373 mo
33.5396 37.2373 li
33.5396 35.5029 li
36.0552 35.5029 li
36.0552 37.2373 li
cp
33.5396 37.7998 mo
36.0552 37.7998 li
36.0552 43.0029 li
33.5396 43.0029 li
33.5396 37.7998 li
cp
f
42.8892 37.7998 mo
41.3096 43.0029 li
38.0791 43.0029 li
36.5293 37.7998 li
39.1094 37.7998 li
39.7593 41.2061 li
39.7793 41.2061 li
40.4277 37.7998 li
42.8892 37.7998 li
cp
f
48.9985 41.0029 mo
48.9985 40.6948 li
48.9985 38.9365 48.2866 37.6763 46.2622 37.6763 cv
44.1504 37.6763 43.0313 38.5562 43.0313 40.3071 cv
43.0313 42.1138 44.1504 43.1279 46.2622 43.1279 cv
47.1445 43.1279 47.9463 43.0386 48.6177 42.8296 cv
48.6177 41.4805 li
48.2168 41.6934 47.5952 41.8154 46.9043 41.8154 cv
46.1616 41.8154 45.5498 41.6631 45.5098 41.0029 cv
48.9985 41.0029 li
cp
45.5 39.9092 mo
45.4697 39.498 45.6001 38.8765 46.1821 38.8765 cv
46.7534 38.8765 46.814 39.5083 46.814 39.9092 cv
45.5 39.9092 li
cp
f
52.0151 37.7998 mo
52.0142 38.9761 li
52.0342 38.9761 li
52.334 38.2358 52.834 37.6763 53.624 37.6763 cv
53.7739 37.6763 53.9341 37.6963 54.0342 37.7261 cv
54.0342 39.8174 li
53.9141 39.7671 53.6943 39.7373 53.4648 39.7373 cv
52.7646 39.7373 52.1748 40.3472 52.1748 41.1152 cv
52.1748 43.0029 li
49.6592 43.0029 li
49.6592 37.7998 li
52.0151 37.7998 li
cp
f
54.481 41.3398 mo
54.96 41.6333 55.6792 41.8154 56.3281 41.8154 cv
56.749 41.8154 57.2529 41.7344 57.2529 41.4717 cv
57.2529 40.8262 54.3311 41.4512 54.3311 39.4316 cv
54.3311 37.9336 56.0186 37.6748 57.2627 37.6748 cv
57.8921 37.6748 58.521 37.7642 59.1401 37.8936 cv
59.1401 39.29 li
58.6108 39.1084 58.0718 38.9873 57.5024 38.9873 cv
57.0713 38.9873 56.6279 39.0278 56.6279 39.3511 cv
56.6279 39.8945 59.5498 39.27 59.5498 41.2388 cv
59.5498 42.73 57.8521 43.1279 56.6582 43.1279 cv
55.9287 43.1279 55.1899 43.0088 54.481 42.8296 cv
54.481 41.3398 li
cp
f
62.7349 37.2373 mo
60.2192 37.2373 li
60.2192 35.5029 li
62.7349 35.5029 li
62.7349 37.2373 li
cp
60.2192 37.7998 mo
62.7349 37.7998 li
62.7349 43.0029 li
60.2192 43.0029 li
60.2192 37.7998 li
cp
f
64.1299 37.7998 mo
64.1299 36.5996 li
66.645 35.8296 li
66.645 37.7998 li
67.7852 37.7998 li
67.7852 39.2998 li
66.645 39.2998 li
66.645 40.7642 li
66.645 41.2026 66.8652 41.4419 67.1953 41.4419 cv
67.4253 41.4419 67.6055 41.4121 67.7852 41.3521 cv
67.7852 42.8579 li
67.2354 43.0181 66.6753 43.1279 66.0562 43.1279 cv
64.7588 43.1279 64.1299 42.478 64.1299 41.0991 cv
64.1299 39.2998 li
63.2397 39.2998 li
63.2397 37.7998 li
64.1299 37.7998 li
cp
f
70.3511 37.7998 mo
71 40.9946 li
71.02 40.9946 li
71.6392 37.7998 li
74.0566 37.7998 li
72.6782 42.1528 li
72.1787 43.7905 71.7095 45.2202 69.7417 45.2202 cv
69.0825 45.2202 68.583 45.1206 68.0938 45.0405 cv
68.0938 43.5605 li
68.2935 43.6206 68.4932 43.6606 68.8428 43.6606 cv
69.3423 43.6606 69.6318 43.4409 69.6318 43.1714 cv
69.6318 42.7817 69.2524 42.0229 69.0723 41.4438 cv
67.7441 37.7998 li
70.3511 37.7998 li
cp
f
78.4346 39.4331 mo
78.9336 39.1797 79.5728 38.9873 80.1724 38.9873 cv
80.8047 38.9873 81.4971 39.0684 81.5068 39.7466 cv
81.2764 39.7266 80.8745 39.6763 80.5234 39.6763 cv
79.2729 39.6763 77.835 39.9976 77.835 41.5928 cv
77.835 42.6904 78.7739 43.1279 79.7427 43.1279 cv
80.457 43.1216 81.0972 42.8413 81.4473 42.2515 cv
81.4668 42.2515 li
81.4668 43.0015 li
83.8037 43.0015 li
83.8037 39.8369 li
83.8037 37.9336 82.0562 37.6748 80.6138 37.6748 cv
79.6328 37.6748 79.1831 37.7642 78.4346 37.9731 cv
78.4346 39.4331 li
cp
81.5068 40.8789 mo
81.5068 41.3252 81.2461 41.8013 80.7241 41.8013 cv
80.3325 41.8013 80.1318 41.6626 80.1318 41.3052 cv
80.1318 40.77 80.7344 40.7202 81.2559 40.7202 cv
81.5068 40.7202 li
81.5068 40.8789 li
cp
f
85.0493 37.7998 mo
85.0493 36.5996 li
87.5649 35.8296 li
87.5649 37.7998 li
88.7051 37.7998 li
88.7051 39.2998 li
87.5649 39.2998 li
87.5649 40.7642 li
87.5649 41.2026 87.7852 41.4419 88.1152 41.4419 cv
88.3452 41.4419 88.5249 41.4121 88.7051 41.3521 cv
88.7051 42.8579 li
88.1553 43.0181 87.5952 43.1279 86.9761 43.1279 cv
85.6782 43.1279 85.0493 42.478 85.0493 41.0991 cv
85.0493 39.2998 li
84.1597 39.2998 li
84.1597 37.7998 li
85.0493 37.7998 li
cp
f
95.5044 37.3311 mo
96.2378 37.3311 li
96.7202 37.3311 97.1621 37.4922 97.1621 38.0156 cv
97.1621 38.5493 96.6499 38.6904 96.1777 38.6904 cv
95.5044 38.6904 li
95.5044 37.3311 li
cp
92.9888 43.0029 mo
97.0347 43.0029 li
98.4868 43.0029 99.9092 42.8232 99.9092 41.063 cv
99.9092 40.3594 99.3081 39.5986 98.3364 39.4692 cv
98.3364 39.4492 li
99.2739 39.2095 99.7842 38.7002 99.7842 37.7339 cv
99.7842 36.4063 98.5933 36.0186 97.3823 36.0186 cv
92.9888 36.0186 li
92.9888 43.0029 li
cp
95.5044 40.1279 mo
96.2246 40.1279 li
96.7246 40.1279 97.2246 40.2388 97.2246 40.8418 cv
97.2246 41.3843 96.6943 41.5654 96.2046 41.5654 cv
95.5044 41.5654 li
95.5044 40.1279 li
cp
f
106.659 43.0029 mo
104.284 43.0029 li
104.284 42.0967 li
104.264 42.0967 li
103.964 42.8267 103.273 43.1167 102.564 43.1265 cv
101.227 43.1265 100.737 42.4258 100.737 41.4131 cv
100.737 37.7998 li
103.253 37.7998 li
103.253 40.7944 li
103.253 41.0938 103.253 41.5029 103.693 41.5029 cv
104.144 41.5029 104.144 41.0938 104.144 40.7944 cv
104.144 37.7998 li
106.659 37.7998 li
106.659 43.0029 li
cp
f
108.042 39.2998 mo
107.122 39.2998 li
107.122 37.7998 li
108.042 37.7998 li
108.042 37.354 li
108.072 35.958 108.993 35.3779 110.294 35.3779 cv
110.884 35.3779 111.504 35.4678 111.854 35.564 cv
111.854 36.9487 li
111.734 36.9185 111.624 36.8779 111.304 36.8779 cv
110.984 36.8779 110.664 37.1006 110.664 37.5264 cv
110.664 37.7998 li
111.734 37.7998 li
111.734 39.2998 li
110.664 39.2998 li
110.664 43.0029 li
108.042 43.0029 li
108.042 39.2998 li
cp
f
112.494 39.2998 mo
111.574 39.2998 li
111.574 37.7998 li
112.494 37.7998 li
112.494 37.354 li
112.524 35.958 113.444 35.3779 114.746 35.3779 cv
115.336 35.3779 115.956 35.4678 116.306 35.564 cv
116.306 36.9487 li
116.186 36.9185 116.076 36.8779 115.756 36.8779 cv
115.436 36.8779 115.116 37.1006 115.116 37.5264 cv
115.116 37.7998 li
116.186 37.7998 li
116.186 39.2998 li
115.116 39.2998 li
115.116 43.0029 li
112.494 43.0029 li
112.494 39.2998 li
cp
f
116.956 39.4331 mo
117.455 39.1797 118.094 38.9873 118.694 38.9873 cv
119.326 38.9873 120.019 39.0684 120.028 39.7466 cv
119.798 39.7266 119.396 39.6763 119.045 39.6763 cv
117.795 39.6763 116.357 39.9976 116.357 41.5928 cv
116.357 42.6904 117.295 43.1279 118.264 43.1279 cv
118.979 43.1216 119.619 42.8413 119.969 42.2515 cv
119.989 42.2515 li
119.988 43.0015 li
122.325 43.0015 li
122.325 39.8369 li
122.325 37.9336 120.578 37.6748 119.135 37.6748 cv
118.154 37.6748 117.705 37.7642 116.956 37.9731 cv
116.956 39.4331 li
cp
120.028 40.8789 mo
120.028 41.3252 119.768 41.8013 119.246 41.8013 cv
118.854 41.8013 118.653 41.6626 118.653 41.3052 cv
118.653 40.77 119.256 40.7202 119.778 40.7202 cv
120.028 40.7202 li
120.028 40.8789 li
cp
f
125.696 35.5029 mo
125.696 43.0029 li
123.181 43.0029 li
123.181 35.5029 li
125.696 35.5029 li
cp
f
126.389 40.3062 mo
126.389 42.1079 127.511 43.1279 129.617 43.1279 cv
131.713 43.1279 132.855 42.1079 132.855 40.3062 cv
132.855 38.5547 131.713 37.6748 129.617 37.6748 cv
127.511 37.6748 126.389 38.5547 126.389 40.3062 cv
cp
129.074 40.3062 mo
129.074 39.6855 129.133 39.1748 129.617 39.1748 cv
130.102 39.1748 130.17 39.6855 130.17 40.3062 cv
130.17 41.0674 130.102 41.6279 129.617 41.6279 cv
129.133 41.6279 129.074 41.0674 129.074 40.3062 cv
cp
f
6.08398 47.7886 mo
6.38672 47.7886 6.45654 47.7188 6.68896 47.4961 cv
6.8877 47.4961 li
6.80615 47.9878 6.70068 48.8774 6.60693 49.6147 cv
6.24756 49.6499 li
6.23584 49.041 6.17773 48.7368 6.03711 48.5381 cv
5.87354 48.3271 5.51074 48.2568 4.80859 48.2568 cv
4.2002 48.2568 li
3.15918 53.6533 li
2.91309 54.9175 2.99512 54.9995 4.10645 55.0698 cv
4.04834 55.3975 li
0.468262 55.3975 li
0.526367 55.0698 li
1.55615 54.9995 1.66162 54.9175 1.90723 53.6533 cv
2.95996 48.2568 li
2.55078 48.2568 li
1.55615 48.2568 1.20508 48.3975 0.994629 48.6079 cv
0.818848 48.7837 0.620117 49.1113 0.362793 49.6499 cv
0 49.6499 li
0.19873 48.8774 0.421387 48.0928 0.561523 47.4961 cv
0.760742 47.4961 li
0.877441 47.7651 0.994629 47.7886 1.31055 47.7886 cv
6.08398 47.7886 li
cp
/1 
<<
/Name (PANTONE Cool Gray 9 CVC)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 0.65 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
6.66309 55.5386 mo
6.78027 54.9414 6.90918 54.3682 7.02588 53.7715 cv
8.09082 48.3921 li
8.18408 47.9248 8.17236 47.8662 7.7749 47.8662 cv
7.21338 47.8662 li
7.21338 47.5854 li
8.17236 47.3828 9.24414 47.0854 9.3374 47.0854 cv
9.47754 47.0854 9.50098 47.2876 9.43066 47.644 cv
8.49854 52.0513 li
8.52197 52.0513 li
9.32568 51.1387 10.1152 50.5889 10.6226 50.3545 cv
10.8569 50.2378 11.0908 50.1792 11.2661 50.1792 cv
11.5352 50.1792 11.9565 50.3193 11.7227 51.396 cv
11.5352 52.2617 11.313 53.2446 11.1021 54.2158 cv
11.0317 54.5205 11.0088 54.6255 11.1138 54.6255 cv
11.2075 54.6255 11.6289 54.3799 11.9331 54.1343 cv
12.085 54.4268 li
11.4531 55.0352 10.436 55.5386 10.1675 55.5386 cv
9.85205 55.5386 9.69629 55.269 9.86377 54.5674 cv
10.4932 51.8291 li
10.6108 51.3257 10.6343 51.0449 10.3633 51.0449 cv
9.92627 51.0449 8.81299 52.145 8.34717 52.9521 cv
8.27734 53.2798 7.98535 54.5674 7.91504 55.2222 cv
6.66309 55.5386 li
cp
f
16.6138 53.9141 mo
15.9478 54.5229 15.3374 54.7568 14.8794 54.7568 cv
14.1865 54.7568 14.0225 54.0664 14.0225 53.5161 cv
14.0225 53.4575 14.0342 53.3521 14.0454 53.2817 cv
15.1611 52.9307 17.1631 52.1929 17.1631 51.1157 cv
17.1631 50.5889 16.7539 50.1792 16.0298 50.1792 cv
15.3726 50.1792 14.668 50.542 14.1631 50.9053 cv
13.312 51.5254 12.7881 52.7549 12.7881 53.832 cv
12.7881 55.2002 13.5796 55.5386 14.1279 55.5386 cv
14.6328 55.5386 15.6543 55.3633 16.8125 54.1948 cv
16.6138 53.9141 li
cp
15.5137 50.6943 mo
15.6895 50.6943 16.0063 50.8115 16.0063 51.2446 cv
16.0063 51.9004 15.5015 52.4038 14.0928 52.8838 cv
14.2925 51.5605 14.7974 51.0103 15.126 50.8232 cv
15.2432 50.7529 15.3843 50.6943 15.5137 50.6943 cv
cp
f
20.3735 53.1016 mo
20.4795 53.7681 21.0425 55.1011 22.2007 55.1011 cv
23.1948 55.1011 23.6392 54.3765 23.6392 53.6396 cv
23.6392 52.9146 23.2417 52.4468 22.6099 52.0493 cv
22.3301 51.8735 li
21.6509 51.4409 20.937 50.8447 20.937 49.9092 cv
20.937 48.4941 22.1426 47.6167 23.5371 47.6167 cv
23.9126 47.6167 24.2993 47.6636 24.7212 47.8276 cv
24.9307 47.9092 25.0698 47.9678 25.186 48.0229 cv
25.1509 48.5249 25.1509 48.9922 25.1392 49.6401 cv
24.7798 49.6753 li
24.6978 49.0439 24.4634 48.085 23.3472 48.085 cv
22.4814 48.085 22.0605 48.6812 22.0605 49.3945 cv
22.0605 50.0146 22.5049 50.4004 23.0781 50.7744 cv
23.4756 51.0317 li
24.2349 51.5229 24.8423 52.1309 24.8423 53.0898 cv
24.8423 54.6099 23.5459 55.5693 22.084 55.5693 cv
21.1245 55.5693 20.2695 55.1714 20.0605 54.832 cv
20.0493 54.5752 20.0376 53.9434 20.0142 53.1367 cv
20.3735 53.1016 li
cp
f
28.4395 48.9053 mo
28.0537 50.4614 li
29.4927 50.4614 li
29.1182 50.8828 li
27.9482 50.9414 li
27.2813 53.9941 li
27.188 54.439 27.2344 54.6377 27.3516 54.6377 cv
27.562 54.6377 28.1118 54.1816 28.4043 53.9009 cv
28.4277 53.9243 li
28.6035 54.1465 li
28.229 54.6143 27.1064 55.5386 26.5244 55.5386 cv
26.1636 55.5386 25.9067 55.1289 26.1401 54.041 cv
26.8037 50.9414 li
25.9185 50.9414 li
25.8247 50.7891 li
26.1748 50.4614 li
26.9087 50.4614 li
27.1182 49.5957 li
28.2876 48.7886 li
28.4395 48.9053 li
cp
f
32.6167 53.4409 mo
32.3706 54.6479 li
32.2183 55.4097 32.5112 55.5386 32.6753 55.5386 cv
32.8984 55.5386 33.9297 55.0347 34.5845 54.4253 cv
34.4443 54.1323 li
34.1284 54.3784 33.707 54.624 33.5903 54.624 cv
33.4966 54.624 33.5083 54.519 33.5669 54.2144 cv
33.8125 52.8901 34.105 51.5542 34.3623 50.3408 cv
34.105 50.3291 33.918 50.3174 33.6953 50.2715 cv
33.4146 50.2139 33.1914 50.1792 33.0273 50.1792 cv
32.1362 50.1792 31.106 50.6641 30.5908 51.1675 cv
29.9355 51.8003 29.3037 53.1011 29.3037 54.249 cv
29.3037 55.269 29.7363 55.5386 30.0293 55.5386 cv
30.2749 55.5386 30.9536 55.1279 31.1997 54.9175 cv
31.6445 54.5542 32.1948 53.9917 32.5933 53.4409 cv
32.6167 53.4409 li
cp
32.4526 50.7104 mo
32.7344 50.7104 32.9336 50.7456 33.1094 50.8276 cv
33.0742 51.2378 32.7813 52.4448 32.6636 52.7026 cv
32.4175 53.1128 32.019 53.605 31.6797 53.98 cv
31.2813 54.4019 30.9302 54.6362 30.8247 54.6362 cv
30.6729 54.6362 30.5674 54.4365 30.5674 54.0386 cv
30.5674 53.5112 30.7075 52.7261 31.0005 52.0464 cv
31.3281 51.2729 31.6563 50.9917 31.9487 50.8276 cv
32.1245 50.7339 32.312 50.7104 32.4526 50.7104 cv
cp
f
37.9282 48.9053 mo
37.542 50.4614 li
38.981 50.4614 li
38.6064 50.8828 li
37.4365 50.9414 li
36.7695 53.9941 li
36.6763 54.439 36.7231 54.6377 36.8398 54.6377 cv
37.0508 54.6377 37.6006 54.1816 37.8931 53.9009 cv
37.9165 53.9243 li
38.0918 54.1465 li
37.7173 54.6143 36.5947 55.5386 36.0127 55.5386 cv
35.6519 55.5386 35.395 55.1289 35.6284 54.041 cv
36.292 50.9414 li
35.4067 50.9414 li
35.313 50.7891 li
35.6636 50.4614 li
36.397 50.4614 li
36.6064 49.5957 li
37.7759 48.7886 li
37.9282 48.9053 li
cp
f
42.6611 53.9141 mo
41.9946 54.5229 41.3843 54.7568 40.9263 54.7568 cv
40.2334 54.7568 40.0693 54.0664 40.0693 53.5161 cv
40.0693 53.4575 40.0811 53.3521 40.0928 53.2817 cv
41.208 52.9307 43.21 52.1929 43.21 51.1157 cv
43.21 50.5889 42.8013 50.1792 42.0771 50.1792 cv
41.4194 50.1792 40.7148 50.542 40.21 50.9053 cv
39.3589 51.5254 38.835 52.7549 38.835 53.832 cv
38.835 55.2002 39.627 55.5386 40.1748 55.5386 cv
40.6797 55.5386 41.7012 55.3633 42.8594 54.1948 cv
42.6611 53.9141 li
cp
41.5605 50.6943 mo
41.7363 50.6943 42.0537 50.8115 42.0537 51.2446 cv
42.0537 51.9004 41.5488 52.4038 40.1396 52.8838 cv
40.3394 51.5605 40.8442 51.0103 41.1729 50.8232 cv
41.2905 50.7529 41.4312 50.6943 41.5605 50.6943 cv
cp
f
50.1782 47.7886 mo
50.1079 48.1162 li
49.2305 48.1865 49.1133 48.2686 48.8794 49.5337 cv
48.4111 51.9932 li
48.0244 54.0073 48.6104 54.8979 49.8975 54.8979 cv
51.2075 54.8979 52.0732 53.8438 52.4829 51.6533 cv
52.6235 50.9507 li
52.8574 49.7207 52.9277 49.0767 52.939 48.7139 cv
52.9624 48.3037 52.6816 48.1514 51.8979 48.1162 cv
51.9683 47.7886 li
54.8579 47.7886 li
54.7993 48.1162 li
54.2026 48.1396 53.8516 48.3037 53.7231 48.7139 cv
53.606 49.0767 53.4424 49.7207 53.208 50.9507 cv
53.0327 51.8643 li
52.8223 52.9771 52.436 54.0313 51.6641 54.7339 cv
51.0908 55.2568 50.2134 55.5693 49.5229 55.5693 cv
48.8794 55.5693 48.1064 55.4072 47.6025 54.9438 cv
47.0747 54.4409 46.8638 53.5742 47.1333 52.1572 cv
47.626 49.5337 li
47.8721 48.2686 47.79 48.1865 46.8638 48.1162 cv
46.9224 47.7886 li
50.1782 47.7886 li
cp
f
54.1064 51.3726 mo
54.7852 50.729 55.6509 50.1792 56.0371 50.1792 cv
56.4229 50.1792 56.4346 50.5889 56.2827 51.2441 cv
56.084 52.0981 li
56.1191 52.0981 li
56.9111 51.1387 57.7129 50.5889 58.1313 50.3896 cv
58.4458 50.2378 58.6553 50.1792 58.8301 50.1792 cv
59.0859 50.1792 59.541 50.3193 59.2256 51.6533 cv
59.0742 52.2617 58.8418 53.2446 58.6235 54.2046 cv
58.5532 54.5205 58.5298 54.6255 58.6118 54.6255 cv
58.7168 54.6255 59.1382 54.3799 59.4541 54.1343 cv
59.6064 54.4268 li
58.9629 55.0352 57.9458 55.5386 57.7002 55.5386 cv
57.3501 55.5386 57.2104 55.269 57.3853 54.5674 cv
58.0498 51.8291 li
58.1665 51.3257 58.2129 51.0449 57.9341 51.0449 cv
57.5386 51.0449 56.353 52.2036 55.897 53.0107 cv
55.8149 53.2798 55.5342 54.5674 55.4639 55.2222 cv
55.4521 55.2222 li
54.1885 55.5386 li
54.3643 54.8945 54.5044 54.2627 54.645 53.6191 cv
55.0659 51.7002 li
55.1597 51.2793 55.1948 51.1152 55.1011 51.1152 cv
54.9844 51.1152 54.5396 51.396 54.2588 51.665 cv
54.1064 51.3726 li
cp
f
63.1704 48.001 mo
63.1704 48.4116 62.8423 48.7866 62.373 48.7866 cv
61.9858 48.7866 61.7632 48.564 61.7515 48.2007 cv
61.7515 47.8721 62.0098 47.415 62.5488 47.415 cv
62.9595 47.415 63.1704 47.708 63.1704 48.001 cv
cp
60.373 51.3726 mo
61.0752 50.729 61.9971 50.1792 62.4395 50.1792 cv
62.8477 50.1792 62.8125 50.5889 62.6841 51.127 cv
61.9209 54.2275 li
61.8506 54.4971 61.8506 54.6021 61.9326 54.6021 cv
62.0264 54.6021 62.4707 54.333 62.8218 54.064 cv
62.9854 54.3447 li
62.4238 54.8716 61.3242 55.5386 60.9849 55.5386 cv
60.7158 55.5386 60.5054 55.3394 60.6689 54.6489 cv
61.3906 51.6533 li
61.4961 51.2207 61.5078 51.127 61.4258 51.127 cv
61.3091 51.127 60.8057 51.4194 60.5249 51.665 cv
60.373 51.3726 li
cp
f
63.4243 51.4546 mo
63.9272 50.8931 64.7461 50.1792 65.2002 50.1792 cv
65.5371 50.1792 65.6187 50.6006 65.6768 51.396 cv
65.7231 52.0981 65.7813 53.3032 65.7813 54.1577 cv
65.8047 54.1577 li
66.1909 53.6543 66.4482 53.2915 66.7524 52.8472 cv
67.1621 52.2505 67.4546 51.7471 67.4546 51.314 cv
67.4546 51.0332 67.3257 50.8462 67.3257 50.7642 cv
67.314 50.4834 67.6187 50.1792 67.9707 50.1792 cv
68.2993 50.1792 68.5454 50.4248 68.5454 50.8228 cv
68.5454 51.1738 68.3462 51.478 67.6895 52.332 cv
66.9634 53.2681 65.9688 54.6724 65.2349 55.5386 cv
64.7813 55.5386 li
64.7578 54.5791 64.6528 52.3789 64.5825 51.9346 cv
64.5356 51.4546 64.5122 51.1621 64.3721 51.1621 cv
64.2432 51.1621 63.9858 51.3374 63.5527 51.7119 cv
63.4243 51.4546 li
cp
f
72.604 53.9141 mo
71.9375 54.5229 71.3271 54.7568 70.8691 54.7568 cv
70.1763 54.7568 70.0122 54.0664 70.0122 53.5161 cv
70.0122 53.4575 70.0239 53.3521 70.0356 53.2817 cv
71.1509 52.9307 73.1528 52.1929 73.1528 51.1157 cv
73.1528 50.5889 72.7441 50.1792 72.02 50.1792 cv
71.3623 50.1792 70.6577 50.542 70.1528 50.9053 cv
69.3018 51.5254 68.7778 52.7549 68.7778 53.832 cv
68.7778 55.2002 69.5693 55.5386 70.1177 55.5386 cv
70.6226 55.5386 71.644 55.3633 72.8022 54.1948 cv
72.604 53.9141 li
cp
71.5034 50.6943 mo
71.6797 50.6943 71.9966 50.8115 71.9966 51.2446 cv
71.9966 51.9004 71.4917 52.4038 70.0825 52.8838 cv
70.2822 51.5605 70.7871 51.0103 71.1157 50.8232 cv
71.2334 50.7529 71.374 50.6943 71.5034 50.6943 cv
cp
f
73.6411 51.3735 mo
74.3198 50.73 75.1265 50.1802 75.5234 50.1802 cv
75.8271 50.1802 75.8389 50.5894 75.7451 50.999 cv
75.5352 51.8882 li
75.5703 51.8882 li
76.1313 50.8818 76.7983 50.1802 77.1377 50.1802 cv
77.395 50.1802 77.6523 50.2969 77.769 50.4961 cv
77.8628 50.6479 77.8276 50.8818 77.7344 51.0342 cv
77.6055 51.2446 77.5 51.3384 77.3833 51.4204 cv
77.2661 51.502 77.1489 51.5137 77.0322 51.4116 cv
76.915 51.3179 76.7632 51.2715 76.6577 51.2715 cv
76.5405 51.2715 76.3652 51.3062 76.1079 51.6572 cv
75.8271 52.0195 75.6284 52.4053 75.4766 52.8828 cv
75.2432 53.9941 75.0913 54.8013 75.0679 55.1992 cv
75.0562 55.1992 li
73.8052 55.5386 li
73.9453 54.9067 74.0859 54.2866 74.2148 53.6431 cv
74.6006 51.7593 li
74.6943 51.2798 74.7061 51.1162 74.624 51.1162 cv
74.519 51.1162 74.0625 51.4204 73.7935 51.666 cv
73.6411 51.3735 li
cp
f
81.3989 50.7847 mo
81.3989 50.9604 81.3052 51.1362 81.1528 51.25 cv
80.9536 51.4019 80.813 51.3901 80.731 51.3008 cv
80.5195 51.0659 80.1914 50.8193 79.8242 50.8193 cv
79.5166 50.8193 79.2212 51.0542 79.2212 51.418 cv
79.2212 51.77 79.6704 52.063 80.0493 52.2744 cv
80.7544 52.6729 81.0947 53.0483 81.0947 53.5527 cv
81.083 54.5381 79.9663 55.5386 78.8379 55.5386 cv
78.3965 55.5386 77.6479 55.2256 77.6362 54.8076 cv
77.6362 54.5732 77.7998 54.3389 77.9756 54.2329 cv
78.1626 54.1157 78.3032 54.1509 78.4199 54.2798 cv
78.8027 54.6904 79.2212 54.8667 79.5522 54.8667 cv
79.8481 54.8667 80.1914 54.6201 80.1914 54.2563 cv
80.1914 53.9868 80.085 53.7285 79.5049 53.3418 cv
79.0005 53.0015 78.3618 52.7314 78.3618 52.063 cv
78.3618 51.7466 78.4312 51.2773 78.9888 50.7847 cv
79.3984 50.4351 79.9312 50.1792 80.4258 50.1792 cv
80.9419 50.1792 81.3989 50.4585 81.3989 50.7847 cv
cp
f
84.7446 48.001 mo
84.7446 48.4116 84.416 48.7866 83.9473 48.7866 cv
83.5601 48.7866 83.3374 48.564 83.3257 48.2007 cv
83.3257 47.8721 83.5835 47.415 84.123 47.415 cv
84.5332 47.415 84.7446 47.708 84.7446 48.001 cv
cp
81.9468 51.3726 mo
82.6489 50.729 83.5708 50.1792 84.0137 50.1792 cv
84.4219 50.1792 84.3867 50.5889 84.2583 51.127 cv
83.4946 54.2275 li
83.4248 54.4971 83.4248 54.6021 83.5063 54.6021 cv
83.6001 54.6021 84.0449 54.333 84.3955 54.064 cv
84.5596 54.3447 li
83.998 54.8716 82.8979 55.5386 82.5586 55.5386 cv
82.2896 55.5386 82.0791 55.3394 82.2432 54.6489 cv
82.9648 51.6533 li
83.0703 51.2207 83.0815 51.127 83 51.127 cv
82.8828 51.127 82.3799 51.4194 82.0991 51.665 cv
81.9468 51.3726 li
cp
f
87.9927 48.9053 mo
87.6064 50.4614 li
89.0454 50.4614 li
88.6709 50.8828 li
87.501 50.9414 li
86.8345 53.9941 li
86.7407 54.439 86.7876 54.6377 86.9043 54.6377 cv
87.1152 54.6377 87.665 54.1816 87.9575 53.9009 cv
87.981 53.9243 li
88.1563 54.1465 li
87.7817 54.6143 86.6592 55.5386 86.0771 55.5386 cv
85.7163 55.5386 85.4595 55.1289 85.6929 54.041 cv
86.3564 50.9414 li
85.4712 50.9414 li
85.3774 50.7891 li
85.728 50.4614 li
86.4614 50.4614 li
86.6709 49.5957 li
87.8403 48.7886 li
87.9927 48.9053 li
cp
f
88.8442 51.4658 mo
89.3589 50.8926 90.1431 50.1792 90.5986 50.1792 cv
90.9136 50.1792 91.0303 50.6001 91.1235 51.4658 cv
91.1821 52.0972 91.2754 53.3721 91.3105 54.2725 cv
91.334 54.2725 li
91.7441 53.688 91.9785 53.3252 92.3184 52.7754 cv
92.6699 52.2026 92.9043 51.7466 92.9043 51.3369 cv
92.9043 51.021 92.7988 50.8691 92.7871 50.7871 cv
92.7754 50.4834 93.0679 50.1792 93.4648 50.1792 cv
93.7451 50.1792 94.002 50.4248 94.0137 50.8457 cv
94.0137 51.1147 93.8032 51.4775 93.4063 52.0151 cv
92.7637 52.9043 91.5918 54.6587 91.0889 55.4189 cv
90.4585 56.3662 89.9907 57.0562 89.3823 57.8516 cv
88.0723 58.2261 li
87.9551 58.0151 li
89.207 56.8809 89.7217 56.3311 90.3418 55.501 cv
90.3535 54.6353 90.0962 52.3779 90.0142 51.9453 cv
89.9321 51.4541 89.9204 51.1616 89.792 51.1616 cv
89.6631 51.1616 89.4058 51.3369 88.9937 51.7114 cv
88.8442 51.4658 li
cp
f
99.8223 50.1792 mo
99.4351 50.1792 98.8721 50.3066 98.356 50.6094 cv
97.5244 51.1011 96.6816 52.144 96.6816 53.7144 cv
96.6816 54.5693 97.0796 55.5386 98.3325 55.5386 cv
98.9189 55.5386 99.7163 55.2012 100.221 54.7451 cv
101.005 54.0542 101.461 52.9058 101.461 51.8628 cv
101.461 50.8901 100.864 50.1792 99.8223 50.1792 cv
cp
99.4233 50.6792 mo
99.8926 50.6792 100.197 51.1011 100.197 51.9683 cv
100.221 53.5151 99.5171 54.8394 99.0713 54.9917 cv
98.9893 55.0151 98.9072 55.0386 98.79 55.0386 cv
98.2505 55.0386 97.9453 54.4644 97.9453 53.5615 cv
97.9453 51.7925 98.708 50.9019 99.0713 50.7495 cv
99.1768 50.7026 99.2944 50.6792 99.4233 50.6792 cv
cp
f
105.858 50.4614 mo
105.589 50.8257 li
104.407 50.9434 li
104.244 51.9717 104.126 52.6968 103.962 53.5264 cv
103.53 55.7944 102.968 56.9282 102.465 57.4658 cv
101.927 58.0391 101.365 58.2261 101.108 58.2261 cv
100.897 58.2261 100.605 58.1206 100.605 57.8516 cv
100.605 57.6528 100.722 57.4312 100.827 57.3374 cv
100.909 57.2559 101.038 57.1973 101.178 57.2559 cv
101.33 57.3257 101.587 57.4658 101.728 57.4658 cv
101.833 57.4658 101.927 57.4194 102.021 57.3257 cv
102.196 57.1504 102.407 56.3789 102.711 54.3213 cv
102.921 52.8721 103.05 51.96 103.202 50.9434 cv
102.278 50.9434 li
102.243 50.8257 li
102.582 50.4614 li
103.296 50.4614 li
103.459 49.4893 103.764 48.6577 104.267 48.0835 cv
104.747 47.5439 105.483 47.0864 106.232 47.0864 cv
106.677 47.0864 106.993 47.3213 106.993 47.6025 cv
106.993 47.8491 106.806 48.0483 106.7 48.1421 cv
106.583 48.248 106.396 48.2598 106.279 48.1338 cv
105.999 47.8633 105.706 47.7104 105.425 47.7104 cv
105.098 47.7104 104.84 48.2041 104.489 50.4614 cv
105.858 50.4614 li
cp
f
110.723 47.7886 mo
114.257 53.5337 li
114.28 53.5337 li
114.771 50.9478 li
115.005 49.7192 115.087 49.0757 115.099 48.7129 cv
115.111 48.3032 114.842 48.1514 114.058 48.1162 cv
114.116 47.7886 li
117.018 47.7886 li
116.959 48.1162 li
116.363 48.1396 116.035 48.3032 115.895 48.7129 cv
115.778 49.0757 115.59 49.7192 115.356 50.9478 cv
114.502 55.4761 li
113.999 55.4761 li
110.407 49.5796 li
110.384 49.5796 li
109.876 52.2368 li
109.642 53.4663 109.56 54.1099 109.548 54.4609 cv
109.537 54.8823 109.806 55.0347 110.583 55.0698 cv
110.524 55.3975 li
107.63 55.3975 li
107.688 55.0698 li
108.297 55.0464 108.612 54.8823 108.753 54.4727 cv
108.87 54.1099 109.057 53.4663 109.291 52.2368 cv
109.748 49.8257 li
110.015 48.4326 109.829 48.1631 108.835 48.1162 cv
108.894 47.7886 li
110.723 47.7886 li
cp
f
120.135 53.9141 mo
119.469 54.5229 118.858 54.7568 118.4 54.7568 cv
117.708 54.7568 117.543 54.0664 117.543 53.5161 cv
117.543 53.4575 117.555 53.3521 117.567 53.2817 cv
118.683 52.9307 120.684 52.1929 120.684 51.1157 cv
120.684 50.5889 120.275 50.1792 119.551 50.1792 cv
118.894 50.1792 118.189 50.542 117.685 50.9053 cv
116.833 51.5254 116.309 52.7549 116.309 53.832 cv
116.309 55.2002 117.101 55.5386 117.649 55.5386 cv
118.154 55.5386 119.176 55.3633 120.334 54.1948 cv
120.135 53.9141 li
cp
119.035 50.6943 mo
119.211 50.6943 119.528 50.8115 119.528 51.2446 cv
119.528 51.9004 119.023 52.4038 117.614 52.8838 cv
117.813 51.5605 118.318 51.0103 118.647 50.8232 cv
118.765 50.7529 118.906 50.6943 119.035 50.6943 cv
cp
f
121.036 51.4546 mo
121.528 50.8813 122.335 50.1792 122.792 50.1792 cv
123.119 50.1792 123.212 50.6006 123.248 51.396 cv
123.283 52.0981 123.353 53.3149 123.365 53.9702 cv
123.388 53.9702 li
124.102 52.7886 124.792 51.5601 125.482 50.3545 cv
125.915 50.3545 li
126.091 51.5718 126.266 52.894 126.395 54.146 cv
126.418 54.146 li
126.652 53.8184 126.945 53.3618 127.284 52.7651 cv
127.553 52.3086 127.869 51.6768 127.869 51.3257 cv
127.869 51.0332 127.729 50.8696 127.729 50.7876 cv
127.729 50.4717 128.021 50.1792 128.359 50.1792 cv
128.687 50.1792 128.932 50.4365 128.932 50.8462 cv
128.932 51.2207 128.733 51.4897 128.418 51.9463 cv
128.079 52.4844 126.547 54.6724 125.927 55.5386 cv
125.459 55.5386 li
125.33 54.3916 125.202 53.1982 125.026 52.0513 cv
125.002 52.0513 li
124.277 53.2334 123.517 54.4971 122.861 55.5386 cv
122.417 55.5386 li
122.358 54.5674 122.207 52.3789 122.16 51.9346 cv
122.113 51.4194 122.089 51.1621 121.972 51.1621 cv
121.832 51.1621 121.575 51.3374 121.177 51.7119 cv
121.036 51.4546 li
cp
f
135.132 47.7886 mo
135.074 48.1162 li
134.512 48.1992 li
134.255 48.2344 134.173 48.3164 134.29 48.6558 cv
134.489 49.2524 134.98 50.6338 135.285 51.5117 cv
135.811 50.7744 136.642 49.5103 137.121 48.7378 cv
137.378 48.3164 137.332 48.2227 136.969 48.1758 cv
136.489 48.1162 li
136.548 47.7886 li
139.204 47.7886 li
139.145 48.1162 li
138.408 48.1982 138.303 48.2803 137.718 49.0293 cv
137.133 49.7671 136.594 50.4692 135.752 51.6982 cv
135.577 51.9443 135.542 52.0381 135.471 52.3657 cv
135.214 53.6533 li
134.956 54.9175 135.05 54.9995 136.126 55.0698 cv
136.056 55.3975 li
132.556 55.3975 li
132.614 55.0698 li
133.62 54.9995 133.714 54.9175 133.971 53.6533 cv
134.206 52.5063 li
134.264 52.2368 134.241 52.167 134.146 51.8506 cv
133.924 51.1602 133.644 50.376 133.117 48.9595 cv
132.836 48.21 132.766 48.1982 132.114 48.1162 cv
132.172 47.7886 li
135.132 47.7886 li
cp
f
140.361 50.1792 mo
139.974 50.1792 139.411 50.3066 138.895 50.6094 cv
138.063 51.1011 137.221 52.144 137.221 53.7144 cv
137.221 54.5693 137.619 55.5386 138.872 55.5386 cv
139.458 55.5386 140.256 55.2012 140.76 54.7451 cv
141.544 54.0542 142 52.9058 142 51.8628 cv
142 50.8901 141.403 50.1792 140.361 50.1792 cv
cp
139.962 50.6792 mo
140.432 50.6792 140.737 51.1011 140.737 51.9683 cv
140.76 53.5151 140.056 54.8394 139.611 54.9917 cv
139.528 55.0151 139.446 55.0386 139.329 55.0386 cv
138.79 55.0386 138.485 54.4644 138.485 53.5615 cv
138.485 51.7925 139.247 50.9019 139.611 50.7495 cv
139.716 50.7026 139.833 50.6792 139.962 50.6792 cv
cp
f
142.806 51.3735 mo
143.485 50.73 144.292 50.1802 144.688 50.1802 cv
144.992 50.1802 145.004 50.5894 144.91 50.999 cv
144.7 51.8882 li
144.735 51.8882 li
145.296 50.8818 145.963 50.1802 146.303 50.1802 cv
146.56 50.1802 146.817 50.2969 146.935 50.4961 cv
147.028 50.6479 146.993 50.8818 146.899 51.0342 cv
146.771 51.2446 146.665 51.3384 146.548 51.4204 cv
146.431 51.502 146.314 51.5137 146.197 51.4116 cv
146.08 51.3179 145.928 51.2715 145.823 51.2715 cv
145.706 51.2715 145.53 51.3062 145.273 51.6572 cv
144.992 52.0195 144.793 52.4053 144.642 52.8828 cv
144.408 53.9941 144.256 54.8013 144.233 55.1992 cv
144.221 55.1992 li
142.97 55.5386 li
143.11 54.9067 143.251 54.2866 143.38 53.6431 cv
143.766 51.7593 li
143.859 51.2798 143.871 51.1162 143.789 51.1162 cv
143.684 51.1162 143.228 51.4204 142.958 51.666 cv
142.806 51.3735 li
cp
f
152.291 54.5313 mo
151.718 55.1987 151.191 55.5386 150.84 55.5386 cv
150.501 55.5386 150.267 55.3862 149.963 54.7656 cv
149.683 54.1802 149.403 53.3369 149.159 52.6582 cv
149.089 52.7402 149.019 52.8105 148.938 52.9155 cv
148.705 53.1851 148.658 53.3486 148.529 53.9927 cv
148.436 54.4146 148.354 54.9414 148.295 55.2573 cv
147.079 55.5386 li
147.208 54.9063 147.348 54.3208 147.465 53.7236 cv
148.541 48.3921 li
148.635 47.9248 148.623 47.8662 148.226 47.8662 cv
147.664 47.8662 li
147.664 47.5854 li
148.623 47.3828 149.695 47.0854 149.788 47.0854 cv
149.928 47.0854 149.951 47.2876 149.881 47.644 cv
148.821 52.4941 li
148.844 52.4941 li
149.299 51.979 149.87 51.3701 150.454 50.8794 cv
150.922 50.4707 151.332 50.1792 151.648 50.1792 cv
152.01 50.1792 152.279 50.3423 152.279 50.5522 cv
152.279 50.7627 151.987 51.2417 151.741 51.1943 cv
151.625 51.1714 151.519 51.1479 151.378 51.1479 cv
151.121 51.1479 150.875 51.23 150.665 51.3467 cv
150.396 51.4756 150.162 51.6631 150.01 51.8267 cv
150.104 52.1079 150.232 52.5176 150.408 52.9521 cv
150.571 53.3853 150.782 53.8418 150.981 54.2158 cv
151.168 54.5557 151.309 54.6372 151.449 54.6372 cv
151.578 54.6372 151.858 54.5439 152.116 54.2744 cv
152.291 54.5313 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.2
%%For: (Stegner, Timothy) ()
%%Title: (cntrd_stacked_full_color.eps)
%%CreationDate: 8/25/09 10:13 AM
%AI9_DataStream
%Gb"-6MfL)POXPO*T`1W0:3]._/%#`Q.\3mnK&%]#]V_M3NU>O2T+(sZlksf^=-+ETg9894(QbSq-93=(dbZ:neoYK^O[s"014]St
%X']^]hHum^>ef%Kr:PuuB/[9MB44njB)6sf]3kO%s'0rb]:Yt*CY-Uo';fn:#)fJ4]a8[if#IAMbS^q0cJDpqXrh!+h43m#n$b6B
%2g>"'FMBm3D><8gic96jF*Dd'Y_q`f@."t-nAkFTGIoM/pm](6]fs&UJ%g8PH$Zn\s6WhcHk.=I2u*:Cmbo>LFoTG'W%,:FmiQGM
%\Am&HY7A;E_cL1dXmG8gYB.#L[t;%I2j^T&gn"GK)HYZXD;jgSp]'qK<Br0^eZUc/qYVlYe^LjbiQ4tT-(n@d55Fg%]6>(c%sOo^
%(H9tG%Z(^F)i5Q<GIOIQcOH^%TB)'6_qj(rpQlCYVc?HVIm3dVKm8#g$\3TJ'JkK@4R2Y`ka1HgPQ-CA]R"]+RB8c"lrQBPCjtU(
%/E^8d!nBZQrF'nmH[5Il,F1(+Y@C8,c^\-"k@O_>PM(Q9LWj6*H,L,'TStcspd"'oMs\6nf_soieaH;[0!6:6m_:(=]t-0JIQP&d
%G^]+SRB^S*L%1b-?baA2h>Qm?iZV5,R;es<^V;ed?%)h0cZtR):P$K2eT1R@-2>CBh7MK1QBI`\pH\='<^Y3*^3kEQEr*]ANqa8;
%q!*$HrJ-k,+h""'O,[:fU4lmLe?<-@Tjt=!>fP>UXq:Jjb(W`d$n4<fj&`Fi3.,jmna>E5$^B!T1J<1_bQ)_m,W!3G]/Zu<PO*%W
%s'TWnKDPTrs!P00"We_.fA$dE^Y/V#QBPn[pTH@W8(ZqYRk*]a/>Bo5A?NYl/:Vs:NkUe9pa'R&InQo[pM[dYaf0@MjYFG$n]UFH
%X3:85dr4YlhV\>+qX%#OahdetS)*A[l,1!2c/nBir;P:uL=,=EEb+CU`V2HGX\UTfJ,O&+J%,TpH+3Y8c%#**Z2f<iJGSU)qhp6c
%dfmEK"#A]72L"WY^Kpd]X+>k0ql-71@"^lC?Uc'>0Z3Qbf0nkK9q5Tp;jN\U>V.u/rYk@J?ZPDce'#pmGB]sohd2g)<Ntu+e3r1X
%TX$-/GIs:c?fg0XYiQBsDf.0\m]S*!.`e[>]8)<NbMDJ+mN6UR:R@@P\8337Z6Al(qYT+1c)j=<5YeN/=9!;eGPbLicqSF3Y0XG-
%TKH:2hH\lgKsQ+(mHO!Jd=(f`(fS.t"rgp@?D$)V&714sooo21la'V<&ZcZb^<)70X1lnDHUK5"\(Y)fn(GW=^W>[ugGk[=++:Wp
%LXj.e$OuDKmod?Ye`OOAF8*G\j5]0pj29pEn`KW)GW[%-dr@J[a8X^3gLG<[*uuFD*??2<O#BK58)r!9P`Fa#3:]T-a<$bErp]^P
%kj\(\Hal'u3#iHamP#[$_f4fMh4ZtgL]-pkHaGrkDRZ,&_04TDgU)spYk;50[9L!)2ohD_c/E9Hfk_-Vj(?r>:#(D]hme[%QqcHY
%*$6.@*$/o,2?sHlj2#\r%cTc6n-ABs*ghS/4<BR'_f7bU`e/7NLG=d.%&4p#BLalP_sq\&*"L_31E6h`0Q]Z#iXc;Y\A8YekgON4
%8r%,M2X)?DBh0\l'Tu6Efjmu&O5j)"N8(k!#B>\i9JDi'+'l8$`4cW"i@#\#D:jMo0SUaH&46^e\6spq]g)3\rm5T^`ZP!'%mKgQ
%KD45Jl](AhYrcu]DX04K^l<6q>]S3qkOVMe?+-EnYs#CJG&'&1^lETBai6HAHg@c@`qJQI*191#2&gUE`bZV@'2:1;3+Iq&IFmYB
%luQP+Rm%LecY`)[T+UC1fmU<[]Dp^[X'^:]\][)9jolSB4[S^1rf)MGmQ3dSj_K.fh_p7DNJ/;n@F.eSrquDB4^Zk5Qbf9JDsqSH
%J2-j)\3.]mI:gVqSqnX!81+1Sr)e=T5<V/tKZ?VQH4KJuo!@R9AN*09"/IV6"$[*aaA:`LC6Ll?O5[#*>RsWuQXfA$H4Kc(ij7V,
%J=dFGJY.Tkj<o&[3s0Z*a)7_DrX:tR4h7o`3Pss@T.N5GIL`s5#m\N\,B<oMM4]T"i(&SpXlJ+DrUogTa1t'_a@AbA9D!&rg#-qe
%ccFF_:Z<b]'DV*gF<-KA=sk%/;nhIn(]D;Kl$mi0jn3[SH+&oL1OBVmBgng]_sBsY-Vb]uUom6fQ)Rfml=4JQoIm\c1OX[Rrq(7g
%Gn)4JG5?;3W:`0<4QGcG-;W&c=6*OL@Ij38j(=@.^[3@o5j8CIbH,)bW6/q_[OG-<o>WuNs&dk@p@8-;ZbAp(Is'BJBp>unBHYe:
%WY$h:e3n]K'^;b0or)u:F?Hf1ZUl;ar<^4N*t!K)ho6-d=u]e5J0[KMLBL1:9LOpEP"2FuTr,`mjA1Lg)X%5e1(Ma2-t=N^Qnj-5
%Ge39]Ga6*G#%&@-$U]c@;/PkoA%IWg1?,2A%0/*f`&o/P@D`UY&r6C@SUjg3iG0U6mBC_BYfIoS1MGL85!qfDf^Su(HGGQs?p>]@
%^DZAckadO#0d?.s88KER6&Kua@-Wha5c?9_jV[5iZ/*d\KT/(/`]t2t&S6k;!a[=^s-Uc5PJuK7MoB\&\^9F*E>e5,jX+R7)7(<"
%Z90.>\N8%6Bl^\ngnKnl/nOhtZQ*lR=EKqNUuT\.-?lE3@o^T[<pK862<I2@P6\G34K'95Q8Z:O>or?!*q[l7j:Ul(O+c7M+s%36
%RFP$o!LH="O@RQ[8'`oNU7496*p->m\B?X8139rfgkIrXVEFd:Go5E!iV5);bK!aF9P,30a6Si-m?GZ[0ot@a4J!YWEW%j)NQKu:
%nou8I\=^?K!0#SBfOTWm0H15:=di#r1RAQ*O:?te3+OQ!+BoN6CfMGq*bRJhRJgC!3't&9;RSj1Cl)u67<4bIPN*,U&3)J8/=Bo!
%I*&M5VG+-RRl*^Va2/13d0N_k<'ATC!1&$Kr$q8+fK1DD,3:B5/DO7,X%6<#/qQb@$pn4<[gI"'Z;k"(9T+k<d`GD?Yuk%h6r>Lu
%fLfP:^/jMqg.9l-,&&64$(h7/H:6$_h?NE),)68]B.erE#u),>aRGVZ4-\?IS.E9)OT.TJ7[*t9"-A0f8d!-:4NAib4^/++V8JEW
%dm6!VrXoPGLs(Su"%'>n,D?_Rm)8sR0n>/_N$rQUbmgC>%rq>o:Z?$%"0LAA:Aj9F]][Oklb):<UWdfn^Y(Moo7!$OgUPJM?1*Tj
%XSq7bi%.+T.P";gRs<'\$Z:!#j(i_M2;[l,S!`A3mdZH]][o%/-<B]#>FbLX1rZ(u5%_0c$(24Sgr!q<(s0:fDI>=^IgMm=fie/4
%alhbY^Q_NBXg:BDS7(AIrRFTV)ZI=6e^qnO;[`VeRASlsm<7*RXu;X8@Cf%Fl"SLa7)K("M[c*k?sjtKOcdlsGd-dq>:`qt%]p5F
%3s++W@!s<-5dCjI6!4EtBSpWQ*!(]Q&<2ihQGA,X6#:5^6ucn;J>!V&=93IhTuiIWQ4=Kg5hfk&p'XtVLM4Y;3sHa:2WAV42N:)9
%`mYKaQ$TlWn/9$_l(F#deeZH_DUIH(7&q]i4n'R)PMB9IJK3B0?jR"DL;4j&BG4sXW'c.WTQ.>)!sqYs6St"4T`bl5#Do3EUWK4g
%jD!i%it`J.$&tm"7WgtC+P.46&^WSUZB!l3(`r6daAP;K$S;H;[;[B\K.EYCQ-HIl3YJPJ,T,6CL_u@VD)&<54PO5"/MFB>f\0f4
%aqb(P9WO:MW\(3?ULH_rAZnT\S&SpCZdE+'FtqdkF;Ntce$8j((;/;h@`=6G0:"`Snnd9hD,ZB31hSkXl.N'iG.h#O@bZf`0D<(]
%pgW9iQ!`p+Z1Q#d(MdCEIBiRdk%Ca0f_o:TLQ7@D1&o2n3't/4`<Qr-5l:WP"N2)fDnpM^&;Wt%:'%s1S)]jW`u!K'/WM[*m5g;U
%AMd<N,YOb;-s]?'?ttJ))>ljV[BK!nYM\_2?1EI=Vi.%fh*W7AQJoAn='#6Fd[`o#7iE,-53l>kU/:TEW/([Zasce]WmPr5"l:E3
%>NC$Ra8dF'8u9uYN@m%Gcr`h+m!oTU,VZ%4NlMr8>s.D6Th&Z*=]VK7$#L`mk`81h*,onNb>QmLLdtr^`.pfMZDM?+'H<:V:GU[<
%QlrC?i`,cO_]bD%G-VqhHt^/^%EYA)RHcW;PBfeG5$<Ou('1[%Pi>&pj=O!q"ss*GV0YPO*`0E]8pE`Q%k-Z`V;7i`>Eo!^F<LKp
%D;ppQS]N2f&d@r4nSaU""mjj`=AVKi;`n3&@dAhH`e9ALI;i;]W?48Wi6[!!"3gj`YX]1c\a&BTa+lcDJ3&9*Ju47e+JFPsRNQY7
%"U4OrAYd[_"cjE>RrMI<(ja9%K>pr.[:6%:[a9UE3JL:3AQuU`Nd4r&lnHbl99H?[Of+SbkW7^[-Cei9f[B>,@hnlu9e.s!NnC![
%4T?[]<9.2\JZYhEa-0AUA2LR5A9gp">6Z`Jh9/WmV]#?'phsMjdj:Su5Ma@mrS&$"Vb]5VrOD%Z<a]&rWKWGt.i&(i<[prD+0cg<
%G2Pq)Z:sHmS[]8eG+-i#H(KEU*KJ?#F\&ib1ttLK@-F!hChJn[Lh$@K/1NE%W:YZ?&fCiZrPs_;6D2FrSsQ5j6^l5_GrD)q+@DH2
%9sP#O@-bn8,4#u0T'-\tl=og]k>l<NP9qPdSWkJkE4u@mh[TmK6Q@Yc3+-QAd%H."7-ISFoS5%Z:#,<fUo]KC%P9B',c%s[ZGXd^
%-?GJ):,33FqEu>jT?=&r=PTQX5<Sb[%s^4-DgD=<4T9FYd.foQ_=[!ST]XpTd$(T#mWeU0cf*>KVd>BIn6,\TE+Vc=YhAUN?Zh=;
%&#D3@:Nh3hoOgZ)1U=1[Y%hQnnKUgX7jj!c4Q3,T+6!aE]"%b-e()5#/h_/B_S5Ig42Ztam0ir7#<&0\l[G:2NU45j=O(D"3fcF5
%+Y:S%/3P(cPC/2>[Em]_`bt,"B(d4gSoOH4mF.=<"T?9l'5!;t4ZMKKD+f7kR=)6&BaF[]K"4DQBu/)#4H0?q'*n6TB/>SbHgI0?
%OtAfPhCu:tB,Z.UHb-&PZou_t:i.@tm;Xk+Y-9>Rh^9aHM8PP6ati#GSS4aC4dffCq'DG5P'J@A;j-r%dhQ(`m(dJCrl/F?OhKr2
%gU:YLZ"\F'?8q]9@n0Q>)fM>HDbJ(gqr!6GRN8V$QIluiDqpN#736`p::[mrig9tZUF_g.m%'&a/fqV!ki/FO5J:Ps?!R'fXGa\s
%*VSd(f)WYP[BncInXB1qYAoKlY2+<h^hX`m47V[W6SS42j2`$<^5XHPcW%pul"Hf2&k>o2L^]>k3:_4:dahNpKd]j_\.""u":%@*
%$5toEBWK.j4<iA7*sqf^38A.&=kg5sE7Dd8nbd'+X&FYH*[[cej`IGk&!lPcG.a%sW4C%s5O`Yg;#,^6Fp@^9Jfj%_G-*i.]tp\I
%kA`qB(+/0ehVqTpf6U*%PNbI,g0C+q6c6,=:mS25,e_b`s7AS]hYXq>bMB(sYBT/=d"-VS!3PBhs"^_Phf)at>CVFi3@`@[MJ_QW
%KS)ZQ=;C-EnIE8`5n=V'&68LX9[OA5;*U@;L]\A&+YaT(FGKOMQf++W=$uiM:59H;,uIjY#05[9SVj+s.[!,m.:b_P/3t!U.^VOZ
%/%.=VU>n4kUDduHQ4J9VG9O4-2?#pO0YE:]aA8_r$0KP5P/lFhfb<g7j3hY6\$^j0oCn.3a%11DQjA2#"F#o`nAe(=pQu59N!+?c
%M=APVE;,_*5AO[o1&%3[Vp%=UYl07R]1"`Ib<mKjbqo1][%o6DbZo1c&nG3LlBFhRTpc;>,I;O;FBc4ecKuJ_B@!(GRa5V01.a@Z
%"u2a(RErc%c,;G[0cc%Ia'sU;3#$d%+#BOORErtXOG)kE"505WO3q*rc6oqSAU^MG78VO"#AnSJ`US-A@:F>%.V>]`5g7e%((AOB
%1'F#:h8K#WY=8(>o5gN)$HAgDZ[qMXin5\94cQm%Fk#[J"3j<`ff9H127"qX@WHpGH?&lfbtRq52^uKYQN-mlb<<b+dF$UN(%K>j
%,.EcWh2bnaD3\,qj-N8?("N9Xjj@*`F[(>#Zs=^>If/bM]8s!sgrMA7K]i:3A75g0=V/C?B(Zt4G-:F(eeIg??*bdLa$,p9]4]@i
%5Q8lM5X5+XKNGhq(CQAD^Z<ASQ`-@fli,c_N<jYt^l,XGd2'^2<1]=W/T!S:_/UurJdlIM64;pMGJ-_n9o@2ML=nNB``Kf2hjahG
%_6f.t6+/dN8qYg_>M(1J69iD<Hi:2'?*6)`GM.VL^RLc*04OW!B'S`hQQc098<tFp"&Hg-e)Tpq;1Fcp[guPNG\H.&+(1@TolZ"\
%?=o2*!2L:JH0Neb2MHE20j\tZSn40'<d8&,ei,2$ch&l#ild_A*)lOI$88LM^L&OMQf7#EZ?Tf3(X(fL3-hb[?<H1*Z?R6^?7_!N
%<d:l#?A=YNeo:2s$88LM@Tg>P-SLe)$S/kl(,*SIMe2Fq$@b.\im5r2@V[.Q^(8O`C[Bc9BfU>8(*r1@f>-5I*J)X'R_ejnf[QS/
%Kc*38AF/\=64:n@g5ga_2Fe"&qs[t:i5bfkLH.Xf^E<K0jREiYa!GcG8*I^T+[&0l1acs_K`2A$LI^Pm/<P!uK`6lI7\Kc&Id7de
%\mH3d:AaB+.6@H:oa`Q6!P:fnmJ2iZZ1XWC?ERWJD>s;ge7G2R[!K3cS*RV2I8R=pO6u.7eEfupp?qH6?'"5nZ'4FUh:nuSrp"pJ
%HJ>[\<*V=$GA(gE7rMV_gR7_HkIM7/Dj0<(e/eNe[ohsC'/dr*:[dYQ]=uIKn?/:@?I)-nVkiXbdd)2Cprp1b$D6(<d?h*p?p98j
%"Q%,/[!d,snY9WL%T6GkRJ'"5R2>2P`VM$<n@gO3]<cX004R4j$QZpqX7tjGe_AoU]D$FB,Pt^nIGR-I!2t;d^N]fZ=&,AplMUV:
%^Mh`iVVB8qqj:bU)rU/9DLiD^XADZWP8!$ZcV-=4R6Zdqdg+!S4A/P4O`NWd@CglbaPeQsM9l4pI."2sfo&?1OmC.=EfSK7mJ58g
%_r_fHOUpW7HmC?c``it:45t=*2dJF:DW!m*lY1B!ftl,X7soYf4]"lq.HgM=2WO[pk<G"%%^li(]Jf8a/!2JfF*tB!cdO%-I$*-;
%Y>6*^=sS9=<LVt6d<`M@:!T0]nGQu%hg6--e)h'GD0EiF8T*HcaEluRid8j2T4qu9ZR:,%_uN<?VD:uUB8Oks:3SBLQ`SDT4+6%;
%-eG)?\rtfGpi`l35Nb*+bM`+Mpe<W;g`\'^'g$OsS6%Yf"ZcUPDfJ?rVouk7][-t8#G&F`DGq%DQ*\EIr0/FOlKP?i^U`-`/2oNa
%N\@)g"2\PnP.G%=i+oRXQFV=jgd[j)Mhd[BI-FnHG`G:gHMs@2-eZW[[rV8G*/c<PjsK:P\Wq'jF(E:23F0=kDGq&;II^4DDK_aY
%F./T0__0/nEa(ZGX_Z4%'*QecDK;-@e&qk9E%Y;6$O%Wd<3YP%ZL3joJnH_QPgt@Jl?48Z@.<4`A_h1Ei56??RT%A?B.Y&bHf9L8
%?9R@b4eK"$TBTP*b)LHeVq<t!I/1UU>^A*1Ek9@q\OV%4_7nB=kNCr%/=fP(3`BP/n9"j+gt^.\CSs0U\"95(D"-XeFR(ru;i?E,
%e*ZpV=ZK<&g$%,YS[%imh:f-"Y(Yo;?k9k4L/6lg?<t+uF_:L>iRJ$S4*A4)-H6RsJiYVpeQdd!JQTX<D;bQ)m]d_`p0>B+kiHU9
%^>%8hj_Gr[oiehDpY,-'Mq8`I?0fYHCOGI%7pijI-Xh5dSSK<djk?:6f=L+a[?i25s,M7GFo+[6G4=JR1B!aNr!ACXqM==4/F_%k
%a$0@'.Bp?'l]?e3>R4Td#Y<1oZdVM$A\Fbn%8;AG7DDb;"=J<OA^7@uA6FpjB6E-O8jJEDXOdWV$\N_=6-Z=XCP1rl_=d*O%;KT@
%mZM58$r1QI%``sFFei7`\_2=TjM'q);7k23R,q#caT[j'D!L8Po.)(`oB8gm4+3$_3\kd623N+)Y.[@]a[MA?IQND`7'$?9:AF^:
%1]FtHf'I`aKY!dF\(@Z>]:V^-MfPH9GQ,[Ir]6n55;)MBJ)FE&EKOW*"2DF.Mu;9NpsjdtjOaCHYO:Ep^\.n]FWVFq[6O/];aGq`
%e$0#TIR1m57htgB[UGbVl=#s#.&Y8%LSSAs6Ci:kI9F;6/F(T;Ko^=!pqlE5Y%HJ`^#$$AA%C^L%[D24o4+!F)=Yn;2qP8$0!69K
%Y2=[$R@64h+1a+DiJXHaY>-/\G'DPFX?JYS]=[ls=kiVoqhNKNY(,9P+;i_h`c[TQ;?"h]^/p)VorET@!FPjes87odr6*6dI_YaN
%^\=dMK`CAi4SaJ\s%6uQq/'#M"#K^aptoj<l>%YE$@M<ag>VEH^Vb0n%!gZT`4R7;7.0[t0$jC$ZMchj:T7e1EpFkZWt7W%=p\W@
%.B+?.Oq\8I8OCuk!kJM2:H68,Bs]C92fUtt)ckjs1rcYW%ms'$f-+5+qLNG[@s:>3Q$\k0lLE03^Gt-8Y/C"fEW0n,Dgi#b0tkS[
%<$^VC'STmen+qa`*TinSbW7]-qY%IahV;D,I<V;TbWf-?*V'0OnUE`_Zs:`gs2NIe[o.$j1]1_3D^+UN86jL[6fA!G^AA4/Ip9M0
%XFA'0r'eaph0)d*_cQ(K8.b/L>M:q<^RqGM+nq^+_XBOB+#4W@2$q#V8M\1B8a'G-EIQa<W@$SJS]#+peOfOA-S]+#0@hEHhB]?D
%4e78_Rmq&W<!mr:"@P^J>PnZ#ZW.3[9KEd!F!<%>W1XgOq]lb1;CA458Kqi#:.4Q77.`KL&s?7^kO*AY*F$`f.KXRh(3Pn"!0^B8
%X%Gg28Ld&-V'<]#'dIMFAkWPY?kY=^?6pcq-#.F$M$VHT@SCP]!jme$d@,jkD'Hh1Z<L%Hi(Q'U]1PKl:=Z)A;A!<"MGR<P#V\h=
%\>iL2R&"2%/bVWP5%'RYjAdC9,#$MGXqEH"22N1!RYY+F8]6G97*IqkU<NPg_.)>&"c2/+PVS.SBc*Ml^hD;p@=V+:Bbm-o%+&_P
%@nf;)+N7oM0mA.;3B,9^.Fou>5h^=3BMBk92Otspdg;gE`u*E=%%pR`<fd`g7PLT3)Gu\Q@$6I'WQ>u28Of)s<:nIm-CD&E;5g`"
%:Jb!S"Oa/WC8u@WC""fZ.\/iYFG."n`W4K/)WT&Q?*s`E:9+`==eudLDppGd.\1O+RuVJhl%JBWFG."n`f(uXFiQK)iAH9seBJ!l
%P%K*9'+1[4aB7b]!brB(g,bpXg4Y-h:<*o<G1fo$R?%@^(4E>#]DZnC<\47n&&I<RB6TR>m=(jh^nmaLh3Qj3QCJ)b@kf7_L]tu@
%_leZ_afih3ZRO@fhbV``W,8M)ngqU&hckerP]=)9EV[<OPCH@Db*..IDI$&SOoK:PZ2i?b:<T[B4->Jk/cT-?5n[I/ah%[SH/GVC
%Z?%JsPr3aSrnM7cXhq`N.I\t'..HK57TJW$:64UFQ@)?0kOaSMmn2WlG/,;W:>>Jc6:V["L4YJpHeJ^C(H>/_R*Jo(G7!sG#7KCO
%I]b6GN)unF3d$(!,I=8`CT8Oi)FH6"koYX(Xidiq,>DP'*$7/rQ8OsR]kRnAFSV_2Fn&,KhKGl$bkDs,Q\IB!erjE5TI!UKW)KS1
%2eCnnS[1hQBH2,\8m+dq\AY>p[PYKE-D(X_P_MhU/h&C:ZUU(aWaT5[jF,p)TkXI->8n<]Usg.ViU&s8bpQ3nQ5&2=!ahmQT9<>T
%*_XE6ddX_AaXdlh9+$'H:o8ZFD]kM.UALcaB1i?K!aV/H#5(+5Uq=0d]6ee4!2E;<!orI4Z^[Hoap>`qpro`7(t26FFX=4j*9+!A
%<rc=YIJ[2"4gTJ/dhcAh/GjV5ZA0mMS2g'B%qGc4,$+/F>as8?0Yr'EP9:;p7BB&n<ZY2/#W%3;X7GTCS7E_\(mSih\Na#NMY18?
%PV[WH)=-p,R,Sf]0%AT!c#:0/V6#\^:#ho)lpETH60!pSM/k\:CJ`05cT-ug</NQ"W\1'nf=&6d?4*u/V4k7J_NJ!gUAU(UF)I#$
%NMS02%P(:$S"V2#\I1k/rS'j9pr@OJI[/;R^:I5l(MEXq4+je34-+PeKls\2`@\44'Q^;<*9!3f#M3Ih&fJJ99<DTfOb<r"G'_\h
%O?L85"$?.+$4DSmY/q7U-+bquPh6r!Qt@=c#1Q57h">Q<\L;+#Q"b)V.l4o7nekB'K$?%OCFi"4E0&&0br\(hAmta0)(Z6*+Y+Zk
%ckcY=^[8Af$j($(:\SGC>F]H.Kk5_s@59"TR]!)l>PjM9BoG?7=)tOR0G<e@G'%$8@r4r'H[!70L.&u&r=>eV$lP^=(GZ?U.(`Sr
%M]e=f/45IuGt2in)MU2l>>V/\K7[hcWVTk&-;(8]U/7:*;'oema:r60fZ18a@u%@b;L(WSCJfe7d:iYoMITRj5^nZcV@!S_%1+4:
%-VJu_*g%iaXHHGL:o.nGBR,S-'&i^UnQAhr<>-7d;Rau8ats8NMl9F_-3K$rbH`A%7AFaNlCk4J,FWi)bFl,?VTjW^l\DJ$W'!+:
%35N&%K;okp&nL[6P@Qku17Ka85e4V*5d[mf-08[NOg4VDJdc@96/(=Cj^O]-.Q)ZDeH<UrCe&g,CZ[IX.btf(R^P6768RYA.(o*N
%=>g=Z<"r.O`&aJolD#[8WRJulhCF++aT,J>3fhhe[c9K1A@[Poei+O`4ArsE,6K?%_\@+KPFsW85\gB#b?MGB&mg]ZQ1r-C5g.sS
%V=-l?Bk[Bf-oM*Mh(UVt?oi\sQ.,gh?)n?hknU7d;#unt)UWA+&s-X?O:'(2(%L'rIdh$$Ud:pL0#>X[`^`TZnG8['jdE;\bmi`t
%LX@er2`J<!QNR-lDD][5kJ>16b`+;3QXi,.OJ%)X0hO2<'O^9!W`DC%U+?hO<q!"4XW%3ZF]-V[4`up'kqNll@\Y+Kh_^&rp>f<`
%!\;^+]hL!,2-*YG8om[:Um3bZK@[JW1%tqZ5qKssb_CN[)J[qjI:N\m5_6_&=Plr5FA^RiTWFh7@jZ'>CcDR"*]#a;BJ_80##SB:
%UtMke[8Gp[J1B)[btSDbgf::6Y36m[Cs_KN`(O-p'ElK7KK#J-[k^@%OUHQhQjOF/>`<J1K%>CjO\H_Z"u$(teOh0T5g/4U29s4h
%_]6EmeeoU%9q3cbJPFZW!eV*Jai74HLp6k?(1YZ^P:%S$</X%37`\?<eW:dhY*'e1.b?0*fK(s7_7/qJf>]Fg2D)'/golR:a5Z7l
%95IlGZf$]8f#KIc[EljAG/#BTIS*8qISSMKq`1'&pt8']AP?q4m-\O3S^$WiZ;0cT>b3^dfs&cD>0At)d\\l>c%*=4RWFbJCdo@D
%Wt%#i)BUZ>=8n^mf;9sD#@_;7Z&;%fjJ\b76A00)_cSlt;P5(QPuTs=\P!ANA4I,%8)Ncm<"6Q3/]<mnZq7o&n_@9/_`*o0(Y:_S
%ICm#'hSH=f1Q[:-fp#]/s*eM*QB$`Q;J>'i/\-H">O6r,dEJ=f.??T>9K=XRIUO<&T`B%>;`=J]>_6L1WHV<GAsG(Z1D#5Y;;jRd
%?BA.rYr^Rm!Zl<>*:502=9&X>fSP2o>Wd[RVE)`7#b*h5W/?@AR&]+4VT]`egq8-(1(/Y`=U6hJ:]/gl/Ak:eMJJ/c8mDF3_W[?,
%\4:/C$AF!Z31^bN`L$]g;(sPmk9I6eKiQ;8n3h)k^Au\NC\GR3kET9<ZN<28+F58NWI7(P(u"8A@("@Bj9L^?SO/S+Ljq52&Jnm%
%<ul/@qj#7mQ%D:4KooGKT[V-u891:QPh,Q1?\ocg>"IFY;re"9F.OqIp;($ZEI)bKI1Dq[jX51S*gMJ9'/lUE+"b4^Bj;"=gm6a2
%p'*J6181+X(t-<b&:1cs&G#2Q.-J^R/0SMa;sf<S.j5Z+kTZ;DQhA09'WSrD8ik!HX'i2(#M!A.#E2Yg,_.Wo3[KB4VSGdC_IM7U
%$),<M@=Dn<;EEPH3R(c!61O,[.s`EuV=1SZRfR/DCoUY'laMaNVBT2AK:Qn.;d<&"km(t)G"2:t2)SL$3e'_,lK=\^#Lh8'P%+U2
%=ME+M*Lh67p1.+!V*qa4I:>C0(,r(IUqKs/`_qqh9\2BYD*g9haTBSMEcX!AaeZ.5?V,>s,O@`4e!-g\Y)@#8S*$I%Y]tPam3bn)
%eIthemE<3d>t`V[U_OYklg:4V=*ns@l(/'dYb4)o3j<RVDtR>hL8@)+C8HdTqN*Grs6T`2qX+Q2<6;=+\FA&UPAMf=0*h5K,Ea]D
%PNQB\@9p*l8?B%&g,K-kK>U7FYV"o#YqhoL>:mh2qNMuup,f*lZP+=a%@8)ZQiVc\GbVmlM<2gB=0S3*$O"VtDQ.W=n"_;PFp.0F
%3[pmR5jn"N^!>,,"Ftj8.H0X&+!rt4bqr7$,m7Uc--&UUY"G9cL"JAUWE(1@">J1#PWUY;BVVGc+4^WI\QX<&fHICs[?]2hH>kkO
%&j8uhW*F1F'>,Y;ij=CqWPZM'JC1%E43)YR)e.=X;RJ>E2Se+5GHpNi""R$^0PE@R87a$kW7VBd=Rh3p&EY4&X0$,g(<k_4.99,a
%KpCp-_M[oT/E0C*U&^-Nc-t6"l*q%rOJGHH$G4=C$CIMdUUg8`0VNYadL^"=Q)h$&JlbSp:9$iBk@$i\[[WJZo&hkc<g_"m1_XVL
%/RpcJL\#pd*(fXtC<01.($c&Fh6@LpO@d>(VY.>PF7k@?Qn&q(qYQMn<+.V8Ft[Mtbo*^_6n_Ze\8Qp_2>c`MW&`>WEpr<Z1EfbM
%SXuSm\mEp)<g;`aT'DYs1fBD:]p;jhPS+P0mrO>N'UlKPB0Xpe.7SlMcI;'7Fd2OddpFmG=7Mt>lMH@\ZC[T#^Y<%[):mpb]koiA
%Pm;Z.l/1pLH.u48E`?7`"++i75mV/\A.`W?DO><t3+:m"C^(j0U[c(6:,L1-9Ac!W50CJ?;gI9/(c^6q!&65@B3</eX.Nk-E1"!R
%r.(f`g#Se-%ncrb*DQg[L@,r?@9?XPi,P79#k_C5%7CYWT4"?M2gd.KH7'iR3J+;p8tIS^0o`"tIVgPL(a'$:jV"(P]OBo4g9tkm
%@J2I_P>'(VY;dQg?m_$th6!Vk50eO.KbZe(U(gD672TYud3UoEj+(?'>j%-Q/lZ4&\h<j4)lGo'-t>K.j`ahu1?=R'&];O!VA!HO
%15DB7b_Y'rI!3,0QW!:p.s*]Q$kD,1Qq_?T,`bBQ'I`'W-8ulS`+Bq+IT=MO31a/C"lB\'J%/s:4eoGu[)\U\j.:4t,@bUmPLb.-
%S+01UIY0g)P9iAX4^S0KoU$>9<F7*,9@qS,Qj9F?k;&IM@h$FG"?<W[ChDTak$*Z(&DKM!0>UVj74,A,hIKCm!YEd&Mm.K:*au1j
%USt=#j)@I8lSSsR*8qlrbYH:C!VQp,Vr%%_eIc5SK$^TLg=H'@Vu7k24"NI+=^X[a@0=E1a@^&taG\sd(hLcJiTV6l"d0`Mf,0)3
%!mI]1bph9*BZ4G28W.Dj6HCOmOZEdHCtc<t1rpnc0!<W/P-4\21n"cUAIk:K,!l>qAh5d[70"iR)J#XL%#"ldXVO?WXCCR]"JBoW
%$<WCS:ae"_]Qke'7'ITY[!t72TenuD%`,VkPIC?*!+KrLBj)#:WA[;r0gI"b!H*7MoE7(:DS/F/psT#o+$RUgbm/[V+e2%[T3tta
%+2e@R88^UZjTZ,4`TG'H/\sL(I$gf>OHS=iLTiUe(*Wge/UOSn-)D@Y-A"d>:dN$mO?puS+Ti*=+TkAhU-k%G7>E&nKb,dA63r\V
%TnJ_b64+J3TnUS)Ukp1pDKi#9n*WDeH[6!"e*&`t(a5n'pYml=KR`?O)APS>[k:]Kp92^0/hU:sBhPti=2GWYd^8Nf<flQQf7%+=
%dt$u=o.4)M5dZVYgB%3/%e'PI?@V5gCt:iW3_DiL2Ig!O37^-HT8Ogk-6%K^3uJ)?26KH1DW$m".,iPc\UE.8^^(QHB^fZQLjJ78
%0T&4\"7A+&#kF(4I8$'d+\3>880FEK.tX#+M#i4\4<,N-a"UuGr"T:&dMaHW+f]NM9RD`g5otd`C:p?"!=dm,cH(g03Dh^R#VO4W
%0ne):>V$^8&>D4G3+Xrc9K>S4Z8Dpt$Aa@f`#`fm5](0I:)AQqj,$6EemY/<`gC;5kWWC!`R&[6&k*`CCo_VjHAoSr4CF[m&"dPF
%*!=PB8e!Wo8>G*:_W^k/^3^dt!mF^.In!Zr0S*FF1W`Hd%cEJ$(*S#UbC/fKjN%rQ8r%r2i_H0)@Iu`'KR&PjUh:<J=ua<L#$Eph
%$+*k]gDqL]*LZ7J_p-smdd$f3WcQB&'gn`Z*,RQDRt1J#,YA=bO?2CjR@oC>lU4un*\r]tdWcTS[3845-lE6nO(I8h;n]!GBilb'
%NHcEH6bn9oFBG@r`+1o,KqR0i/.&a>5R=hHduebhW'3`Z]/qPl6m%M7YW$Uug$[($B$rsr?&p3G0EX-id+T>hEcb=cHqVBr3IAoM
%"dHuV'oT[XI#hc'Q$1QJGd%JHX`n6M_\lGsM@&I)@W"M]lO><E0[g52kV+61L8YCeO['fTL4[-cWWIoX0PRi>HI)j+:,^9XQMY,:
%UiNAS4!?!\2*S$mf]-#B!N%]9=eOXlOcL\;o%2`N2.KMc$k+\NA:]UV!=43CRQ?i'^lUX6;9M=#Q5YPK7F>&^['i-#apg=(@mL;H
%>Vl>Q:.ap$"1UQ#LXQ6,3Hl2.YmZ:")@CZj`qJ%$0X=j:]4,bZk-7'[Fbt.,'i&YS5oFd4&d*,pIUP0F^s,9XQk?G=6V[n,)&LCu
%K-;=87be=Qr!65slU8Qm)/1_0lG/@m7<Zn^!a[),e6D?K$@ZCu!F7`oi,+"QonWihZ_3^J(C$#?/b,09RTL70_p8+7-8KZVL/V#[
%QoK\\9g[rlH9#HT)RL7,+V<4V(r_&8j&+St9*;/eRBVYV/Ij"MADrIQ!L4-g9GWJ]KCEj:1OFG6j;q9;Nt>t^TF`i6\2T3MT!4R%
%Mno`I_#<acHKmkVK_0MT$r1a%qBD%?59n+1SRVm52?SjCZkS@ImDk)BHqm'_n'HM=(26KTV2V4#Zu[E=r!(&S5_EC"\HkD*1!KK,
%Rp)[c+\Eck\1ojeg7LEf!<<JaA&Q+-!tgJL!OXihkeXX6`t:F9Aq&*$1ucB&!*s&A8?k.YJ<Fpq&i/l?\35f*T#R>F-C@4kC`'4)
%/Yc[i:i%4ePW!c,j'WE(6Sq1hLGEP@L_4_PiU$F)EL_,6SigL'`ol!:aPt$U_N>G3)qakGF^b9i%=$%RQtZ;]<>M1s(*PFJ1cki=
%B"Q#D*:!)6W'8jlOuP>c.<)f?-B!iW(u50r*<t:s&np6jXW7o\64JJgS?0&Y#0pZ],>uQPC8-LY>pSq?60&Sr%/C=GN=O\\HVt3T
%9/1Jh[#?6AWLYB:JcL_Q8>GMsOBR5BBI$Zr$0D90!27E>UkCnMg'207JIe\p@5#EHhhU"_T!mWUk;1,7:*`K:[[qH],kNq=$MTB`
%4O]95R8Q2B$tC[SC=[Y2Zk4nHZ7^dZ&XaQu$j[E,A^c1ATHFmYqa*?%<bVVUGoSHP+>FQ=n'I<@^/F2]=J@OK3ME5$4R%LZ`S$G@
%;PP>!HO\ZEidlR:%)U:?(i'2m5r0l+Z8&SC&<dNK!+sE9cZ.kZlS_i.EU<G1&._9Z,#02k'da>4aIZ+c9QT\F!A.E1#!G6;$9dbn
%')<?7^fEe!RidW5$9SbulkOc8_UEB'oLmcelkdGYLtl`g$j)qu)RX&d4:[P@)8I:*1U(d/^e_>k3IlN4I43sg8=b;!!UO`DeJn`a
%)W5R/E=`2Qq*a`aOMQh]%5'uO\GjK3!aolXW13k=PLE8n_!S2h,=&#SWQ@e`eO(CG=9l[f,s%M0qukXmR?I=O!QI7&rIb1*>t4>t
%?ur/%i[9B[#%lsDA:QO'gk>T[*)CGRDUp@@e&Grq'^R0bSj\\\"l(b9SK"fG@.-W!7j5a>^A&!hi1ch6'-c+PlmG&-B>dSr\"RdU
%,4n;:7j1s)U1$P8!7qY5;ZJpg`$.tXYQBT549aBKA!6O",+'!D4GASI:Z<h=*i;,9:Eb<)jMb'=V#cdbV\!906qM5$'9&q8V#a5'
%I2$#h8RK+An.i0C7WB1F/42C:()410=b(\i,J+<abb@ti"ag^3>mOj-)K?R$2g6@_>mMK37JR=Z`IKJk?\$VI#&tI;'Dhdr/d*"$
%UA,*U7efua$76erm*qB@$h>-4Jh#D]J:/bIU6Wb!a!^LK4GK5MTD`>RgOWcQ:`]`*!=FB@#1t3<*di/,F6ATn$A6B\!<s`$ct19O
%0^2@c6[k/S.WQC>9J[.E1.5:\-^R,-5V<-=1(TMj&A_MRlnZM410@h:(t"3`QN=NUB3@J96)CCO9EH%TctA.E%iHL^!KMmBU[f:i
%`Q;bC]jm(-#1sQj*!Y%W#6[AS+dWIe**N%*_NU8G0gs_d9HHR`BaZ1ONr_0=Z@3s`J[pqKL<OcPB5sVEV%Um_#S?8[MUN+@FQhCl
%^b'G13t6/5!dPjF1uu)qW3Oge6E-IZ+::idK$s_p"94J3!"BbMjY^R6(qb)&n7JbH%<ut^Z.6[+L^%";]`oU&o&;Mp(p(CD)C"Nm
%o\qaDdWma3fP?#D-X>/-")`:+i\fdUS2;Oq+`i/U[F5,JP80trG.OM9]S8E(k#LM#_"e&m5CqFJ)&VutHOYi*[oKUTdCI`m2*bS&
%ZI])7p#<WGT>70FDdXsg<@d>JY9A2@]ZP06\Ng8&hiPnj<.4ojk2F6sJ3@MlLu/4&3\o#OIRE*T.e4P:W02-3lOqJ^Ol:mSLBOV7
%M<?S.!=sgAj+CXD7VC%UJ6dT_3"2B05T7$$gDJ*f%Z\Hbd+i9S@/sdkMW6D+ih4\Z_Z7%C5obZr@k8-P%KiX6Y8rBAU5im,@=[aM
%5obY'O8Ui!8;?=.!]c(sOPfo^Z/YgQoAg0=%aYd)IKL]%Xp4_3)<ZQ67eRelB/lr\4U9&AUNd9Zi8-lh3=M!`'[Ir##+L-+#G>X!
%g2k?b1MIQT@A"(ZkW7cG9-J'%@3DV8>mGV,Z%uWimXO=[,hVNIMXQ)N15bZ'Dos(kaDH>iMXup[&!Am_Yj%>JS=Kn8U`drMnu1U$
%H%<Sp'bauGKT"19!5M?'lbn&K0"4S;&$Tn+>&bSr/5s*Bf2[$PS;1WpV^Ha#0RV7[dGR/UQm+*J"PuL$e4B3Q&ih]54X;o#OS]%+
%8<+h&%mU^gMZ8dR+YH^Xi'.3R`ej]qoJ't.C')cncWuc\F`[B7l0A3/!B/0#(CK.>f4_;qSLhh>qSgJZnVle>YWPV9p+OG\jZOM(
%;_6;W+0cir<@[`D.@)p2^iWHqA?As54j9"bdGTLUoeZP-_m(-*WMasm1=,4T-_rjL>K28+A6+r+I)I+>3/f3h;b<@d<d,lk+$s?F
%<$;N';1]sm1f>+c<AC:nXF`7TD^_[E#h*L>,Rf0U-2f<,dOWq/)&-6Xe!q#F5J1fr[l@#?Ne[O9W>,!rN5e/n)1]K`dEn1QoE*.\
%a>i.4)RGT#2$NrsFAs')U/EF9X^+c+[(@f+e<ri]h9+IMQ@te/6lF-GabOQf)tkcEW73Io5h43dXI[cUZs#j*([rqt.[?]*<'K5t
%#s\c9-@V*Vj&bSNBjXS3\UhjhT;Y6%;em26s7)-jL4YEu"f%k,ImPQFXBU>-MslnHU+\-eMZX)fLT.F+hr$S=[[!,l+M##*8L*/3
%:4k)a=\GHBO&[4+gC$s2T8_Yg80RV$6'TkAj"CJMYI()o9kM&Y[5;;rk_.S<l7i'6#0DWM?Z6eb>X_>KlL-?7cW("'B!kF;ar@f*
%W%B#^s)+fo&.Km"-G`d+M+H/@-WHhV",U.TZ]6?MLm-Ek01hfX;(:^A_l'nIC,gDQocb0h^ENWcd(WK#YEY3]6M3;9PkGYaNo^8q
%=pQK,`1^7)O%%[%'BZDahUUM)aEuJ<N#JrNjf>">.6hmTGfu>IjHYmXa.`<S(.06Z`Ur=34J"XEI>H#Bp$)/Fc.2+GipQ/R#A3E-
%!0^86<P';[9$cFs&$1>++*V=3/aKFL@sJb:<6JA3Pl>3VIieN%_"&il\Zq0El<<ib5*']%LA1.f56bn[&a,.V#Vsd)4D8L!N(6!'
%'"jFp@1C,3:N_8<K+l3Jc:0']Sq2NTE0;4'3jZFUd(1>n;IXC0Q%lt#JJRVs<b,U17J;^SC;L0(\u3XWLM6<:=-$Qu)l+YI4l_\Z
%\/AOiCeFCVC%`<o%KIT3\oJY7)5LgiT=@(P77Bb.;\K?NQkOdd3%]^Xf@uH*6_H6H5SaVr_NcNF:2.W_#fPei30+0"*UuOt0_5)4
%Y\K;dVRWkm*OIt"I7)0eDBquadK7+6Ml=-$0]3<i4[9TuMI&]X0r>5\_t@*sEFH[D$Dk%7;CCb;JRZ58ok;,P.Ymsc16F?6Yu><S
%+3m%@\9R-ahF\qC9n=$<S4%s=Nd,aP03aL/ii$Rr)YQ3ZXGSgFA"a,9/sf&5-o&Rj6GOjEJ$>AS0SBXU"tg(soA-Vt)K6_!X$gh5
%LVD\u(e-rSOd=iQ9XA26HGr]f%CK8`@5-m[3spU+Y<_k?ZBOnfn/=Tc=6q%L#/()[Lr6#iTG6CiJQ>C1_rtK3@^+927MlP\`<_*)
%Y;Ae:VF6qQZS5B7$A7:]$UJ`oR?W.=b*t\NE^m#GK(4;[\#6lD2SEPa[#P:i;#r040IqH_Whul#.G9uLTe-h-1XJ7\Cr_(j(f0I[
%'Jk_R1>mBaa6C-:3YnU7"!5N$-&TYc@rn`m5c8f]V/^YsjUVl4Ek&i81U@d]kYN0BMfOPKaIf;gK.uJ[hdH,Q7Ck=p?p"uR@.P?=
%9M\#g)RT7$_\2CRbLHiTeME/TQ^H5iB0/K1-ZBXa,VfT"a[f'4eeNeJ#"MN`'G]YI'2fod<@jNC98NlDO[@P+Xh8.?IY2`V8jqV@
%Xif?7f*P:@j-HG@"e3g_K4$&s;'A9j&JYC]26o;5N5koe%WPaPK1';14s`73LQ=584rYqMN:e3m*4*P8C4U6ELajVcNTUd/=;Mui
%EBLXRYUJe@XC*3iQOZo9\:=u"EG6h>Gj+!%V.BYr]Atg1=PCPDm,Q"E^TH\(er9R7gqKbRF*_,pQZDP/>_g;L</h6G'C#l?L1%@t
%&2H3R36)Jdi0eU@Ce'+.=kmF&;$TCR0[#IWas)mS!VCVO-EQFjJ`jPGjU>0E3*:\N7PahU[`ETOEpdM]Y18''gC:<^(LUMed9oTN
%UEgrs=;.@4dC^Pt>-^1]7E3/BJn\U,EBMq^_Y5b2,%ht4PZHh(*s4t[UK.SYD'5Q>'`*WJNFu5hi$edBUFoptJLmDt;`1EW:MN-o
%/d1T%JY3d`.!p?d+MAN'a:RWTam2B$A(eSr>Zf<%T2Uq2c&,7jeWeT@-(CmV7=+g1E!)WX^.n]MJf,8BaU'3$+f]Ra3cT])Z.?Q9
%l-U.OW,s/&YhC"Mk2'OkJe/bR'])]/AV0,P)(\8lFU0Gs.',!0'NqL+/8R]^,c2'"0GHMl&;X`\*JJALod7Ti8.`>tH25gJ.k*Oq
%C1.*W&.%V:WHmU-Q<bXsh:II.>uPo.pd&F1SW@[,HH18:Ybk"QEZR4(2e$_@#0Bt0:k6M"63H.F:Ptm!=?qZe)Gmm$r2q0F*/)'m
%@$.4/#(t=/_;iBUDXYRNV-"H5N-6%&JL`O\`WO6h)cR1KB4[/5FIOYM\HK?aJqYXD-=5nUREA>[,a\W.9nk$WN@\fU`tU8H$')ms
%"1A;j303s6USNSTnBbZ,T]Cd")hEAKYW_JDj=2(Tj9;UJ&E=T]3XWcO'[B<B!>jq--+8"<XTes?W"tU%giMZ*-65rCJuprqJ?fii
%fVBWjq$h2hKMJ/gC(49.33o>)$3AM@/8<lA*3*VOp\N8o&I92k@Smi0_HImZZ*G-I<B^b*@Bb=qecM9.8'P3[pbiIpJR.BNYa-FO
%W3@&]M895A`*.m(-tY'8WqoT!(6gp"@4dGspVL)@jjK"u__V2#/uN]C37%hdFLV!pQOs=45r^nVSdpI\+F;]B@&1UT6D8B>(2[*.
%fu<Q[3N:3E#nB0Y\@!Lo2Xi.+,K_mRkuH/?5o^Y9BfejP'X8)S@;,iWNY_S-#Euus(]j[f&*2+UIdt)[rVUR&jDW?+l-+1cDBg)7
%Yihu-jeL;Xgn[WA/#7!?MS`<P:+RRr(HR!r"!<asgEf/MeMg?_!hn"7o$YT+A_2JDRcn5VhD]`W=kS4%2s3%mg$R,kig`Klc;Vpu
%go3;k-TBBl)alJl*'(\(iWLS`.0eQK"!S3/I1l@:$(X>;Ej<S%_4-Q2\oP<E*Cgq:#Uqr,`\ogIgf#Uc*>&?J+D_\Sd:6-H(L:TK
%7tA?&9eg<Y3D3)?&fh-f)m%E>dM,(45bna(<rfQ64CYlC)!i`VMRYtqaG;RhfT_tTi=VQ2ZW@]pRu/)BDU+&4!<[SbrGMca<_/Q`
%8[-;Y-TB%c)B4!7`o)51(`XPjD'e*Rmbd*Y7gMf]\G7W$<k#?CFRD@fJJ`L(+fpc(-OT_kcre0[rdG:ql1&p/\g]+b1CHL#E'.84
%4bo1*S/>0aX8*Bu71!Og!TjRp#.Fu(^sl/Q8VW$V*9ne:UoBtOP73#>IQ[9N9n>Q+K^`']W?7KFld6Q(W?2u$,L:nUba*@nLf6Mt
%:IigiSjG&s1FpmBo3.Z]"75+8!fPNP4sE0ERlt6%%.Y2`W`]%3,]!Off1=Ws4ORU_B@0fCl>beqN=Ku),6j4Ub<XegW`^4<*PbpY
%$QL$VFNJmK=P6dtJPl?BT&Nr#&9:<U3,"pt#BpC2&b;]a9c1tb:sjo*RBR\6)c8F:BZ/:"r&l!;0[aGe%*'B6lF\l:$A8F>flglo
%Bn@,f5/C?D7Vq`5bYD-N`?%5//NfCelReQT@^S(fW3b%V?a&!`?mo!VAS>D8[$JO2=/E<L7YA)aQjHc.[4!Q-Kgo!`")/C.!c/<+
%AJ++#%=2iqbZ5\RkCW&Y"PrBX6'LHgI'JtG9tp_:YoM88G_!Otd^V@$8;-RoMf!1r/W`W*0eJiO6m\)nG":O4&._:Z*RWhf.,:LU
%S;q,AOMf27NNI@d\QNZf,hS.N[ZXm"]NDtsb[rRR*Jq2!e!!n6d5Pqs/[@XJ)+Nt7i53mj4'mu#]?"*1n1BOt_!aMujA=&:jD(&I
%^Y*hHo>C`:@\Rqs8X[#dOn0$^bb6ng$lqri`BulVI9<71LKt6Aeaf2,_)I:a3&uVbCCgoFG0_K?DVnZnDcP7j?';kZ-"W=WQ]euo
%<4E\fd]b4`&kr/NL73oFj5B]9)KJgdmKGL(X"n.S2[h\K\ihCeSMf'F5eD?"G(QAZeE.<_$q64j=r=R,@%PT"irltV*0'3;S<B+M
%i'S_c+g!=\\dbTAX^l$(Z<He5@[Z3CQ_@Tbpb$.rhb$6OB&MQ5f/1Q=VmEp*R8-gSfbbHXB4:FpY8T15/YJ$k4il]T[o.fX]KfD>
%.@HH3Jpm,n?=+QXG)"GC607&A.?@i80$30hGu!u*g,S1=G[sm%a!E/mf^X/Ck38->IEKDJ!&A0Z%Z"]\N\QeF[\ZDm&S5CkT]2iq
%26C)5k8Z/Uce8rJ]Y''Vc2]cg.3Ddl<,-O]?r"B0"&A$#do)a>POfYtC?l4O1g!kN38@XCD\cV$g<r\[fp/@H,>\i6)#>)m.*P'+
%5o@@5dKWuHW+An:04csi"G]"66"#d)$H/-B:AVlemK04K@"WXM*d6p>G?EXmVGmd/+[pJ!5!r?jE*e+H)`Y3^g;"_-U,=d!MCk(8
%n9CE(]fWg+LV$;Q2SX78'd3oQ[[;WJk_WCt`29>4WsGH"\YN7h34c#A-`_3Z,dCUp,-C10jEM\6_DsIpNj1KB,uAgGX/W(X0#c>g
%3OP&KZm#LfA&NdmM'lu1YQ6Y(^]d2PrtFi"8@7d@Ghc<YCpACbZ]-s9!^l1%]B)KhH3tnbO0`u&VT6An+jaN9O>Z!U5F>%aitdf[
%F!P/1$uk5-1onZC^e/='f&i-n/REIS$LGSojCnR21piCai=RE@'*,K#fO>*E"NEt;GN:r1fG#G1Y$U/>S5`S!'*A"q/!#cL@Y?\-
%9shOVE`;K$2@RHY\<mERDo.%u@Z.TO5A3!F/FN$J,X]Au+DRT'<SgDVD%Vhq2HebZM0Wf&R$8W6)B@BHZptbDgEs+pQ<bYIno<N[
%.=5aZpH6iu2TF^u%0J/(";P!EUc&Dg17XEpjAJu61;.HRFM9F\2<[(]hk3VZ)t<35URU#/S2")pY=R/O0,CQgFQ1@/j,Q9c0uQUC
%FLl-iFp%>`BX0)%.'SN19CD=pU>Or(J'Ph.@g-q<Gci$F"M(U[h.f3O$3%bkq[`ta+p,$TY[HgC^H5dbVR#4\9!J>7b7(n'HtXkn
%`MP/CH)JSrZ=7o^n1nC)JE7&!B-QXbN!=@-mg-skBT4OqBoDT(1HX"h5tLu4V)KmPFL6;7$A2ZX,8*JUb7H!i,-=a3E+qrGY`U2s
%;G)q[W"E]5iA)[]"&A`F?"n.)Bce(4;)"3l;l%d1L_HLMnheD8S"Z(SLT%d4Y]2f8kl!ai@s1Ojr^=UT^;<fI$9RYpE:E+HAD$P9
%+[uHJ0al`;b`ja+'qs5lV\H,N5B'F$-:hglpYb.Fl#ktF@e<W6=8^4[a_A\n"qBQc-Z'`<Qlb(#r\pcbn,;CQ,qZLSJanF%S-\,(
%+M`pPh\2P=&,jq*S>Y><>=ODa>JSDJj+)23rE*gm2dW58Ydp8iJtuqL+MF&f)h[G]h%lAZ"?jXF3;3D+\0OK(<E_3W$tltofAbDj
%Bn@0Ah&a6G]M&(.ARMlK>>baL;S](7d^$<.3S8<7/$6W6JpCYA>[F78PL!XI_"D`<H(iY(?8/#&7mXbO?Q02J/9mg-V]^pEJ(js;
%QB7/bEt.jM9Q5Y@K>t/bfkMRm'Fb@^g-gAt)\T;CfFX0<^<mNJ0uo5$Y_"Tr0Q"Y5A]+VHBplbi-^V>:2bXi@9Zs:os-AB_GF:`8
%-<-EF9fGaR"^s#lg46/]l%Y%V#u&uX&>+c0QF)gN8ST$AT;!aN-;BRWFYcJA"BNn418`<a#b5e/8=[I`"pFUU9PC\p,U.G1`)>tY
%$sE.s"]D48V8ut7_q9#BPK$;.;G3X(V8*F4=h(=cepU]L1^%fV1,>+>kt@-p.9"EaoVK>1r`mIM4d3V0c'5pV=<T.Q@7k(dR?C$#
%;p&4BIYK%jVDLT]eBO6'/85rL/n37tWPT7B5V!h*a^C)A1NoedoPi))A6A$mg("^S'6-LoM8kBk5ccJGUqCH%,;?r98sm%pb,2a]
%_PRAb"#hGgAY3RRQSbF;V0*1=:N7(,Pr;1$\t-^8!YbL.N+mVcCoWsRCauYEN,oZ0m*cC9S4;.1b#kZmL*Et'1dT:6bnN&fBaB,9
%@aZ0/jKi^uS'-`]f+4d'iX8N^F@RRGE+tL5qf127]i^Ik_l]AEaUN(#q4%u\D9i<=o2=Xa/3%M_6U?(FpM*%%1b<QI3,pDAga+a\
%:I,A&Pe5j]JM`<[3\6%]5Jlt&L*np>[%M0tL1a/gdU9>r[`KXoHPi42!)(.]CW-C!6Y`iXfK)YA/Rp%%cm7Y[lGDI0>t\&[KL1'E
%>"OGL\pQG=9=W15_mXF`]:^7%s!#Y%Ti2%7R#ti@2YtIa;a<e!FGVVT6QWjt'os-_HX+CBQX5_)!&b8Ii+O@%<Pg191#Zpml^6)Z
%d9eR^L;'J"6^]*bcVQk$7!gg^N4?hY?k=A!.?0Te@1_XYjm]8#'QJ_IE>gr.5lnLRjO[]fL\570#bK7:/r*q,RMdH:G`E&*SujD,
%fFK"A,Ud(0j/=]JaLKS^W+:SqCik36I4>F4;;a82_hglX70kU;RYWQ8dLO8/k-!f2Do*+3oo`O`#tGGuZ9W@"j^O/nUsUUAGK(1E
%nd7a?n8/_iE/;Ha0bHu#$!5oV.uf'2GTMq?KB3XSW9rhg9K:Z83u6hV0oj5oL"2ch+;Db'*-HdnTiec#6\m"`Z%>mbVoC+j*E7r>
%EA!W(O+`SE-,YlgT<R23/1k9_<o(SsXGBYWX8pJ`W]-<'/+o<e.tGT6FU*h1m11gMo`n-\lAl_<,6*/ZlF(pjYpOiR!L!QpI?T"m
%R)h;0f[.,0O>YMs[V6T>`Yn#CXPdVm@j*DjH_VdQXpLkEkGh3^.Y]pF(_f;2EDhRiYQNlFhTc6Oq.L8UE&%SNRbNd5&.6-Pr6Z3c
%=MJ;:X8`fk4r6uM6W>.Nd>2#/<.2"M@0^'[pQ_b>+f]D-HaP/:?#BTN%aX@7*Ua#0L=D;t-8,oG5-"$C&YkaiVPP#M9*E.C6&U@F
%M$^&:@Y1Sb:]tg.'K.?aTg=c%%.fIi_mo\t<AS`&r>-<^k(E'UDJD1:Fh]oZiAnp'gSp'3mJ(7kph(",DnE"%E7Oo]b_G:_3H&&/
%%r0`NH<:`J(GP@?ZlW'?<XfMLLsj,8aB6HcWnL?s?uBrDQk^O=B-!sN6X-ospjA^qmc'O5YP8q#nq3Vhp,slfO'3%M\rUiUF_OqJ
%c35E#9be#p'k$T==+e>al0EU*NYd<+`"4pZCOcL1i!"/8k)Za.=YPF1!mldCG>tb<&V*W@`PpFCpng8Gf\rt`&qE_V:(b>WpspQL
%:<F,u:'?Kg2$L]OBF^41$U?(3DUMnn8>>9feK=332S8G.-&E98?B^aL`\Z<nho;8frTH6V.Z>`UW$mhJ[eL'HR8.i1Q+Qf&P>tuX
%&]9"+f\mu3)2CqJ4cBP4d#!;BIdA+.nRBjqgF25-#g=Ab7186qk9*e&>D8BFB]3e^!NqcU%G^bT5UQnl3.s;h/L]PnP6D,Gp6e08
%?+<AH=/7BRU?(Fm;V3``-39YOODQ\mGf#lG$QuC0:OJ;a(I5"q\'&&jEQuG=)#tX'id88feFoE=^^?NTY&O8mHg:l9q7$jn\u$<u
%VYB$BP?93uCnOF0&9^rZe6-VB+d.(Ol5YK/K=(Tb#ZEVImmIBc:<6*gC]k"IFAbE)`rK6j]m1JL4EFPMCjJmDWtC50Mk()NioQi4
%cmmF\@ooN;,oO(7$DX\hMk,EhL&h>[DH.7NKi:jBBArR-bJK>V\M$oQbr@;Ga@S.J6*39l)M(!2n,tBTHa>=N'nk@m)Gm)q;+gjr
%A^"*-m5qRKV"7RU(\bnhWF@=CWkM$],-Qt&@<.d7HJ,3RR6H6k>fg2!%X-Jk(h>+-:*;TQBs[-7\[n=GIoRBu8/m9:MA`5/@0+aZ
%VJ44+eJV4L[IaW!Mo#OeEtp\e^!nH6V%c)q9Ft=CF$\rWZ>4<3PuFdW/V#YbF"I'I;\`9D0=(#NRL?$d#ms=mIY_P6$XPT6Is-$g
%QVKHBG^Ypt$PS/db75^;khMYg]]ZaQn#A^Q9QEF@/K2L::1iUDPj1+T_sG;L!DP.IM^?S_R:A"mQF`FJV:4<g@"S:d?W04.+@>:'
%JA^e<1Gfs-K:rYmn.#Z4X==\sk1S;o$],I5NPt]B,(0^!:'N(r,$i'PH9;l`(+S:GM6,C72@mpf.Z.I6q"kp7a3_Vn!T*&qi"\&1
%Ng><5"X76'0]I6tfXdFYhY'c4/E&DsY8`,g30hM!_%s",#'O.09k-9hZZ9R6n/F#tJaKV;Bo@a&:Rnf2e+m;)(>+9ZF^&6(k?-Ht
%kY=fh$OgH8RW?DBJJGc$BaS1E>FGW6(%nCPf`+ZEi;6WF!cjp/.H'"YTUQ#+mr65O2$NHTFOCj_^gJ"%>@;WjQF=R8%^relCT_AE
%kdCiR;`9Nh@/6at&N;K"KY<NCdM\+4VY$W7iCCK>$>u!CPBUtmeOXleHTGC4m[(`=JW@&j36)3o(BHID)7hfTiD-DgiNI2E<l?Br
%\-)qPM&A%<f6WCcmHKE33+(s0Y_MPX&0VQdj$<ri!!aO2Kr8%g:>E/.+"j&hO`!mIn-4MHc<tIY,8>\Ma;f<H#1FgDVAQ*6h2=Z;
%OYK"lP/.JgGj:=R!=(A*YNZ',kf-K`!W-);'RCnKBS+$&.*`/c+NcYM4Zr'>ELIp[<A8`m7t-*-QlpX#J^X`.FDD6t,Xf:DKa8;#
%:@g/*!"X%NXVZT)h#g^Q,7SlL;PaW&=R,G-&stkkU;ICn"i4mod854'Us$&u2'2_uQV/K6F<%'.fh4^E2JBqK#CmKU_o979#"]5Y
%e%fufljXp'9]-N7&n!'o*s]d:S\b#c!Q3:C<i&%tI)-*sJSn;(k`:cE`0'-fW/d-O'T:bt$C\o]'oOcV7U]m?gX5W;TSU"l'8pgb
%J7#3?W3IYV37pP,4uAD$JW],a*,s\a/*+LP%LP5SkQRa'!Q!n4"dnL97Hd%7#FrWn)LB2=PGZ\/:1tIO4n*->L)tRX@%dfFV[s5!
%@(T1kci[#IU/TDi*QjJVci^!Z9ON1:O`'i6m4lrik"p[HH9djM-3n9>$Jn=pmsJ5l$$ZuZTb'<>/dN72UN4>k"X"S;eKo%,L<3Y?
%Z06.6=DV[VHVrOBEcOj6/l9USIVceE^0lRQeh]o[i,2C#k8<Ge:A=s=lj[jS!.Tp9FU]$d$@AHhnAJ/I=.h(\$,("hg"ljJ]uFOs
%%'K9"5\$6m.e!ETnCT@dJhJL%NHE3uZ^M.ZQ3n43R&/8li?'%oP9p>@dm=0W_$^ioKPuZsf5Ud&i0;\F#nc+bKqTXkS@(%1+bGJZ
%]9<dLn5r.J5eG%rKd]1hZpU2dBV]lA"LMTj#\`'/,/DjcDus3563K!4Hm(hP1K5&#d-qYlTM8ICJ2UV!KG`)(170i:63UJ/$)=@!
%gtEJM'b]>abuB4/JP=FlnAr7SJG3ur]X`K6GB*S#EW,=3cNoJQ]`-9+H2CGV7f%.Ep[J%<LWeM%p\F9\DuOd:0<6b;:]>aOH[GVg
%o&8JU^&%ZMe#V<ie*chZ(K\)44%TK#2u>Sfg]g-UmZ;0'KOslXSHG85qUb?,o2hh-\^g`H<hJPio=p)hDG`jkaYpjo^"d2q+VM!8
%@*.nco&m4JfDC?8dt`jNleIq6msR-KG-B1j><^a>;nr0Wrr9aps8VMZHM,t85F]A4TNbQn/gNg`m@RidbSh,e6)P&d=D/>,*72VQ
%7S&ZB.VT;d%$WU<l1b3gQVtZAe0_O/4XO,c66KVebt8(\=V>9Ls%'__dm9FPK:b#p?^:Xi6=258r?P[KeRGO8Y;b^hDK<<&KHckh
%n%);0Du=E92fCahqIFYmHM60mX+0s=iaMTIQ10gmJ)S/3G8]MeVJDCH'"6]Sh-<+.QP7nS^U`+dY!63/0&JmY<Muqo^UcM?I^f2r
%`F&XeEKd6aM3=1re1tB:>j(hZg[=Y'jtE6>ogFq#=]C7Hn$4/6FS5=p>Z*^bi'NH-hUbp/]Qpdk8QGAqIb=$?=.@[N-Z[d[S6'gW
%k$'5<]70D`JDBGUe+8LHb9tG:aKSc#2)H\V/p^j_HSR`j!R^WD.qg_=Z:_kF-[iQ=#($PU5FN<5p#,9+jtGCPJ-Ed80<Tf\PX`uk
%<RLi\\t/"u$_l>@%k37q_kE1:h8S&kpWq",8MSungYHqWEDjr&F8\!-Or)Hf.#B\EiLA#SMsDBkIrTnM]6dQjZV8iBGZ"1PMW1Jg
%8Q!h%KkVSXki27"k5,"$,V=j-li5Z:p%7(bo,('I@`FV\pNO6m%j5MK5o9'=1,^"l&^Mer:/;&[E;'(ol/h$u$;ful!.DQ;1\0k4
%q&oS,RZ_:t0tliTMlC>#4K!jYH3%QB%G9"J.@[b#gLRM.F0\U8MdS7RpA^Z<Zr)?/ER`7>Z>lrUA=Q+g4<sk_.\eHTfhJ(i-UK!D
%_Sn=RBGWkpAtu'O7?\AO:k[K:!.GI$5Xn!G9*H`m0TU\/[LGm`;?u<_(APf\?8j=MJhM`lF\S%]Kc'cZI"l>QGfL;(;fT'NNm'OX
%cj<A?#Z;D6'IGf-.8JrNm.CGV$&8B[Jh;:AfM,3.kEto\ZXpd+]inZWR!FGpcJ]`b6E3I'Ka&n\a/SU1B%38X3-FUhr=lq*Fu.YE
%.;"!dfqPCtcTTO@T,CgS_@f&fG7(1`mKt>:EN8s9(q$;0btJ1t>EAhH'nMdC@$eHm%(K^qQ^V1de!W1`R;?K2(@&7?iC*TVV7E"9
%Au+QEYRXhD_P:RJ(??U530aS-(PIXP.&s\<OAThiZXm<,Ca)hj5shh4-Zp3)[J3NiEsja\SXHAGDJ"lEKu)!/!IJl7%<`p*7:sE<
%2]KuF2lAEg`L,1TZ51F//BFgYc1MeNYbYGj:u-`!WnoRL,HIo#)/#EfY>tCgU,UWJ@8T0<G+51^IG<c7l>e2OF&Wr1SV`%73(7p9
%)0LIsiAm/5dn5B:=2V==d<J^*dbnj&LfW?[+R0^sXU7P@1!.R+h`m.d&uIIYC&=kR3gZ?#^g$?!aGu\0cGJM?flN&69^O5\=l>DG
%7&T;T0qIPNDRl0Vdp174Qr[pi%a#GQ_kN/r0B-,GW?%NeQ:d;])5'4T-W]/Eo_RY!_3]ZHlH>rf*F/[Br3'B6.TR&'onSubHZO8=
%qT[j\&$']XrR5qQFnuhFH*o*e)R=b\+cA6+(\\GdV.R/PJdFVQFia4Il1GQgDf.2$R/_rX\Y'7J:Z78uiQ^'QX53HdiT\6opT&3r
%QhT#Hpi^W]$S\K&5LB;Brr2!%S+GIqa8`^HjKDXOfD5#NV[qH(I?T*$m(RoU8It6>Y^_]XIY.,jWj?Us0$j!0f9F:X56#Js9_f%q
%H2-?A7peLVL[4hU^<cfUs8;QTF7@8ShmH%j5K3Fq9FL@e4mB+FY;dD0Eo4P.(T#FMc1UKBKXn`UqegWW*6Lgp:Oh5E]t(X:c\S$&
%Zn4)SleTIFfSHH[Vc3U`h>\]K@328`ZeBnKq?A>,So"Ci^%u)-d(fATfqJsJIqF^qk+03#J%3&cGr=:4NXrn75D;W7)"Y%h4dR2h
%k&Tu1Q?%I0W;QZ]9(1[:jVL#ts3+qkIsH&-?X4He\2&$IPk]QKHF^eiJ%7Ogq"?]gbR&c*%1K/Y_l4>G2!WiO`Og&\UG5B`T=7sq
%"['`K51QeXT$sJWIeM@FJCdi@Vjd5/B.9.=]/c;62W+W)D8r'7LMRQmm+spRFa*?c!]-EceND/2@.Zssp\O%Nh:Z[eo,_BKIble<
%%oPVN$<Oipe+7AbrE)2%+,S&<39TO]kAZb[N1'_Dqq_(eqlA9!]DJ)@pDcq3ME1I60rm(AOmSY4\#\O^#jK%Zh5t#>mI#0/X6OQp
%+qL&:C0Fp(U/)kSX)&uRgF&am03[;l\)ZcJ]DHMJ?_?1>m-ZM*'-gTo:6-1jh0!mUDr*^[hVI##^SRa/D[QO0rPNJIn9FK>_G)B,
%(QdnRmbuF8l.u1#m,mm$DIlmni]5$Z#Job$Beh"sl.m`9^*u5@AC?'[<N.&-:9X,):GY)'rK&PD3+(KKr9*L99raICR8gT91`_-`
%E;0<KonV@1+'(np(D!E^/hSduIOMnLL!Fu.jRi<)qpTc$eZ50DkrRA<j6H@12Da(c`RXk/e(R`!-1B!$EdN+]4t5XZo_uH/g@r'8
%&!KtjQP]CRFV*U)gP[p&LEW'$G=@`+I_.Xcs):oHC=fJN3>(GmlW8"_1n@oYgu`_:A,S:ZoXimB`[FiaBQDm:`LhRn4+#%3o]Gf:
%o_NAb1/5&b0tFs,hQ?2fmV]b&!Mk2hnO)`ra,@VG(:a0hGBXEnVT%K>*HQCFGJ6/2pY>'*05ho#cUR[-oh@#UF`EDJ\[fcUOsr#,
%PriI`"Pba5^X`O8>0C=TO(^H-"dkT:rUW5cm5GLA[:5o\^UZEh^At],]fp('2c2bu_P0^8d'l'GUJ*(?dnHk`*kcmu#S#p1^Z+[0
%Xa/kc!s3"^-ES]dZ\_,m5Eo?9lY1B&_0dI#T2u-\oDc=GZ[QucE-2L-4roSoWR!3cen6qnR;!a.`S<\LZ7u"l#`)s/Seb8^SZcu"
%J0_$g+HR8Nbq/AOc/!lXRVS?!,tXFle=>'XEP+EI?%;aqFPlQ-mIoAdGO'((A1QScC>-n[d8\iSMp%M'1eX:Lki(Me'&kCs!g8rC
%I.nC9?MUXK&\ZGad`(n6RjXBTW?!on,fLqb%0e]X,pan^"PTF(]R@E+bW`hK'0k:-5!/.;ok^7_RN)qu;>)?O3kbFY^;]pdM$qn\
%8?8tD7V[qU;P1V8ITW4LhVPrZ\UI4KDsu:3mUYRsJ%U^.f3&KuLj5JS:+ZdCnuoOg];[PO/\%&9h/h(@:<-P9)6"]L8&PB+'(=-7
%mTWgO9,,EW@KkQEn#uQRC+UdLg!pVj4ef`,_OH=!GB])Zr:Z/Y`;XKpbrI@$1Z'%]a>l8O;@9XNG>B\O.J1a@mVUN%kGpO+X:F\O
%^'AJ@ePsh=Xdu6k*BHJpIj0lg+pB,%q?2jn:)MS$PSQcfX./]NOiChoh:%!D:;[0dl1_'dLDY%\lcF70$oF44p@@R*7i2lfS6b#:
%7`h1_+ZhI=YjU'.pCNY[6lORP:Q5p0U(*Gc-ABula^U_9pMZj-DHThB6GWDlWpIt6(eKc8\_b$CUYba+[2W*.o`HgT5Eb0WJ:]p!
%Pa=HQeEaTAkI\@^r?M1&QF'N>7;9mAa_Ge[.kRdDCe$XgF)PsB*\e0Z_>PTQ`rtSoT4N1Ani\V9Um9hET09%O0[].X[5c$aUj>YV
%At<5<nrl;@?a!Q2Z?qeKOOJud*<5ITYQ*^b=9&$HX7,GI#,0>WWOAC(Xs4n.fchs<<ba/Z@\G`IQTMSJX(/Ggr;FO0$k[02bE0&8
%.\u3;[1=<MH@$-d\\*AL$Fc(b`fQ@0UEh\6^7jiO.\!Zb)LErF0u`&bTgr$26S*r)6RAS"Qsok]^21(1miF8VC$_<7>BJKBGP;pB
%Y+Mr>+X-Yf4Ic:[6H,UYVE;I=Io/oRi>`_/@N7r8'mQI"VD/kBnpXrG5Kk[mP%$0]o7ZkMhbF/Q#^;g,B44>Ss4tY2p11?KZ0iaf
%>onC]mWVLt,M!m2";*hGfI[^+T5WTa2EPQ/N;_VtNC=1oP5/qEPUuL[L,S8a<tI.nF-nH>nDs4sh-E%:5rOBA37.hgpVtkW*l'.A
%@*;tR]J@6.S\TepT-)iO/?BB^n[F:aY:/cs3A"+%s!FYhT7/@/Iadtj"#t\f0ASk,n)3[p361%KnB^9hB(;:?';M9rX3^::E!*#<
%:4R;Pbm=@jhUhf^j)*")n31N$nh7aQE#=N<_&ZSX%Q[HP30+JC>g"6#LPk15M68\\OL.bH7"chq\nIRS`X''*NW=aeCBGbYJ8bim
%O-^P/TZP/t`$L.\)WA`j)*`G!oPgU/!F[!fBMgN"GbT]m%^9LG,e/1^/qKImaf[4#2;SDZg*`(@12njLb1J5'$V4I0m1`CG@"<=4
%^"EK-f:tod+<[0X1JE@=h/QE0%!(Ygomi'R;rc:/PbO4p:'Kdg_i;N0hUo#[T+iu3i']([+t%WFKjB9!I&NX*=+Ik@CZ[r&W5?/4
%;fI7#FcpOPF+AV&rM2LYW;=g5E&LZtL?Zpjn(4>deM,@eiHbj%EJ.hE;M2?,FGCW>7c2n8:lA!/YRYU`<X-,-?iV!&@'=MGLd=aj
%^km.Ccg]OOQ]%WqoP4t-CB8+%F8V.ZZ6UpHQFI4^>[Sot(:.s,U+'>ii;/*llkp"j'FQUIHFQj7+D<ICJJ^?^c]F;$TGc=3KG;_8
%ZRD6Pq]'e&9O2MI[iHH)WAT3W@iZ4tZ3l6eC]`p[/<%L)>$r1gLE^RQLlI8:$j_`04f8K=Z-PH?`&"r#2+$2H7fq'KJ3^4o^o[j[
%$P@8L1natRQ_hnD=Io[rW7q?C1peBC09?68P)$Xh909;`%acl2^l4[9E<:6$l5$ZI-o<J0j-W[7f1Hme?)m]'&^'Ka]hc^G=]7aU
%8C@k7Ua[GF8Soh9G@h4H1`NF["7lj$Yn,VLG[_aS.U.J^82fBpmOJK&\i2'>dDIgt^>cGK1XPh;s4G#?+ZKRN(06bl1mbF<%5<ee
%b$L^\7F3#n(g5`PW/#^g$7I-1iI:O;2!Hd:3\t5ZE6C`ZagcW<a[!T^L6PLn=h#S`g^Ad6$<(bl*mOfjk-PmqMNF@P&BY2[=?o\;
%*q]c>Y0m>>Yn`[^`Z]%-*$U_,#A#JPKjLV4,*;&:8_nof@'aBhkXcTL:t$"<+nq=WisZ=bU]I?8J.#3W#Y2815eA)rC*^kafFd`m
%S5'FST)g?"!Z<sSNBqj.V4Pb6B0a-;0XDdA*O'"U_Km&:'kdT!,>V?J-JX]a&QGieH5D-OWDcFL$lDfO)it(U+=I^X<mV]r_8,<1
%3h6=DBaTO$2H_!sUe_bWdO2UBZa_>!!h*H>arO:IDgJYgFkJ)<,#D@nQ>5@#Ju_IH"L\JY:iE55Ii6>\Fk_4%BekB6gNo0P#%P/c
%1JQVimFMKpUS.`/_)MPNb]7)mHdFC@h@XF(q,AK$&,iT9cgY`h!Cp*Ea/4MKmh*o8;C4#j`S/4,Q'$`Y9n3X-E/nB.!T3N8KVt^-
%A)4CH0J?T@ep=cX$4JWH&EQ\?.r8To38>2RGVoL+ll-CdRfWX>WGM5"8sllT*_s7`jLZMl:g)DGbK;aI;Ba`#EX`:L4cPE0!-:qp
%""Nn?>#h2k<iot\3+^Psl8YR)@aF<8KIq0/a9jt[in\bb#'WCnOW'ir$HH'H0Ydj5#YN)JDK50o*PHS1`3b<;7s-RHi\PU`c3b)@
%ENHim[a[/^KtDZr4#j4g9Z.'bXKr/Xg^CnS!M\\GOB#0o_*D&1-\ukE*f`YceLh#57XUYb9H4%$!L4fS5d2kRAKV[,aXi"e,HKJ\
%d'eINd;fFf+1]#b%V./a1MR%4s&kOO>7DL9R;<Y0lNWSj)!4HlC=U_Lq5RAA;Ljbn:Pl8c5:[X3bWE(8JfOqI#:K"M\+et8jfC@S
%*\q5-UKaaD#_4(o3(_^,8#=2]KaGirIZUW67,obiDj?=#'W<jT\P.W@On=gE!'u%+muS-i_dL"7h8m"`0*,M4lnTG#Rri*a!kk+F
%">]2O^bNdcS7'nL"A']'<?32H+KLMO@;A#Q]"laF(^)JAn@!q9!7nEXO`YkRKfe3)1o:HYnaaAYS->9;&uMud\ptc*eY5;MXM)R>
%00fVpTc6<N98^1TYQ>^77<&?b*LI0p*F/;nS7BX!cjWr4f8T#6NjNo!]%.TM%hOmA)TJpF,m#t$,-Wd<RSq+0B[VdKTRbQJ:tZY9
%F)qAQlkG4HgBoXM1#$87-UncSCa<3me5Usf]dK,1!j^A.AmY\$`9e!F%1DfT1WXna73'TU^smsEQNeRF<:;Lh(d\k\U-Mf?VhuIE
%XKdqPJVL$)A7d?s^G-/\ZN=mek[>4'IOs8;e8XRNV_,C5=U=E2>GT[SmI?QXEqV"[djb/AOmShGTVh[pP8b"QfRse`*+3GY"cf4;
%k?0Re%Po5$ThH058`48U5e/[&$Z'a`j>@]%P"1@Zg*D=A&*Oui)pl'KgGqQ($0[?1ROm7.U!l$3*!'0[jcO<=kpHj_Hm,F1POp@-
%D76+W,ja2'YRgiVR:.QR7L'GnmDs?W5.\"NYWN:PIeY6qD@b$3ioRqgR=KUUH%WFY&2*YB8#i<(;)tuB0]K/l[+0G1FB=hc:2)iV
%9&7gmcZ[`-N!4?1Bc&8VdIVI!++#%siHc";"h7p7JBhiRAk_&<l/56X0?+l)4DRdm6+@^R$94%K:dq\NZ\LiDWdD6CZ[fKJ7Nh2@
%Tk2202p%3%V6S_E]Te&jIY@BC(^S=G>VdE&N]<B&a$[YJ[nX.LXoTbcHZV6W<c%7Ro-?>Cf2JO!SkIQsmhduA";;almq`/u&\>Ys
%WCc8u@NU!XL_I9%jP^.T6UPPk)ObQZd`D?f8gpB\[CQ^*PQq;^J3Dq.i<frlLSgEh_qH_<^19T9\nH'C:k9u-i/mrQ`kJ9LZQr-1
%(Y!rU9n?p(6bFYhEi'\i^]eEq+mh[;<V-]AG)PWT6N:A#k2u1n2]K-IZlAP+G_\N-4Tlt.I7V]A!?jIV(-08O>iJ]n3b#Rce8_+Y
%QT3O#`U^O]dA^)@EG@-@]K_agO8Q\;?:mW(o/--iMn`WWEI#!<kEOWfbB&<V*l\j5iI.J=n2T]WocJe+jgi0TH+)bQZYOP)nN!c$
%:]'S/Xt-qH'\-"Dnm%/90@((KQR=so@lZ3g[T()N*r30.B_R*pD-nAkc3JZ&SpTgbbB&=!36cr>pXhKLNr46]cQfi<2;3LjUV7\'
%`s3E8oips,d=Dn7;NFD`(G`Id/RHIOZ?YtlM!9*8kF(TD*aT.%DWmFnBb(.,8+#+[AUW\DGMe<-/sgB=XF^9YgksE$imMD$+";Yu
%7dUXn,'&jUjT&5R5@Hkh4UZLF^!VU:h2?qlLBj/qq<8(.bKlXjZKsHBRgT@#YZkBP*O-Q8h)TgTKN2/Hn7,D"1O5Ft@/>eR<">Df
%0BYS\pno3nhT,0um4iNkB(n07ULA^hOgMD[6Eq5?HZ%VU-T":1^.nfS]Xq(L:hhdT9kQ[+8fH$1Y(blnT75;RO(6_,qU4u_,J:sZ
%dPV(RaL@k_!_`NEjW_=>.BB^9](WAeLI9n"e'DO$4o"ij=MBD;ML`r7*"3?@\f8MkQ',3+nD*O.Xss<6"S%d\DI:2WdC6Y/S<pZE
%n;pYoGse4Thg%Q.=#knn?TTBZor<>GYC<mbI%@2,ke[GOXW0:BGH2<GH!N3F4F_]Xs#XW*b>JgJGf>+da6FAYF#5-W6^$7)%^Dp1
%5YC8n(NfUC^SNM!:bhF\'R"LteHONL>'2\U\;XSR*<q^(UeODA\j!rc5g+o3PaoDO.bBQX5)foeL?<BEK"+lfi#\lJPTPM?kca89
%!jBl2U]3^.X.O/-C0\ud,qu1IS6ehL#*7oLg-<U.!l04B1hTtl'O+L"B9q_']GCR>_s3q&`TG7md*;eK+hjCk/V"9O$NTm]'\^(t
%d*Sk7I=7iYhJk(H*4A"8$O)jR#:eJ7!#ms7^^9F[>#"f9G`;U(rZgp&CENHr@6^:]KLZREV%>7q.teS9q7.3Q4>5Q7+RE^[Q?sE`
%<C`\R_%U#Khu^AOLbE#UT=#o'QTfZf@HiF5Nbp4X:6h-kTatU<<XIAU#W#0XQf4,=bGB2/K_%j_#k][6gs!Ae_VLeN,=Ham(oKiZ
%?]3l>s7k-oih?9u>(^TQ6$DV24,&GZ\=cbFgu-Td1Z.Tj>Lf$_R0/RXjt"*m#NF+(&n\Xta/KYGA7"!9XUtVn-huZYo%FFEn1hkr
%#G)jm#+%fHUQH>#U,SQ(Q,9gMNS]p"nl;h43gV:KH_h\hiKrZt<X;!.i'=gNp%o&e)\W_r^/&^g:?1`.?T`NdkQH&]_spg7I;XUW
%F]>YKi&:&W9ciXV4nDJ*&GcVBI]2d:0%-eBr7Zbp<E3>_P=^s@^P2o*$Yt1@U!K?kefEk4NqollqtdjHFfHPuf%2T8#W]6GY>/Bp
%WL"+*)g&1R"<1mc%(^\uYtFE6Y:\rXL(2!]9.JZl[CtGji#h9*[I,HP3jsP*h:GG,&-)=#kM(L]LN!4k^\M@:s%^9(LK&4sdjET6
%'H]n_WSg-Skm/Ok.RiaX_LW.*BHBrMFj?1*M^CEKOCs1f#$0U%'-+E*Aa9)1b/:AUjPfVce\PYrKB@m1$YV0/BHBQLGbbspmE>]D
%g'sXZ%F(!a34[k4UA?`>#ls!Q(FS(!`:Lct&o2Y%hA3nQ_ji*7Yn[cX#4hr":C><j5P,K5.#2s2&`F5BF!F6_Da..?K4aEi*TBFd
%11fhlQ#E@^045kU-`T'ZU^%C]7mLuDok_`<nq68X>PtH9Rs4Pj>-Gu6>[LUn"Hp/qH+Gkn;!)UMLTl\5JB*11\++9ZYEKN'fUP35
%Tn"2i2`8p_WT6h;geZ-f-@=QVO9Q]3F"/9eFZ)WueXe9))IKJIQ&4'<80(gs[/',bXL4*ZLS#>@oZN:RcH0LgqSdSRYklqRRX.Q1
%8Kr-SOBG$A!%8<*JC;6u`f%e^BE8lg]f=S?]4tYaM>%;,E9=;QZ<RL+pD/k4?Oge:#!:oLI_7qW>l>oHMg5,?+qO`'+O!c9T%R*$
%"lUj:i\qJeD=LWO-ns;W1f+bKeqXSS$u=/Y+b9^tT7U7%Fc8EG![32!_13n;M9(kUn<)O`@("Bb!R"DBj6""D/-Ho^SOh/K(j&8G
%';5pP/p]gb3d3oOodY_EI"Qhkih9=<PrgqK$*3U!=\/XDXP!-[BRkdWZe@LQB4jaPeXN&t_D/8Wa9eYjUDm1(+t1kDmZ=FQHI@jp
%OOCD>q<Y2O0it!L_[pkYk,&hm$tnXVJYT7+6X*<+H#5-VRfs/j%V\4r-iYZ/&e;c7n-$Ch.c(J:s6>9Jj)D"]6gNXs7@!_,cZN#A
%q[[#6-hQ=Sncc!AH%`dLL5.R9E.jsN5.b\'2,_Z4'gmT3#W#M9G$W+[=-F*1,KK"MGkerI%o.iMaN2VX8+7LERpGu1=Go#Q$7(j'
%Y]=TB%DO$E6T!Ne"a44*M:+/fE5cQ9.h&eELm*I0YpVVWo?[K]Wq;EKBPQ`sXdbZ,0duViBF#$]XP2jjODSpCPbNU!8XbguLT@IK
%RS136MZY:i]O;_4>_a*pZ[S,D%\BT]D+#hPDaYV6&m.7hiRML_/V2he?Vhdjb2$Ib6'\!kKli[NF;T\KQqO--a+ke'C5^)ZJ`p+@
%H&$l,SOap/8i7.+Niifi;X3FB"/A<*H$(0"(lk[BcH@A!?s(qlA$kC$hsXie/p[W0.3T]GNl[uG&DY`(;dW'Nq?1RdYi'6fCgXFA
%M7pgs;3HLUP5pT;?g]=t>;SqNanA_215el!BPUrkaICr)#M^K^6)&l1l+;LYIDVPDaWA]_"=]MM\hiGXBH-b(])*J[E>D27U^)7R
%]3UL4HWFDp4hKMeompo`ar",(qhE/&H*'LUpJ>gUZUsD&=nB/@Zh7>=Sad'6M;0/s./364*B_m^pA'c>e_*tsVC=@,UVV+O32Bkk
%H?mhGo<'s-^td%1%%<Mg[8Q?#CEfoVdRcBprtJcp))':t"_;3u5`Z2@!3;n9If)M:I3F8']T<VC2Q>gQYoX"`D>c08,%@K(jCjfK
%Of7k*JdpPA_qlP2`1YVdbKYSoC41ZZ,if?MJWR:Z%r_s6m.dt"9u8UGK]*X;L>fp!&l*%;#!K+K*C:>%I`Qr\NLJ@T6Lm]rr=;']
%nIRTs-7Wl&jIlI=.B9&;P[kf_P)1F&X'@tbKL$q#!O>Heb?,!:P1pZm/JJcs2;>M`-Em7/31[&m,Jh*3hCJL*W_GG>K#\\F0++LQ
%3tCL7k"m@^qms!_ac+B%#nXF`VN?O:%0AQ+.0ZVa>1.*H6jG\I!>C0G>Kh,pfMAFM7Ma8+HYSNZqQu;+3:BkmjH]"r:,MD_"WHQ-
%pNQpQc3'N%Q$9!YX>;T^k5C[&W-r-Hrl&%g'm#qM$&7p@P0">=f(hA3&TYnt=WD_"^JKa9dOHL'V[\Ig*9Z6;$S$LUAOJ'%We<>/
%B%C;@P=0QW4e'u7%W5a6-Y8X>o_n%U8+-V%Kmh/L<CnA4YlLg!aQ_\,+f\sa.es'0/H2>*qeV1O/u]aoIDCos\r#S.!b+HCcoeRU
%<HF,>KWp6,_E]1-5]_0C\&0Wl,D-K2#0WdJ./LeKF:h/7S?Q!dMqVKp)Jb+-F"ZPD.bF9U[@eD&Yb>SaIoTdI8^%T415-nj4l%#C
%_1n:YeKl!LaMo'^jP?gK]192]&(O6M^9<Qi_Zq<FfK!apVHd&Bc01H;1%=5.S\pppPO4[()NC2:n''Nip6?,'2FF6QM;&sN5=^as
%\T)$D,<b'8a']No7Qg2#>_jgTBi'M$$\7@>UTQK)6*qn89N'!\S,M+^BC4shbV4bXOdY[bVc=`l`-8b)BQgp.$0A'XX3B+p9#?2T
%:D#4r2ANiWIu4R=NoVpTCFa^".g:Y$nINi>#oXRq$^XAjMU>-9B^VY+%7>1U@nilnMZ)Wd_NJrE._8ZAas!?88-u7UCG#6.0e"4t
%o@%T1H#oCITJ[B30`(&(]-^f[`c7XK(`'V\eG3mfLO@B1m+i)@\dheHR'C#[k"_n]h*&K/m0%DrS\!MlKnDCn=[;FM&l$)aiZm07
%YOg'^/cN54*8sR.jh=6I:n_TQXck]\lVmZsYk)He0%*mLFP/n0Z&cEc/>7DrUkhdkTpuoJb)Pbc(b`r9p08QoY)@CRM,q`n>VW/'
%EKN^Y:ule+V!.:]idHq5!&"*glk_+fWTeBW(F`hQ@XP>,5#j;*gTL,JqF_^0E_hY]\4BK<G56-?:,#'Fr>n(W_p@oX1h4pYOlA<F
%b?U61NUluO206f,MD"'Gm[Njl'"MmXkThb:QAQNd-+9*]_\UL-WE@M]WAm1H.e&9%F5F?)`:T*!jZ!\aEUMW5o=)V6J]RC/CP*$1
%&]V7ADF4SK:8eg]<6UD`?L+X"G?=MZ'6(M6qX(Rf`*fJ&D5]_h-*894">RZ-([5A,R%9]beS3<rLtREiU#L`kU#H-u:]VtEgAs'/
%!&?@V@ApsQ4Atc^W0j+_O%.e2'am#2'dm[LMM[^.E?*ra.\<!o'Os9%IFLd1X)Jn*0HC)hb>9q0Vf^O?BW-_i'^'&+fZ7L"f\eMa
%6kG!ClX\!:UHj.ml6nZ/(IQglkC)#4&C"CSn$nqJbOYE@K:(T%.c2kn)aMEJ6er_;b6R)sBI;<U0;B*[0tCHdW9b+aB)fa1%`u01
%"NOG8"Ja2Wh^c]uj1.kROeJ8*j9gf47T2p@Krm9E%R"XM?>`MZefE6X=b4r:Og9fTmUlUR7eS?!\J>`8=WV@#AXk0Agg+(GiZcm`
%\YuNQ]td7F6&FD^CMnth9SqJ;5a%LU38''pbgJB<Crk+ibNN<Kl@oe@%0TUu5C\-9'Fl7>>2R_lTe#MH0aJ2]?QB5UK7_Y,IG9uM
%9^6HZ=XPI!gW+2&h&jUF59Di&6\5gUl85pd:6pui(<t5-M2%p&8Fl[pANqFXX\PY,>%C.6Z5(X6/W^[UZKua%<qB.Q2?HCD)6XVE
%>@bl,[*UW(Qtubm5KUB4dIlHK>Dq,Nd)QUr1T%QqTD0e:"b=N=nn>-En&ome@K;b0(,h`94Y0SYq?K#_(iS&;Tj+E6"$bQ+'L_kn
%=bMfU<J5*O;Gf6G]^ADBFJg>t/R3]G#0,'V$`q?7gTE8!;GJ*ZSDPa7,G8SNj:KN:7/:l6`Y_0KA%<M:6aa='`t4UQqGhF9UK6-Y
%m2A?k0I2VGo-(_8mCk<(U(rl:br<Xs$o`\.]HU]E$1c8"7]<fF3G+th'):6B#1,9b<A(`=k2"(h0P\1iA*fQZnD-*Z]$1&WSRWMr
%bgBZs#TsMc5&M9h%l;ELjku2:l-MOp.RaZBEfMlK\&sBjc7r(2#r]k:C]Y;urls]HehR%!E/jtcD8`Ip>e'4<kXk*H:rL<J1Z\jK
%TB4K!CX+Y"]kd8a3<j/Yna4UV<Ll4YDU;26G\YnmQ_,Iib2\Dl3:"rH/2P_-/8,a<bO>[m]I6'I'1;m"?Beq[19B+0LF&-<mbMW4
%g,>b!1MZDZc>H*qr3?ue``IOE(Zj_(T./BC6T\t.*B6SeVG67ZcFh?;e'@nM*]JZkqf6)^5HeOnq6.,4:_6Y4_002k"%5jd%3Ug^
%(g*fFY,Pg,D`9La/O?q6NTfPg;ccp,mEO)E;Qu6QhJA6`?]fX^\9tBBANpSC,M@P3S6(*t@Igm;++_6+P3`2"kHurfbk#j@"Zr_l
%3Km18,,q,Z@BSFjLd/\6dXgFZ=#j^ja4LK/V+,^DN%rd+S`LDuW&6C_2-X&De[:.gb@JSS)]c+=;p2p_?l-S2j(u!$?2#*WqaH9f
%&Yu6I<qWR1#ror',/c$E\:32=WX<Qu6IWM:9\BG5$%8oMWi:=Tq1LQ.lRKA)<fMq0V6?M8I/@.iVB9D@Ul'*:<",I*0[CAaZeJ(C
%+=+tY\W*%>aEG*@(+dJR,)6c3p,r3P:efV&F@@/0IYLD=_?"5(5L6@0H\U1.@51eEAntjlfDn-SkiXKcjFI!7R&QKc6iNTG$fR\:
%]IXX@:\H^7O3%9I6?2',9ja*rV3mZl6B?#A*pX1WRoU8r7rI\;RhUsFRu\gcrT>?#Rdr?(E]E]d*H5VF\Y/YPmCY^NaJ,+6o@RG2
%.,_gq?i`V^nC[bu>?hStCuq+abr>q8o=rNb,(JBfWaI-LdsCp8OOS=I_hM2sX'#W:bD$=%ENp+J8*'NWY.KAQf8un4+$tukW_\oc
%5HGFd+X4p'DJ0u!@0TA:2]t-FAqESIbE$hkPq[`j3uBF(%;_J>1RnG".=^$"2K[T#0$q$B^C]KO2qniejXo?h0`D%\8L%Z`+,%G]
%W;UGM+$^1!fZ#"`Ao:bk++3b'])?dom]LHUEM(E;V"X14rie%Mb&Mm]YP-"I+51l,l&tp5e<?71Mi`)6B%a:N(Za/>)l3.^d#dS7
%X?VAKLNVVfa2Q+&DYueuU9@-,Il;<aIkK(nL]/\B_6HRaZ:/#f3G^p3QU<IUGRiaE8&Ki6NB^*q&;i&=1]@B[O:XAM*6:&;*2"7#
%n:dH0>J5H,g_O2(NP**&(sVV@Gqj/iSIb:qHZ#Z5bMsTmcp8,'EgFN0?tob)@G?lka4rVE*%Miff_F<f-GUdRYedqY?f`i9eu#Db
%1hAL\O(Rehrgn*BBlc.g(gq7W$b2G?:;OBV"[)AKfrDE.=7_:XiCCE[F1GOC9V0pGLmAn=S6[Hr-s@&Og*s5AF1.fZ0CBMEqP<4u
%n^E5S-$/,BBB^>-:?=#ml`oj0X4Rk`CH\\mO]5^R'K?,iY2b<.PcA=3%7qAo&=)TW:gV>YC<\i9R[s8:YAt.Pg]6?LEscS&V!.'D
%bpOSla0;a"5=8C#!KA)M)/;%"Xlg`D67L&CjdA9Ig0$LN'X)6h(``IXAR1]Dot:8";"QMRoNmr<@E;+BD9W4+$&(n+XW#Z'TA2NE
%&cd:rBL2-bY!(@Q(4tja<K4HF:5AcA7_d-kVN__f$F!hj)[o1&Wgq`1*W+!^@X7M-QcUbkaoX0$-PM&akVa=)qOp7mlh"<d36Xr2
%m,2KeO@L):<,D_g;c'<u2Q>TX+jq[1=oMmk13)Jl1]'i>r7DLa.XY`-.C,"'O\MDq_]TGTB+$^b:[!t+NNNIY!+77(N>!"cKW+$.
%jhR02"]a\&0lL8qW652b@o$>M-'arDQ/r%=?c_>Lb+`TD_JpU^'==EpUDsagE>6;h*9qu#pGVqG=^W\%r"o/QWP7YbaWte5E<jI1
%G?A?sT2W-$6<fVpp"%cpl=j1]nT\PZaHAVd&f6OO#'GDtf6](SU^=GMs!hYsJaQ6:7L'W+?#)_K/72-#QXn^INt#8*R14b&kH$pp
%*@$.q-_04&MXK`uK#17oEInU`<">5ZLM,)9<&gS[RbIWAZ&WiQ^)Gdp-WpOcD-ZmC1'tBm/!n6Ggpf@!;Y\E>s1ERUe6ANHKej=b
%UYq8OXD(&nYWk"=oO9g'km13LSAi'pA%B\2LAl?7&fQQKdM1M<")Ne..U1.(aTqtsS9>eKSE3hcb#q-t2V,*L0n-`n26AB*qD?bG
%o6;+0NA>!<HfUjQHa-`+m_*2pE>^E50f&eaJ*j\pTN#tRJ_OoXX9`90/n7TXHV<@XN&?,`NMd?m<C;*N`6dN),4R/W,ai"NXm%HH
%SCX,^lbok^%E=0iZ"@Ff<eFEBKYoKRj(Sge%U0AhXgE:4"m7F@%A4;O;pE1FV$=]"E]bp-aHA?"].Gn-m@ML$DKe^-RWg^:*Ros$
%jpj]bEs"GI`#/tS/<jDe5J]AIneQShrSiAtRm)DY6<!2G>MKfmS*Z2*80P>gFNb6P4@/AN7fd:c7Rt"75nl%;N/tiiPt0mK>L%b^
%X>eEpZ1LSu>F^a`M4,.P@seu<eIm3K>GfNkIdWVYgp-TrfO/l(LkMaT8?>5<pu%q*$Vq5r20KNQC\\#q(-K)%./\$+m57Dadc\>1
%:#+m+TZ_ETk&2Uhji[]cKs-f]pjd05K1'd`!,[*W51![QbEo3@9kc$r#;&"Z&\o8k`QYT$2SN]u1cLYI;`-0$1ei?l29kiH.oL`:
%6OA%]8!AQ*14?BZ*sS07N@WVPMePISpsA(R5sp>O4%uelYj:9Bp_JP33%X/-*\[k_RWZ66:^T8@(5R5_BaRZG5+$WZX38l<W[s&.
%Ze0`4o&5F`I%0r3-R1fFI=b*Jh<!uhKPfkPqmPk=P94Z.).'>3?kjC/$HV#]e<%gjDR"c!dgO(JSJ"s:?)F!95-9HQB)%nuLHDEM
%;rhD1=Zj`X*[^%3)IroK3Y,2'450Os&?!g;pXt=%Ae'^PXEckWK!@P<Am"Hp9Up092qmdYh3H[=<!-oZ%XM"4Op0N-:SlJTqju@s
%X^K4D>/<5h3=nGCP'k>oTKtkJk!gf6/U:m]=cT`pCO*0\[N/am<.9Ytp:XA*-2>SN.P$ek*ajiq>ZIm@"9luEmnX*IKFVU@])pn)
%'h"$$7903ragRZY!LY6,^nr?H<@N,!<7U?oe614.Uu]qWL0/RjqRlZbEb4RT3Rc]lU"R1#<`O]:c:i](#pOQ!Y4c<\_Wmff`[$\O
%l3P2EP1".(mK)/k:3oXXi;h9X:UTXP7-W5:HZ:NOqTul?6kAV305"?;qV[a9C4mT3>ilDcjt:(2a0I*@bY34NR9>EWdoPXQ`aisW
%\[6:o5ec6_.$3N/%gN["V;+W;`Bl%S%)d%?`>/S_N`=I2;B2qmFA_>_0l6=;rHt"=&T:[h_;P6/@#s-CN4L_U'(nA92+tk>[/\nO
%0AMW0@6e$@1S<&)_oum;jg]>3%Aur890C5<Ak&3*=nM2D213U.lF(Rqg<1o&2X+_%AAci@B5b,E%82f&>AUXP>W3jQo8LC2[#WWL
%UbRG"h0;hD#V:J^9OuCQ+$R^\H]R5"eV[Lo&i0+4K2>FP+I,e_'qEmG=b6C0Cqbl5&X.h7nL6W1]@7`RW=DlO-m7a*<AVX&UE+UL
%EWRdaVojW[9iJe&pa@p3VN/b1QkFro#VK)SMcbKnTQriQ]nH%*OE>cOFTkUIcsD6I:$0D8B/[C>q?n:+5dBnDXc*\<1NC_bpFJhm
%2iG20LSW9_CRRe&"<Y(hi#Tf'!]3e/01\)G<lOUFh6G.'>XK:ka+:fFE^`uNJb'/l<mHo%a?4$Z9LK/F;Oo0`bm?cNR\uNN71,Q]
%.Ud\k]p*CX#+r?C9atNC#25G08ILE<[+H2ghXZ(P%t<IcV=7a/qA,sQj2KK!(R`Um00_L6Y&&[:ac)^g)OVl7YliEGGm#_8`<g^o
%U=qA;.u.7SeUl"8/d+:>'W%[q+c$][B[S;GBUSfmOe?`ak:W@Y@Xb$te=-s)+#'2OPN.K>T\OcFE)@,]nWVY4ZG'el:W?kaHF3na
%1r[)K9eNB>B2*q>8,q>CG00R+2e.^_/$luT_?<iOh&nHufI\dn/d9tHHP\(2K;Mc.QrAHDp]k[<'58h)Q3:HD9Mu7oH;mb-]NM2a
%;LIK16i\dicO,;^9EQh]Xn(9Zo4UNfD1de$1q%i6UI(`?mfqF//Od%)FH@:/qsr8O(eq?EN`I9OfP,$2?R5KuX7K6+I>l\)lD]U5
%fge>s;elF:LUV'H#/4!Q:\K&)O9nBZ=4YOkZIc7LI9@G5&(`m`jZW;-]k>QFc>EC6(NfN1:JecLHsnE.L4&I6=e4sh&HFE2D#<(1
%Q6NngmnE-3joP4ij"7][\_`H20ZYm4?$Q$aMkrE_X4ulaTAX[kR69rkW><[TNWo]-gthRnrV=B;WotbIm<Lpija"U+o=P1b]%`g#
%5SeHc\DAqk,.bqgSti6.bO`H0e+8$?Ad2j8G.]s&R+5@n_9tdtVFtes-9P'U,0r?J3f2b#4RYhXd.<YIJgV]JCWl=`Oi-e)_<#s_
%BhK*#QH8UDH4&mTh,r,pc9jWWdXnso*RWka2@2Goj1RY5Y'8rTkjI8L:)KQsoIXQUY*`_'a3-3!@.gJg*a0hF+Skj`2c\2b#,<f,
%B?*RN"6^/3Oi!K=5gaA0j9%_;ri_IW!X:oeH?Seq5g-]nH/Y,[j?mlth==eoWSg<^SYni4N;8cK7o8FTP=JN:6:uE9mMh5d@ORGg
%\]lpVf>)@Wp*9?@T_\MJKnEk>BI^N4,#PLQpq=%$-KO14'k_d_Yu(.q30>O9Xk*_.d<U:SOk*FX4+h.l)D?o7ZW2.!fp!n\)]88%
%8;Q%S-Uj"pZ,]4ZQ1K0$_"EPG4K"(n"aMHaChT1(f@&RW1.OR22nDeJ^Z\b`4kAgl%9*N`A$,8ah<2b!8MghtHVh%%2$ZVFT[dQm
%f6Q^>We&84'NI`8piB_I\@OJ=@<(_B8V-.B;GkO)DP!h\E1iY,NFTbOHSo\9VB>7NPr!cF#S*^C!>2M^1$X9Pq/Y%/rC'["Tr;uL
%[]"5Nk>\k]P@nOkL./L$8fdJ73;mnqlFn6!kHuACA])4Ble%Kmne=BbPQ0jU&K_'-dafgtfH)k:0R8t_3_p&J_1Q7];Y[WV)s0g_
%U*Q1o+rK]A="hI_!?&9dg_\dT&NkR1"#KjD7.rC6TCZiLf[h](UM>C$1Xag^!oo7AG=Vd$e]\sQ;"<[K='a*+_&=EU(8LA2A]S45
%HUR/#N;tt-RqYGa3p$n"451/O<iPVF!>??O1e\mr\+^^iS6WOt<0(+UC[loWfc_S>47-@D0G'/C>n<"D)592tWa7%(KS:e1-0*iU
%9NbBP,0TW"ePjFZY]Q!%4dgf.$m+.MnLSZAMHBJfRO=DB&No>!_Xe_f=Q":K[:Dh(5&sD=I>2E>Q!ScDa$g4t'kJTORY)]9(1bp2
%MONa+D`TWEJ/fGM`isGWDB-?nN[t9"#sh'"G4-T4"-&FBO<9ag7>WYqPRGX7GKT@SF*TFEpKkQlHLdHB_jo!G;<qq\NI7.%S<hS,
%S^qV-V)]cb->CEoH5]U_ZOuG:8b*@,G"bNM[&r#D=TpEn2Bm$cY8d>F*FhLMUKg934E1eRYdL1BR_?OKc,Q71eIu%fAmK?DC!DZU
%[b]MN4A4Q&jTbK8^0>G>Uj/lZ-2h-@O`0)+7c=qr7+Q0B%m,&V=gO5RT]F:b*NSdPQ8s:ZLHU!:bFfkEL>UE35+:f\SrLaTECnK4
%PcfmQOZe%EMo2-G5^#pO,C;=XeVt'Lm+E==m+Dd%p1sl>LO?'A?O$:BcXqiTGYqebd#'60nf!5hN:oX:>j*pC3.tm<0ZR'uj`1nC
%?'JDU:O>rF6hgAfKAAT)g11*`L)<\.CM8S73'Q*p_Dn#dSVOJn<KXGA;dMiA"!H]u]HU8)FV.JW;,2[LC./m'XW3R,]Q9U66>Db:
%:n<ZO.'K>U&a,h"L:W4BU:^\DDsQ+)jV9H>\kd0??3A7RmA.C(Lq6KVMTQj+ATYX7YJJJP=1R2B7<uidj:t?@/T4A_VS$C;N4$2E
%YF+KRh/_HhH%@&r="Lj"0#fE7Y1VpVGQg&@g9H=7J;aC8jV/P51qbVMOYNQ@D;JqdoCkWl3Z,%$f'jL72%386YR%F_ZAp@G=]$uH
%gfFC/@7IJAO"S"<GXX!;ZKNpXl^.QrhIIe>H&T0NA*ejk.>\-pb?B]s,[;]tLb_Po-X2D$lQ#"og5ssZW\ls,kh<!SCAlES,'i<S
%D7$,!#th%>Srk_C6851J;9l2pSbleA;UPY(gpFm#&V(SH&M4$gW]'G*TF)QZ'i7c=2Z$WBp7=<HS*Z3Waj;?:RB[24>oa\7:\+Z0
%cK<"Q(8G6gd;W8X4q-0p)=05]:mh9DCQ4a4JB1r]9L;ZF'UcXU9!]<sR]'^VV$T0FbAp4]Fc>6BE_6F5,+>'$q>rgXo_"-dY/jbQ
%J6U>7%EQtU*]^(-"=uXQ=`/*\H#o?O)N_XmIO(2u7uQ9Ng"B_@Yn(a!,3J,P,p`u7kksa_M_$>+]TB@"I2siG!6tbJmif2]ZgLHH
%A>nNB/Uc@@8^A8nBY,h;ZB4iVh?=VsJue/<Rfu#$a[LU4i#;gPqr1U<8QBUpEIMNP!G!JOlE!YPJNB8flDs/f7l^]2H,uPZo6B%U
%;'a*ljU3;%VeF6N5e!ZIJQSEjcGHK^h4B4S=*f`)#=U:XZd,?1N%qI&aP.--]-`]@>nGEJFig62ZPcFXn@WBkAgMpXAm3!+\7((\
%AK[aoKOAJ/;L<^r`Kje5SkQepc4Dk=^Tr.G^7;DgIR!i-Vk="R?gIaeQTtMrO'hqUDnl>2%mU$jo7-c4O2(X[hgbV!5Q1<Q:Oi<.
%YQ+L/Dnl;Ic[YcFYCHH:J'G`Uqr@.[rUk)Yq>Id@J,Qjkr#[&fMAQ<gkC<;'s7*#e#N3Zt2Z~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 262356 104706 a
 currentpoint grestore moveto
 262356 104706 a 0 TeXcolorgray
0 TeXcolorgray 126799 131611 a Fd(Figure)832 b Fh(1:)1119
b(Em)-72 b(blem)832 b(of)g(the)g(Univ)-72 b(ersit)g(y)831
b(of)i(Bu\013alo)e(\(rotated)i(b)-72 b(y)831 b(180)198027
130612 y Fc(\016)199231 131611 y Fh(,)g(for)h(example\).)p
0 TeXcolorgray 239433 132297 630 77986 v 0 TeXcolorgray
254622 57468 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  0.1 true 28.5114 neg
53.39331 neg 845.67274 28.5114 .5 Frame  gsave 3.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 1 1 1  setrgbcolor
gsave fill grestore stroke grestore gsave false 1 0.0 0.0  gsave 1
1 1  setrgbcolor currentrgbcolor grestore gsave 0.4 0.4 0.4  setrgbcolor
currentrgbcolor grestore 300 1.0 0. false tx@GradientDict begin GradientFill
end grestore gsave 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0.0157 0.102 0.608 TeXcolorrgb 0 TeXcolorgray 0.0157 0.102 0.608
TeXcolorrgb 0 TeXcolorgray 0.0157 0.102 0.608 TeXcolorrgb
277456 60222 a Fi(Results)1488 b(and)f(Discussion)p 0
TeXcolorgray 244472 72135 a Fh(Something)832 b(go)72
b(es)832 b(here)254622 84799 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  0.1 true 28.5114 neg
60.36021 neg 845.67274 28.5114 .5 Frame  gsave 3.0 -45 PtoC Shadow
0.25  setgray gsave fill grestore stroke grestore gsave 1 1 1  setrgbcolor
gsave fill grestore stroke grestore gsave false 1 0.0 0.0  gsave 1
1 1  setrgbcolor currentrgbcolor grestore gsave 0.4 0.4 0.4  setrgbcolor
currentrgbcolor grestore 300 1.0 0. false tx@GradientDict begin GradientFill
end grestore gsave 5.69054 SLW 0.0157 0.102 0.608  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 0.0157 0.102 0.608 TeXcolorrgb 0 TeXcolorgray
0.0157 0.102 0.608 TeXcolorrgb 0 TeXcolorgray 0.0157 0.102 0.608
TeXcolorrgb 281342 87553 a Fi(Ac)-124 b(kno)g(wledgemen)g(ts)p
0 TeXcolorgray 244472 100237 a Fh(This)932 b(researc)-72
b(h)935 b(has)e(b)72 b(een)933 b(supp)72 b(orted)934
b(b)-72 b(y)933 b(the)h(National)g(Science)f(F)-216 b(oundation,)959
b(Gran)-72 b(t)934 b(No.)1425 b(CHE)933 b(0952253)h(to)244472
103558 y(J.A.)651 b(M.S.)g(is)g(grateful)i(for)g(\014nancial)e(supp)72
b(ort)653 b(from)g(the)f(F)-216 b(oundation)652 b(for)h(P)-72
b(olish)651 b(Science)h(\(ST)-216 b(AR)g(T)652 b(sc)-72
b(holarship\))244472 106879 y(as)977 b(w)-72 b(ell)976
b(as)i(from)g(the)g(P)-72 b(olish)976 b(Ministry)h(of)h(Science)f(and)h
(Higher)g(Education)f(\(Mobilit)-72 b(y)977 b(Plus)g(program\).)1558
b(W)-216 b(e)244472 110200 y(thank)656 b(the)g(Cen)-72
b(ter)656 b(for)h(Computational)e(Researc)-72 b(h)657
b(at)e(the)h(Univ)-72 b(ersit)g(y)656 b(at)g(Bu\013alo)f(for)i(supp)72
b(orting)655 b(our)h(researc)-72 b(h.)244472 124525 y
Fi(References)p 0 TeXcolorgray 244472 131611 a Fh([1])p
0 TeXcolorgray 553 w(Mo)72 b(ore,)832 b(B.;)1662 b(Srebro,)831
b(M.;)1663 b(Autsc)-72 b(h)g(bac)g(h,)832 b(J.)e Fb(2012,)i
Fa(8,)g Fh(4336-4346.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
PStoPSsaved restore
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
